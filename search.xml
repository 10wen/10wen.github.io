<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Ajax与Fetch请求以及跨域请求</title>
      <link href="/posts/1GTDN28.html"/>
      <url>/posts/1GTDN28.html</url>
      
        <content type="html"><![CDATA[<h1 id="Ajax-XMLHttpRequest-x2F-JQuery-x2F-Axios-x2F-Fetch请求，以及JSONP-x2F-CORS跨域请求"><a href="#Ajax-XMLHttpRequest-x2F-JQuery-x2F-Axios-x2F-Fetch请求，以及JSONP-x2F-CORS跨域请求" class="headerlink" title="Ajax-XMLHttpRequest&#x2F;JQuery&#x2F;Axios&#x2F;Fetch请求，以及JSONP&#x2F;CORS跨域请求"></a>Ajax-XMLHttpRequest&#x2F;JQuery&#x2F;Axios&#x2F;Fetch请求，以及JSONP&#x2F;CORS跨域请求</h1><h2 id="XMLHttpRequest"><a href="#XMLHttpRequest" class="headerlink" title="XMLHttpRequest"></a>XMLHttpRequest</h2><h3 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 1. 创建对象 </span></span><br><span class="line">    <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">    <span class="comment">// 2. 初始化 设置请求方法和url</span></span><br><span class="line">    xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;http://127.0.0.1:8000/server&#x27;</span>)</span><br><span class="line">    <span class="comment">// 3. 发送</span></span><br><span class="line">    xhr.<span class="title function_">send</span>();</span><br><span class="line">    <span class="comment">// 4. 事件绑定 处理服务端返回的结果</span></span><br><span class="line">    xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">// readyState 是 xhr 对象中的属性, 表示状态 0 1 2 3 4</span></span><br><span class="line">        <span class="comment">//判断 (服务端返回了所有的结果)</span></span><br><span class="line">        <span class="keyword">if</span>(xhr.<span class="property">readyState</span> === <span class="number">4</span>)&#123;</span><br><span class="line">            <span class="comment">//判断响应状态码 200  404  403 401 500</span></span><br><span class="line">            <span class="keyword">if</span>(xhr.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; xhr.<span class="property">status</span> &lt; <span class="number">300</span>)&#123;</span><br><span class="line">                <span class="comment">// 处理结果 行 头 空行 体</span></span><br><span class="line">                <span class="comment">// 响应</span></span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;状态码&#x27;</span>, xhr.<span class="property">status</span>); <span class="comment">// 状态码</span></span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;状态字符串&#x27;</span>, xhr.<span class="property">statusText</span>); <span class="comment">// 状态字符串</span></span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;所有响应头&#x27;</span>, xhr.<span class="title function_">getAllResponseHeaders</span>()); <span class="comment">// 所有响应头</span></span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;响应体&#x27;</span>, xhr.<span class="property">response</span>); <span class="comment">// 响应体</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">//设置 result 的文本</span></span><br><span class="line">                result.<span class="property">innerHTML</span>=xhr.<span class="property">response</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">result.<span class="title function_">addEventListener</span>(<span class="string">&quot;mouseover&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 1. 创建对象</span></span><br><span class="line">    <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">    <span class="comment">// 2. 初始化 设置类型（请求方式）与url</span></span><br><span class="line">    xhr.<span class="title function_">open</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;http://127.0.0.1:8000/server&#x27;</span>);</span><br><span class="line">    <span class="comment">// 设置请求体内容的类型</span></span><br><span class="line"><span class="comment">// xhr.setRequesHeader(&#x27;Content-Type&#x27;,&#x27;application/x-www-from-urlencoded&#x27;);</span></span><br><span class="line">    <span class="comment">// 设置响应体数据的类型</span></span><br><span class="line">    <span class="comment">// xhr.responseType = &quot;json&quot;;</span></span><br><span class="line">    <span class="comment">// 超时设置 （2秒）</span></span><br><span class="line">    xhr.<span class="property">timeout</span> = <span class="number">2000</span>;</span><br><span class="line">    <span class="comment">// 超时回调</span></span><br><span class="line">    xhr.<span class="property">ontimeout</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;网络超时，请稍后重试&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 网络异常回调</span></span><br><span class="line">    xhr.<span class="property">onerror</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;网络异常，请稍后重试&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3. 发送   设置请求参数（请求体）</span></span><br><span class="line">    xhr.<span class="title function_">send</span>(<span class="string">&#x27;a=100&amp;b=200&amp;c=300&#x27;</span>);</span><br><span class="line">    <span class="comment">// 4. 事件绑定</span></span><br><span class="line">    xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">// 判断</span></span><br><span class="line">        <span class="keyword">if</span>(xhr.<span class="property">readyState</span> === <span class="number">4</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(xhr.<span class="property">status</span> &gt;=<span class="number">200</span> &amp;&amp; xhr.<span class="property">status</span> &lt; <span class="number">300</span>)&#123;</span><br><span class="line">                <span class="comment">// 处理服务端返回的结果</span></span><br><span class="line">                result.<span class="property">innerHTML</span> = xhr.<span class="property">response</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="取消请求"><a href="#取消请求" class="headerlink" title="取消请求"></a>取消请求</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">btn.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    xhr.<span class="title function_">abort</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="重复请求，取消前面请求"><a href="#重复请求，取消前面请求" class="headerlink" title="重复请求，取消前面请求"></a>重复请求，取消前面请求</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> xhr = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">let</span> isSending = <span class="literal">false</span>;</span><br><span class="line">btn.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (isSending) xhr.<span class="title function_">abort</span>(); <span class="comment">// 取消上次请求</span></span><br><span class="line">    xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">    isSending = <span class="literal">true</span>;</span><br><span class="line">    xhr.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>,<span class="string">&quot;http://127.0.0.1:8000/delay&quot;</span>);</span><br><span class="line">    xhr.<span class="title function_">send</span>();</span><br><span class="line">    xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span>) &#123;</span><br><span class="line">            isSending = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JQuery"><a href="#JQuery" class="headerlink" title="JQuery"></a>JQuery</h2><h3 id="GET-1"><a href="#GET-1" class="headerlink" title="GET"></a>GET</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// $.get/post(url, [data], [callback], [type])</span></span><br><span class="line">$.<span class="title function_">get</span>(<span class="string">&quot;http://127.0.0.1:8000/jquery&quot;</span>, &#123;<span class="attr">a</span>: <span class="number">100</span>, <span class="attr">b</span>:<span class="number">200</span>&#125;, <span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;, <span class="string">&quot;json&quot;</span>) <span class="comment">// 响应体数据格式</span></span><br></pre></td></tr></table></figure><h3 id="POST-1"><a href="#POST-1" class="headerlink" title="POST"></a>POST</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">post</span>(<span class="string">&quot;http://127.0.0.1:8000/jquery&quot;</span>, &#123;<span class="attr">a</span>: <span class="number">100</span>, <span class="attr">b</span>:<span class="number">200</span>&#125;, <span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="通用"><a href="#通用" class="headerlink" title="通用"></a>通用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line"><span class="comment">// url</span></span><br><span class="line"><span class="attr">url</span>: <span class="string">&#x27;http://127.0.0.1:8000/jquery-server&#x27;</span>,</span><br><span class="line"><span class="comment">// 参数</span></span><br><span class="line"><span class="attr">data</span>: &#123;<span class="attr">a</span>:<span class="number">100</span>, <span class="attr">b</span>:<span class="number">200</span>&#125;,</span><br><span class="line"><span class="comment">// 请求类型</span></span><br><span class="line"><span class="attr">type</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line"><span class="comment">// 响应体结果</span></span><br><span class="line"><span class="attr">dataType</span>: <span class="string">&#x27;json&#x27;</span>,</span><br><span class="line"><span class="comment">// 成功的回调</span></span><br><span class="line"><span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="comment">// 超时时间</span></span><br><span class="line"><span class="attr">timeout</span>: <span class="number">2000</span>,</span><br><span class="line"><span class="comment">// 失败的回调</span></span><br><span class="line"><span class="attr">error</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;出错拉~&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="comment">// 头信息</span></span><br><span class="line"><span class="attr">headers</span>: &#123;</span><br><span class="line"><span class="attr">c</span>: <span class="number">300</span>,</span><br><span class="line"><span class="attr">d</span>: <span class="number">400</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h2><h3 id="GET-2"><a href="#GET-2" class="headerlink" title="GET"></a>GET</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="property">defaults</span>.<span class="property">baseURL</span> = <span class="string">&quot;http://127.0.0.1:8000&quot;</span>;</span><br><span class="line">axios.<span class="title function_">get</span>(<span class="string">&quot;/axios-server&quot;</span>, &#123;</span><br><span class="line">    <span class="comment">// url 参数</span></span><br><span class="line">    <span class="attr">params</span>: &#123;</span><br><span class="line"><span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">vip</span>: <span class="number">7</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 请求头信息</span></span><br><span class="line">    <span class="attr">headers</span>: &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;kong&quot;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">22</span></span><br><span class="line">    &#125; </span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="POST-2"><a href="#POST-2" class="headerlink" title="POST"></a>POST</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// axios.post(url[, data[, config]])</span></span><br><span class="line">axios.<span class="title function_">post</span>(<span class="string">&quot;http://127.0.0.1:8000/axios-server&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="number">123</span>,</span><br><span class="line">    <span class="attr">password</span>: <span class="number">456</span></span><br><span class="line">&#125;,&#123;</span><br><span class="line">    <span class="comment">// url 参数</span></span><br><span class="line">    <span class="attr">params</span>: &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">vip</span>: <span class="number">7</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 请求头信息</span></span><br><span class="line">    <span class="attr">headers</span>: &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;kong&quot;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">22</span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;    </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="通用-1"><a href="#通用-1" class="headerlink" title="通用"></a>通用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">axios</span>(&#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">    <span class="comment">// url</span></span><br><span class="line">    <span class="attr">url</span>: <span class="string">&quot;http://127.0.0.1:8000/axios-server&quot;</span>,</span><br><span class="line">    <span class="attr">params</span>: &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="number">2</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">headers</span>: &#123;</span><br><span class="line"><span class="attr">a</span>: <span class="number">100</span>,</span><br><span class="line">        <span class="attr">b</span>: <span class="number">200</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 请求体</span></span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line"><span class="attr">username</span>: <span class="number">123</span>,</span><br><span class="line">        <span class="attr">password</span>: <span class="number">234</span>,</span><br><span class="line">    &#125; </span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">status</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">statusText</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">headers</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">data</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="默认配置"><a href="#默认配置" class="headerlink" title="默认配置"></a>默认配置</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//默认配置</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">method</span> = <span class="string">&#x27;GET&#x27;</span>;<span class="comment">//设置默认的请求类型为 GET</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">baseURL</span> = <span class="string">&#x27;http://localhost:3000&#x27;</span>;<span class="comment">//设置基础 URL</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">params</span> = &#123;<span class="attr">id</span>:<span class="number">100</span>&#125;; <span class="comment">// params 参数</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">timeout</span> = <span class="number">3000</span>; <span class="comment">//超时时间</span></span><br></pre></td></tr></table></figure><h3 id="axios-创建实例对象"><a href="#axios-创建实例对象" class="headerlink" title="axios 创建实例对象"></a>axios 创建实例对象</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span></span><br><span class="line"><span class="keyword">const</span> instance = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">    <span class="attr">baseURL</span>: <span class="string">&#x27;/api&#x27;</span>,</span><br><span class="line">    <span class="attr">timeout</span>: <span class="number">5000</span></span><br><span class="line">&#125;) </span><br></pre></td></tr></table></figure><h3 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 请求拦截器</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">config</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求拦截器 成功 - 1号&#x27;</span>);</span><br><span class="line">    config.<span class="property">params</span> = &#123;<span class="attr">a</span>:<span class="number">100</span>&#125;;</span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">&#125;, <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应拦截器</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;响应拦截器 成功 1号&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> response.<span class="property">data</span>;</span><br><span class="line">&#125;, <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置多个请求拦截器或者多个相应拦截器</span></span><br><span class="line"><span class="comment">// 请求拦截器是 unshift 方法添加到处理函数数组队列</span></span><br><span class="line"><span class="comment">// 响应拦截器是 push 添加到处理函数数组队列</span></span><br><span class="line"><span class="comment">// 按数组顺序处理</span></span><br><span class="line">promise = [请求拦截器<span class="number">2</span>, 请求拦截器<span class="number">1</span>, 请求, 响应拦截器<span class="number">1</span>, 响应拦截器<span class="number">2</span>]</span><br></pre></td></tr></table></figure><h3 id="取消请求-1"><a href="#取消请求-1" class="headerlink" title="取消请求"></a>取消请求</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> cancelHandle = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">request</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">if</span> (cancelHandle !== <span class="literal">null</span>) <span class="title function_">cancelHandle</span>(); <span class="comment">// 取消请求</span></span><br><span class="line">    <span class="title function_">axios</span>(&#123;</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;http://localhost:3000/post&#x27;</span>,</span><br><span class="line">        <span class="comment">// 添加取消请求的配置</span></span><br><span class="line">        <span class="attr">cancelToken</span>: <span class="keyword">new</span> axios.<span class="title class_">CancelToken</span>(<span class="function">(<span class="params">cancel</span>)=&gt;</span>&#123;</span><br><span class="line">            cancelHandle = cancel; <span class="comment">// 将取消请求的回调函数暴露</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">cancelRequest</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">cancelHandle</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="fetch"><a href="#fetch" class="headerlink" title="fetch"></a>fetch</h2><h3 id="POST-3"><a href="#POST-3" class="headerlink" title="POST"></a>POST</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&quot;http://127.0.0.1:8000/fetch-server?vip=10&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">    <span class="attr">headers</span>: &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&quot;kong&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 请求体</span></span><br><span class="line">    <span class="attr">body</span>: <span class="string">&quot;username=admin&amp;password=123456&quot;</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// return response.text();</span></span><br><span class="line">    <span class="keyword">return</span> response.<span class="title function_">json</span>();</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h2><h3 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h3><ul><li><code>&lt;script&gt;</code>标签支持跨域请求</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// html 文件 file://d/json-p.html</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 供后端调用，该处理数据的函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">handler</span>(<span class="params">data</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> rseult = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;id&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        result.<span class="property">innerHTML</span> = data.<span class="property">name</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://127.0.0.1:8000/jsonp-server&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> // 协议、域名、端口都不同</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 服务端 127.0.0.1:8000</span></span><br><span class="line">app.<span class="title function_">all</span>(<span class="string">&quot;/jsonp-server&quot;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">const</span> data = &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;kong&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">let</span> str = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data);</span><br><span class="line">    <span class="comment">// 返回结果给前端，最终调用了前端定义的handler函数并传参 str</span></span><br><span class="line">    response.<span class="title function_">end</span>(<span class="string">`handler(<span class="subst">$&#123;str&#125;</span>)`</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="JSONP跨域实践"><a href="#JSONP跨域实践" class="headerlink" title="JSONP跨域实践"></a>JSONP跨域实践</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// 前端</span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> input = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;input&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">handler</span>(<span class="params">data</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            input.<span class="property">style</span>.<span class="property">border</span> = <span class="string">&quot;solid 1px #f00&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            p.<span class="property">innerHTML</span> = data.<span class="property">msg</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        input.<span class="property">onblur</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> username = <span class="variable language_">this</span>.<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 向服务端发送请求 检测用户是否存在</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 创建 script 标签</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;script&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            script.<span class="property">src</span> = <span class="string">&quot;http://127.0.0.1:8000/check-username?username=&quot;</span> + username;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(script);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 后端</span></span><br><span class="line">app.<span class="title function_">all</span>(<span class="string">&quot;/check-username&quot;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> data = &#123;</span><br><span class="line">        <span class="attr">exist</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">msg</span>: <span class="string">&quot;用户名已经存在&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> str = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data);</span><br><span class="line">    response.<span class="title function_">end</span>(<span class="string">`handler(<span class="subst">$&#123;str&#125;</span>)`</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="JQuery发送JSONP请求"><a href="#JQuery发送JSONP请求" class="headerlink" title="JQuery发送JSONP请求"></a>JQuery发送JSONP请求</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 前端</span></span><br><span class="line">$.<span class="title function_">getJSON</span>(<span class="string">&quot;http://127.0.0.1:8000/jquery-jsonp-server?callback=?&quot;</span>, <span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">    $(#result).<span class="title function_">html</span>(<span class="string">`</span></span><br><span class="line"><span class="string">      名称：<span class="subst">$&#123;data.name&#125;</span>,</span></span><br><span class="line"><span class="string">        校区：<span class="subst">$&#123;data.city&#125;</span></span></span><br><span class="line"><span class="string">      `</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 后端</span></span><br><span class="line">app.<span class="title function_">all</span>(<span class="string">&quot;/jquery-jsonp-server&quot;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">const</span> data = &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;kong&quot;</span>,</span><br><span class="line">        <span class="attr">city</span>: [<span class="string">&#x27;北京&#x27;</span>, <span class="string">&#x27;上海&#x27;</span>]</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">let</span> str = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data);</span><br><span class="line">    <span class="keyword">let</span> callbackHandle = request.<span class="property">query</span>.<span class="property">callback</span>;</span><br><span class="line">    response.<span class="title function_">end</span>(<span class="string">`<span class="subst">$&#123;callbackHandle&#125;</span>(<span class="subst">$&#123;str&#125;</span>)`</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 后端</span></span><br><span class="line">app.<span class="title function_">all</span>(<span class="string">&quot;/cors-server&quot;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">response.<span class="title function_">setHeader</span>(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&quot;*&quot;</span>);  <span class="comment">// 允许任意源</span></span><br><span class="line">    response.<span class="title function_">setHeader</span>(<span class="string">&quot;Access-Control-Allow-Headers&quot;</span>, <span class="string">&quot;*&quot;</span>); <span class="comment">// 允许任意请求头</span></span><br><span class="line">    response.<span class="title function_">setHeader</span>(<span class="string">&quot;Access-Control-Allow-Method&quot;</span>, <span class="string">&quot;*&quot;</span>); <span class="comment">// 允许任意请求方法</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ajax </tag>
            
            <tag> jquery </tag>
            
            <tag> axios </tag>
            
            <tag> fetch </tag>
            
            <tag> cors </tag>
            
            <tag> jsonp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搞懂 JavaScript 如何实现图片懒加载</title>
      <link href="/posts/1ETAZZ4.html"/>
      <url>/posts/1ETAZZ4.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址 <a href="https://www.jb51.net/article/252472.htm">www.jb51.net</a></p></blockquote><p>图片懒加载，往往作为减少首页白屏时间的一个解决方案而出现。直观的来说，就是不要直接加载所有图片，而是满足一定条件后才加载，也就是” 惰性加载 “。实现图片懒加载的方式有很多，如果要简单点那就直接使用第三方插件：<a href="https://www.npmjs.com/package/vue-lazyload">vue-lazyload</a>，如果想探究一下别人的插件是怎么实现图片懒加载的，那么可以看看本文是如何实现的。</p><h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><p>实现图片懒加载我们需要先明白具体的场景，一般来说，我们会在首屏先加载几张图片，其他的图片则先不加载，在页面滚动时，图片快出现在视窗中的时候才来加载图片。为什么要这么实现呢，因为对于图片很多的场景，如果一次性加载出所有的图片，可能会导致页面白屏时间比较长，特别是图片比较大的时候。</p><p>实现过程：</p><ul><li>使用<code>data-*</code>自定义数据属性给<code>img</code>标签新增一个<code>data-src</code>属性</li><li>全局监听滚动事件，使用节流处理回调函数</li><li>在回调函数中，判断图片是否已经出现在可视区域，如果已经出现在可视区域，则加载该图片</li><li>页面初始化的时候执行一下回调函数，保证首屏有图片显示</li></ul><p>在这个实现过程中，涉及一些知识点，我们来快速回顾一下：</p><h2 id="准备知识"><a href="#准备知识" class="headerlink" title="准备知识"></a>准备知识</h2><h3 id="data"><a href="#data" class="headerlink" title="data-*"></a>data-*</h3><p><code>data-*</code>是可自定义数据属性的属性，可用在所有的 HTML 元素上面，嵌入自定义的数据内容。这些自定义的数据可以在<code>HTMMLElement.dataset</code>中被访问到，例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">&quot;img&quot;</span> <span class="attr">src</span>=<span class="string">&quot;loading.gif&quot;</span> <span class="attr">data-src</span>=<span class="string">&quot;xxx.png&quot;</span> <span class="attr">data-</span> /&gt;</span></span><br><span class="line">// 访问dataset</span><br><span class="line">const img = document.getElementById(&#x27;img&#x27;)</span><br><span class="line">console.log(img.dataset.src); // xxx.png</span><br><span class="line">console.log(img.dataset.name); // img</span><br></pre></td></tr></table></figure><p>我们实现图片懒加载的最终目的，就是在恰当的时候使用<code>data-src</code>的值替换到<code>src</code>，加载真实的图片。<code>data-*</code>定义的数据不仅可以在 js 中访问，也可以在 CSS 中访问，具体可参考：<a href="https://developer.mozilla.org/zh-CN/docs/Learn/HTML/Howto/Use_data_attributes">dataset</a></p><h3 id="getBoundingClientRect"><a href="#getBoundingClientRect" class="headerlink" title="getBoundingClientRect()"></a>getBoundingClientRect()</h3><p><code>Element.getBoundingClientRect()</code>方法会返回一个<code>DOMRect</code>对象，其包含了当前元素的大小，以及相对于视窗的位置信息。听名字可能会有点迷糊，但是结合图来看就比较好理解了：</p><p><img src="https://img.jbzj.com/file_images/article/202206/202262281729053.png"></p><p><code>DOMRect</code>对象中的<code>width</code>和<code>height</code>是包含了元素的<code>padding</code>和<code>border-width</code>，其位置信息指的是包含元素的最小矩形的每条边距离视窗原点<code>(0,0)</code>的位置。</p><h3 id="throttle"><a href="#throttle" class="headerlink" title="throttle"></a>throttle</h3><p>由于我们会全局监听<code>scroll</code>滚动事件，如果每次滚动都触发回调函数的话会造成不必要的计算成本，因此我们考虑使用节流来处理滚动事件。节流的具体细节就不在此重复，我们先简单实现一个节流：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">fn, delay = <span class="number">200</span></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (timer) <span class="keyword">return</span>;</span><br><span class="line">        timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">            timer = <span class="literal">null</span>;</span><br><span class="line">        &#125;, delay);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="window-innerHeight"><a href="#window-innerHeight" class="headerlink" title="window.innerHeight"></a>window.innerHeight</h3><p>有几个很相似的”height“，我们就简单都梳理一下：</p><ul><li><code>window.innerHeight</code>：浏览器可视区域的高度；如果有水平滚动条，也会包含滚动条高度</li><li><code>window.outerHeight</code>：获取整个浏览器的高度</li><li><code>Element.scrollHeight</code>：元素内容的高度，包括由于溢出导致隐藏的内容高度</li><li><code>Element.clientHeight</code>：元素内部的高度，包含内边距，但不包括水平滚动条、边框、外边距</li></ul><p>这里我们使用<code>innerHeight</code>即可，因为我们是在<code>window</code>对象上监听<code>scroll</code>滚动事件。</p><p>准备工作已经完毕，接下来就直接上手代码。</p><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><p>代码中都有相应的注释，在了解上面的准备知识后，代码就挺简单的了：</p><h3 id="js-部分"><a href="#js-部分" class="headerlink" title="js 部分"></a>js 部分</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用for循环批量创建img，html中可没有v-for可以使用</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; <span class="number">10</span>; index++) &#123;</span><br><span class="line">    <span class="keyword">let</span> img = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;img&quot;</span>);</span><br><span class="line">    img.<span class="property">src</span> = <span class="string">&quot;./loading.gif&quot;</span>;</span><br><span class="line">    img.<span class="property">dataset</span>.<span class="property">src</span> = <span class="string">&quot;./dog.jfif&quot;</span>; <span class="comment">// 由于我们是通过js创建的，因此就无法直接使用data-*，如果是在html上面，需要添加此属性</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(img);</span><br><span class="line">    img = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 节流</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">fn, delay = <span class="number">200</span></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (timer) <span class="keyword">return</span>;</span><br><span class="line">        timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">            timer = <span class="literal">null</span>;</span><br><span class="line">        &#125;, delay);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 懒加载-回调函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">lazyLoad</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> imgs = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;img[data-src]&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!imgs.<span class="property">length</span>) <span class="keyword">return</span>;</span><br><span class="line">    imgs.<span class="title function_">forEach</span>(<span class="function"><span class="params">img</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> rect = img.<span class="title function_">getBoundingClientRect</span>();</span><br><span class="line">    <span class="keyword">if</span> (rect.<span class="property">top</span> &lt; <span class="variable language_">window</span>.<span class="property">innerHeight</span>) &#123;</span><br><span class="line">        img.<span class="property">src</span> = img.<span class="property">dataset</span>.<span class="property">src</span>;</span><br><span class="line">        img.<span class="title function_">removeAttribute</span>(<span class="string">&#x27;data-src&#x27;</span>); <span class="comment">// 我们是通过img[data-src]查找所有img标签的，渲染后就删除data-src可减少forEach循环的计算成本</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 全局监听scroll滚动事件</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, <span class="title function_">throttle</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">lazyLoad</span>();</span><br><span class="line">&#125;, <span class="number">100</span>));</span><br><span class="line"><span class="comment">// 初始化的时候执行一下加载图片的函数</span></span><br><span class="line"><span class="title function_">lazyLoad</span>();</span><br></pre></td></tr></table></figure><h3 id="CSS-部分"><a href="#CSS-部分" class="headerlink" title="CSS 部分"></a>CSS 部分</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-direction</span>: column;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">10px</span> auto;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">object-fit</span>: cover;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#070707</span>;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p>首屏展示：</p><p><img src="https://img.jbzj.com/file_images/article/202206/202262281729054.jpg"></p><p>首先我们会默认加载三张图片，查看元素节点，这三张图片的<code>data-src</code>都没有，而另外没有加载的图片是有<code>data-src</code>的。</p><p>滚动中展示：</p><p><img src="https://img.jbzj.com/file_images/article/202206/202262281729055.jpg"></p><p>滚动时会触发图片加载的回调函数，DOM 树也会跟着改变</p><p>滚动结束展示</p><p><img src="https://img.jbzj.com/file_images/article/202206/202262281729056.jpg"></p><p>所有图片都将只有<code>src</code>，没有<code>data-src</code>。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文通过监听滚动事件，在图片出现在可视区域前才加载真正的图片，如果未出现则使用默认的 loading 图片的方式实现了图片懒加载。一般来说，loading 图片都会比较小，而实际的图片会大很，因此使用 loading 图片来代替是可以减少图片渲染时间的。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> vue </tag>
            
            <tag> Java </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6-ES11特性</title>
      <link href="/posts/1NN2Q2S.html"/>
      <url>/posts/1NN2Q2S.html</url>
      
        <content type="html"><![CDATA[<h1 id="ES6-11特性"><a href="#ES6-11特性" class="headerlink" title="ES6-11特性"></a>ES6-11特性</h1><h2 id="ES6特性"><a href="#ES6特性" class="headerlink" title="ES6特性"></a>ES6特性</h2><h3 id="let"><a href="#let" class="headerlink" title="let"></a>let</h3><ul><li>不能重复声明变量</li><li>块级作用域<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i&lt;length; i++) &#123;</span><br><span class="line">    btns[i].<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello&quot;</span> + i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>不存在变量提升</li><li>不影响作用域链</li></ul><h3 id="const"><a href="#const" class="headerlink" title="const"></a>const</h3><ul><li>常量需要赋初值</li><li>常量的值不能修改</li><li>块级作用域</li><li>数组、对象的值可以修改，因为引用地址不变</li></ul><h3 id="变量的解构赋值"><a href="#变量的解构赋值" class="headerlink" title="变量的解构赋值"></a>变量的解构赋值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, b, c] = anotherArray;</span><br><span class="line"><span class="keyword">let</span> &#123;name, age, func&#125; = anotherObj;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">`&lt;ul&gt;</span></span><br><span class="line"><span class="string">              &lt;li&gt;hello&lt;/li&gt;</span></span><br><span class="line"><span class="string">            &lt;/ul&gt;`</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">&quot;kong&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> name = <span class="string">`name: <span class="subst">$&#123;name&#125;</span>`</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="对象的简化书写"><a href="#对象的简化书写" class="headerlink" title="对象的简化书写"></a>对象的简化书写</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&quot;kong&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> say = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    name,</span><br><span class="line">    say,</span><br><span class="line">    sayName () &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;还可以这样简写方法&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><ul><li>适合与this无关的<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">func</span> = (<span class="params">a,b</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="title function_">func</span> = a =&gt; a**<span class="number">2</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="title function_">func</span> = (<span class="params">a,b</span>) =&gt; a+b;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>this 是静态的，始终指向函数声明时所在的作用域的this，call&#x2F;apply&#x2F;bind 都无法改变<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例子</span></span><br><span class="line">ad.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// this 指向箭头函数声明时所在的作用域的 this 也就是 ad 事件源对象</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">style</span>.<span class="property">background</span> = <span class="string">&#x27;pink&#x27;</span>;</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="keyword">let</span> res = arr.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item % <span class="number">2</span> === <span class="number">0</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>箭头函数不能作为构造器实例化对象，即不能使用new操作符</li><li>不能使用 argument 对象</li></ul><h3 id="函数参数默认设置"><a href="#函数参数默认设置" class="headerlink" title="函数参数默认设置"></a>函数参数默认设置</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b, c = <span class="number">10</span></span>) &#123;  </span><br><span class="line">    <span class="keyword">return</span> a + b + c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">connect</span>(<span class="params">&#123;host=<span class="string">&quot;127.0.0.1&quot;</span>, username, password&#125;</span>) &#123;  </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(host + <span class="string">&quot;/&quot;</span> + username + password);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">connect</span>(&#123;</span><br><span class="line">    <span class="attr">host</span>: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">    <span class="attr">username</span>: <span class="string">&#x27;kong&#x27;</span>,</span><br><span class="line">    <span class="attr">password</span>: <span class="string">&#x27;123456&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="rest参数"><a href="#rest参数" class="headerlink" title="rest参数"></a>rest参数</h3><ul><li>rest 参数须放最后 <code>func(a, b, ...args)</code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">data</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(args)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">data</span>(<span class="string">&#x27;kong&#x27;</span>, <span class="string">&#x27;de&#x27;</span>, <span class="string">&#x27;wen&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h3 id="扩展运算符"><a href="#扩展运算符" class="headerlink" title="扩展运算符"></a>扩展运算符</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sayHello</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>);  <span class="comment">// a,b,c</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> data = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"><span class="title function_">sayHello</span>(...data);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> data1 = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"><span class="keyword">let</span> data2 = [<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>];</span><br><span class="line"><span class="keyword">let</span> data = [...data1, ...data2]; <span class="comment">// [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 浅拷贝</span></span><br><span class="line"><span class="keyword">let</span> data1 = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"><span class="keyword">let</span> data = [...data1];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将伪数组转换为真数组</span></span><br><span class="line"><span class="keyword">let</span> divs = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> divArray = [...divs];</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h3><ul><li>确保对象属性使用唯一标识符，不会发生属性冲突</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="title class_">Symbol</span>();</span><br><span class="line"><span class="keyword">let</span> s2 = <span class="title class_">Symbol</span>(<span class="string">&quot;描述字符串&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> s3 = <span class="title class_">Symbol</span>(<span class="string">&quot;描述字符串&quot;</span>);</span><br><span class="line">s2 != s3</span><br><span class="line"><span class="comment">// 全局符号</span></span><br><span class="line"><span class="keyword">let</span> s4 = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&quot;124&quot;</span>)</span><br><span class="line"><span class="keyword">let</span> s5 = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&quot;124&quot;</span>) <span class="comment">// 查找注册表 存在就重用 s4</span></span><br><span class="line">s4 === s5 <span class="comment">// true s4 s5 指向地址相同</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 借助Symbol在对象扩展方法 在不知道源是否含有同名方法 属性</span></span><br><span class="line"><span class="keyword">let</span> game = &#123;</span><br><span class="line">    <span class="attr">up</span>: fucntion () &#123;&#125;,</span><br><span class="line">    <span class="attr">down</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> methods = &#123;</span><br><span class="line">    <span class="attr">up</span>: <span class="title class_">Symbol</span>(),</span><br><span class="line">    <span class="attr">down</span>: <span class="title class_">Symbol</span>()</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 为game对象定义重名属性</span></span><br><span class="line">game[methods.<span class="property">up</span>] = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;</span><br><span class="line">game[methods.<span class="property">down</span>] = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式2</span></span><br><span class="line"><span class="keyword">let</span> youxi = &#123;</span><br><span class="line">    [<span class="title class_">Symbol</span>(<span class="string">&#x27;say&#x27;</span>)]: <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;,</span><br><span class="line">    [<span class="title class_">Symbol</span>(<span class="string">&#x27;hi&#x27;</span>)]: <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> youxi = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"><span class="comment">// 返回指针对象 指向数据结构的起始位置</span></span><br><span class="line"><span class="keyword">let</span> iterator = youxi[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]();</span><br><span class="line">iterator.<span class="title function_">next</span>(); <span class="comment">// 返回数据第一个成员 &#123; value: &#x27;a&#x27;, done: false &#125;</span></span><br><span class="line">iterator.<span class="title function_">next</span>(); <span class="comment">// 第二个</span></span><br><span class="line">iterator.<span class="title function_">next</span>(); <span class="comment">// 第三个 &#123; value: undefined, done: true &#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自定义迭代器遍历数据</span></span><br><span class="line"><span class="keyword">const</span> banji = &#123;</span><br><span class="line">    <span class="attr">stus</span>: [ <span class="string">&#x27;xiaoming&#x27;</span>, <span class="string">&#x27;haitao&#x27;</span>, <span class="string">&#x27;de&#x27;</span>, <span class="string">&#x27;wem&#x27;</span> ],</span><br><span class="line">    [<span class="title class_">Symbol</span>.<span class="property">iterator</span>] () &#123;</span><br><span class="line">        <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> _this = <span class="variable language_">this</span>;</span><br><span class="line">        <span class="keyword">return</span> &#123;  <span class="comment">// 需要一个对象 对象含有next 方法</span></span><br><span class="line">            <span class="attr">next</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (index &lt; _this.<span class="property">stus</span>.<span class="property">length</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> &#123; <span class="attr">value</span>: _this.<span class="property">stus</span>[index++], <span class="attr">done</span>: <span class="literal">false</span> &#125;;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> &#123; <span class="attr">value</span>: <span class="literal">undefined</span>, <span class="attr">done</span>: <span class="literal">true</span> &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> v <span class="keyword">of</span> banji) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="生成器函数"><a href="#生成器函数" class="headerlink" title="生成器函数"></a>生成器函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">fucntion * <span class="title function_">gen</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;代码块一&quot;</span>);</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;value1&#x27;</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;代码块二&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> two = <span class="keyword">yield</span> <span class="string">&#x27;value2&#x27;</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;代码块三: &quot;</span> + two);</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;value3&#x27;</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;代码块四&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> iterator = <span class="title function_">gen</span>(); <span class="comment">// 返回 iterator 迭代器对象</span></span><br><span class="line">iterator.<span class="title function_">next</span>(); <span class="comment">// 执行代码块一，输出 代码块一</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>()); <span class="comment">// 执行代码块二， 这里输出 代码块二 &#123;value: value2, done: false&#125;</span></span><br><span class="line">iterator.<span class="title function_">next</span>(<span class="string">&#x27;上一个yield&#x27;</span>); <span class="comment">// 输出 代码块三: 上一个yield  这个参数将作为上一个yield也就是第二个yield的返回</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>()); <span class="comment">// &#123;value: undefined, done: true&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生成器函数实例 解决回调地狱</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">one</span>(<span class="params"></span>) &#123;  </span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> data1 = <span class="string">&quot;data1&quot;</span>;</span><br><span class="line">        iterator.<span class="title function_">next</span>(data1);</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">two</span>(<span class="params"></span>) &#123;  </span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> data2 = <span class="string">&quot;data2&quot;</span>;</span><br><span class="line">        iterator.<span class="title function_">next</span>(data2);</span><br><span class="line">    &#125;, <span class="number">2000</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">three</span>(<span class="params"></span>) &#123;  </span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> data3 = <span class="string">&quot;data3&quot;</span>;</span><br><span class="line">        iterator.<span class="title function_">next</span>(data3);</span><br><span class="line">    &#125;, <span class="number">3000</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">gen</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> data1 = <span class="keyword">yield</span> <span class="title function_">one</span>();  <span class="comment">// data1</span></span><br><span class="line">    <span class="keyword">let</span> data2 = <span class="keyword">yield</span> <span class="title function_">two</span>();  <span class="comment">// data2</span></span><br><span class="line">    <span class="keyword">let</span> data3 = <span class="keyword">yield</span> <span class="title function_">three</span>();  <span class="comment">// data3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> iterator = <span class="title function_">gen</span>();</span><br><span class="line">iterator.<span class="title function_">next</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实例化 Promise 对象</span></span><br><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>)&#123;</span><br><span class="line">    <span class="comment">// 这里执行耗时异步  通过 resolve reject 改变状态</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> data = <span class="string">&#x27;数据&#x27;</span>, err = <span class="string">&#x27;错误&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&#x27;成功&#x27;</span>) <span class="title function_">resolve</span>(data);</span><br><span class="line">        <span class="keyword">else</span> <span class="title function_">reject</span>(err);</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">promise.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data); <span class="comment">// 数据</span></span><br><span class="line">&#125;, <span class="keyword">function</span>(<span class="params">err</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err); <span class="comment">// 错误</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Promise-封装读取文件"><a href="#Promise-封装读取文件" class="headerlink" title="Promise 封装读取文件"></a>Promise 封装读取文件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>)&#123;</span><br><span class="line">    fs.<span class="title function_">readFile</span>(<span class="string">&quot;./file.txt&quot;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) <span class="title function_">reject</span>(err);</span><br><span class="line">        <span class="title function_">resolve</span>(data);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">p.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">value</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;, <span class="keyword">function</span>(<span class="params">reason</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reason);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Promise-封装Ajax"><a href="#Promise-封装Ajax" class="headerlink" title="Promise 封装Ajax"></a>Promise 封装Ajax</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">    xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;https://api.apiopen.top/getJoke&#x27;</span>); </span><br><span class="line">    xhr.<span class="title function_">send</span>();</span><br><span class="line">    xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (xhr.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; xhr.<span class="property">status</span> &lt; <span class="number">300</span>) &#123;</span><br><span class="line">                <span class="title function_">resolve</span>(xhr.<span class="property">response</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="title function_">reject</span>(xhr.<span class="property">status</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">promise.<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value); <span class="comment">// response数据</span></span><br><span class="line">&#125;, <span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;error reason: &quot;</span> + reason);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Promise-prototype-then-链式调用"><a href="#Promise-prototype-then-链式调用" class="headerlink" title="Promise.prototype.then 链式调用"></a>Promise.prototype.then 链式调用</h4><ul><li><p>then() 返回一个 Promise 对象</p></li><li><p>对象的状态由回调函数执行结果决定</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> = result = p.<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 1. 返回非 promise 对象 字符串 则 then()返回的promise对象状态为成功，值为该文本</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;hello文本一个&#x27;</span>;</span><br><span class="line">    <span class="comment">// 2. 抛出错误 则 then()返回的promise对象状态为失败，值为该错误</span></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;出错了&#x27;</span>);</span><br><span class="line">    <span class="keyword">throw</span> <span class="string">&#x27;出错了&#x27;</span>;</span><br><span class="line">    <span class="comment">// 3. 返回 promise 对象， then()返回的promise对象状态根据返回的promise对象状态</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="string">&#x27;成功&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;, <span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 该方法可以省略</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">result.<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value); <span class="comment">// hello文本一个</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>多次Ajax请求</p></li><li><p>解决回调地狱</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义 ajax 请求：传入回调函数 success 和 fail</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ajax</span>(<span class="params">url, success, fail</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> xmlhttp = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">    xmlhttp.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, url);</span><br><span class="line">    xmlhttp.<span class="title function_">send</span>();</span><br><span class="line">    xmlhttp.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (xmlhttp.<span class="property">readyState</span> === <span class="number">4</span> &amp;&amp; xmlhttp.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">            success &amp;&amp; <span class="title function_">success</span>(xmlhttp.<span class="property">responseText</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            fail &amp;&amp; <span class="title function_">fail</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;接口请求失败&#x27;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 封装获取 promise 对象方法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getPromise</span>(<span class="params">url</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 调用请求</span></span><br><span class="line">        <span class="title function_">ajax</span>(url, <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (res.<span class="property">retCode</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="title function_">resolve</span>(<span class="string">&#x27;request success&#x27;</span> + res);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="title function_">reject</span>(&#123; <span class="attr">retCode</span>: -<span class="number">1</span>, <span class="attr">msg</span>: <span class="string">&#x27;network error&#x27;</span> &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getPromise</span>(<span class="string">&#x27;a.json&#x27;</span>).<span class="title function_">then</span>( <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value, <span class="string">&#x27;接着下次请求&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">getPromise</span>(<span class="string">&#x27;b.json&#x27;</span>); <span class="comment">// 返回有状态值的 promise 对象</span></span><br><span class="line">&#125;).<span class="title function_">then</span>( <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value, <span class="string">&#x27;接着下次请求&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">getPromise</span>(<span class="string">&#x27;c.json&#x27;</span>);</span><br><span class="line">&#125;).<span class="title function_">then</span>( <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;).<span class="title function_">catch</span>( <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err, <span class="string">&#x27;捕获错误&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Set-集合"><a href="#Set-集合" class="headerlink" title="Set 集合"></a>Set 集合</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line"><span class="keyword">let</span> s1 = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">s1.<span class="title function_">size</span>(); <span class="comment">// 返回集合大小</span></span><br><span class="line">s1.<span class="title function_">add</span>(<span class="string">&#x27;4&#x27;</span>); <span class="comment">// 添加元素</span></span><br><span class="line">s1.<span class="title function_">delete</span>(<span class="string">&#x27;3&#x27;</span>); <span class="comment">// 删除元素</span></span><br><span class="line">s1.<span class="title function_">has</span>(<span class="string">&#x27;1&#x27;</span>); <span class="comment">// 判断元素是否存在</span></span><br><span class="line">s1.<span class="title function_">clear</span>(); <span class="comment">// 清除集合</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> v <span class="keyword">of</span> s1)&#123; <span class="comment">// 遍历集合</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组去重</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> arr1 = [...<span class="keyword">new</span> <span class="title class_">Set</span>(arr)];</span><br><span class="line"><span class="comment">// 数组交集</span></span><br><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">4</span>];</span><br><span class="line"><span class="keyword">let</span> result = [...<span class="keyword">new</span> <span class="title class_">Set</span>(arr1)].<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> <span class="keyword">new</span> <span class="title class_">Set</span>(arr2).<span class="title function_">has</span>(item));</span><br><span class="line"><span class="comment">// 并集</span></span><br><span class="line"><span class="keyword">let</span> union = [...<span class="keyword">new</span> <span class="title class_">Set</span>([...arr1, ...arr2])];</span><br><span class="line"><span class="comment">// 差集</span></span><br><span class="line"><span class="keyword">let</span> diff = [...<span class="keyword">new</span> <span class="title class_">Set</span>(arr1)].<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> !(<span class="keyword">new</span> <span class="title class_">Set</span>(arr2).<span class="title function_">has</span>(item)));</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><ul><li>键值对，键不限于字符串，可以任意类型</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> m = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">m.<span class="title function_">set</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;kong&#x27;</span>);</span><br><span class="line">m.<span class="title function_">set</span>(<span class="string">&#x27;func&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">let</span> key = &#123;</span><br><span class="line">    <span class="attr">school</span>: <span class="string">&#x27;GT&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line">m.<span class="title function_">set</span>(key, [<span class="string">&#x27;上海&#x27;</span>,<span class="string">&#x27;广州&#x27;</span>,<span class="string">&#x27;深圳&#x27;</span>]);</span><br><span class="line">m.<span class="title function_">size</span>();</span><br><span class="line">m.<span class="title function_">delete</span>(<span class="string">&#x27;name&#x27;</span>);</span><br><span class="line">m.<span class="title function_">get</span>(key);</span><br><span class="line">m.<span class="title function_">clear</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> v <span class="keyword">of</span> m) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(v); <span class="comment">// [key,value]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="class"><a href="#class" class="headerlink" title="class"></a>class</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Phone</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">brand, price</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">brand</span> = brand;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">price</span> = price;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">call</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;calling&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> phone = <span class="keyword">new</span> <span class="title class_">Phone</span>(<span class="string">&#x27;华为&#x27;</span>, <span class="number">4000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 静态成员</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Phone</span>&#123;</span><br><span class="line">    <span class="keyword">static</span> name = <span class="string">&#x27;手机&#x27;</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">change</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我们属于类不属于实例&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Phone</span>.<span class="property">name</span>;</span><br><span class="line"><span class="title class_">Phone</span>.<span class="title function_">change</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 继承</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SmartPhone</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Phone</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">brand, price, color, size</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(brand, price); <span class="comment">// Phone.call(this,brand,price)</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">color</span> = color;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">size</span> = size;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 重写</span></span><br><span class="line">    <span class="title function_">call</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我重写了父类方法call&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">photo</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;take photo&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// getter和 setter</span></span><br><span class="line"><span class="comment">// 适用于属性是动态计算出来的，设置是有要求的</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Phone</span>&#123;</span><br><span class="line">    <span class="keyword">get</span> <span class="title function_">price</span>()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;我是动态改变的&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">set</span> <span class="title function_">price</span>(<span class="params">newVal</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;赋值语句触发我&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Phone</span>();</span><br><span class="line">p.<span class="property">price</span> = <span class="string">&#x27;newVal&#x27;</span>; <span class="comment">// 打印 我是动态改变的</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Number-的扩展"><a href="#Number-的扩展" class="headerlink" title="Number 的扩展"></a>Number 的扩展</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Number.EPSILON</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">equal</span>(<span class="params">a,b</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">Math</span>.<span class="title function_">abs</span>(a-b) &lt; <span class="title class_">Number</span>.<span class="property">EPSILON</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">equal</span>(<span class="number">0.1</span>+<span class="number">0.2</span>, <span class="number">0.3</span>)); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 进制</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">0b101010</span>;</span><br><span class="line"><span class="keyword">let</span> o = <span class="number">0o777</span>;</span><br><span class="line"><span class="keyword">let</span> d = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">let</span> x = <span class="number">0xff</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Number</span>.<span class="built_in">isFinite</span>(<span class="title class_">Infinity</span>); <span class="comment">// 是否无限</span></span><br><span class="line"><span class="title class_">Number</span>.<span class="built_in">isNaN</span>(<span class="title class_">NaN</span>); <span class="comment">// 是否是数字</span></span><br><span class="line"><span class="title class_">Number</span>.<span class="built_in">parseInt</span>(<span class="string">&#x27;123&#x27;</span>);</span><br><span class="line"><span class="title class_">Number</span>.<span class="built_in">parseFloat</span>(<span class="string">&#x27;123.23asds&#x27;</span>);</span><br><span class="line"><span class="title class_">Number</span>.<span class="title function_">isInteger</span>(<span class="number">2.5</span>);</span><br><span class="line"><span class="title class_">Number</span>.<span class="title function_">trunc</span>(<span class="number">2.5</span>); <span class="comment">// 抹除小数</span></span><br><span class="line"><span class="title class_">Number</span>.<span class="title function_">sign</span>(<span class="number">100</span>); <span class="comment">// 正数 0 负数 分别返回 1 0 -1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Object对象方法扩展"><a href="#Object对象方法扩展" class="headerlink" title="Object对象方法扩展"></a>Object对象方法扩展</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 类似 ===</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">is</span>(<span class="number">111</span>, <span class="number">111</span>); <span class="comment">// true</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">is</span>(<span class="title class_">NaN</span>, <span class="title class_">NaN</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象合并 会覆盖同名属性</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(obj1, obj2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置、获取原型</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">setPrototypeOf</span>(obj1, obj2);</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(obj1); </span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h3><ul><li>防止命名冲突</li><li>代码复用</li><li>高维护性</li></ul><h4 id="模块暴露"><a href="#模块暴露" class="headerlink" title="模块暴露"></a>模块暴露</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// module1.js 暴露</span></span><br><span class="line"><span class="comment">// 1.分别暴露</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> name = <span class="string">&#x27;kong&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">sayName</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 统一暴露</span></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">    name,</span><br><span class="line">    sayName</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 默认暴露</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;kong&#x27;</span>,</span><br><span class="line">    <span class="attr">sayName</span>: <span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="模块引入"><a href="#模块引入" class="headerlink" title="模块引入"></a>模块引入</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&#x27;module&#x27;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. 通用引入方式</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> * <span class="keyword">as</span> module1 <span class="keyword">from</span> <span class="string">&#x27;./module1.js&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 默认暴露 调用</span></span></span><br><span class="line"><span class="language-javascript">    module1.<span class="property">default</span>.<span class="title function_">sayName</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2. 解构赋值方式 针对： 分别暴露</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123;name, sayName&#125; <span class="keyword">from</span> <span class="string">&#x27;./module1.js&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123;name <span class="keyword">as</span> nickName, sayName&#125; <span class="keyword">from</span> <span class="string">&#x27;./module1.js&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 对应默认暴露</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123;<span class="keyword">default</span> <span class="keyword">as</span> module1&#125; <span class="keyword">from</span> <span class="string">&#x27;./module1/js&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 3. 简便引入  针对 默认暴露</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> module1 <span class="keyword">from</span> <span class="string">&#x27;./module1.js&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="babel-模块化代码转换"><a href="#babel-模块化代码转换" class="headerlink" title="babel 模块化代码转换"></a>babel 模块化代码转换</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br><span class="line">npm i babel-cli babel-preset-env browserify -D  </span><br><span class="line">npx babel src/js -d dist/js --presets=babel-preset-env  <span class="comment">// 转换</span></span><br><span class="line">npx browserify dist/js/app.<span class="property">js</span> -o dist/bundle.<span class="property">js</span>  <span class="comment">// 打包</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="ES7特性"><a href="#ES7特性" class="headerlink" title="ES7特性"></a>ES7特性</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line">arr.<span class="title function_">includes</span>(<span class="number">2</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span> ** <span class="number">10</span>); <span class="comment">// Math.pow(2, 10);</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="ES8特性"><a href="#ES8特性" class="headerlink" title="ES8特性"></a>ES8特性</h2><h3 id="async-x2F-await"><a href="#async-x2F-await" class="headerlink" title="async&#x2F;await"></a>async&#x2F;await</h3><ul><li>async 函数返回值为 Promise对象</li><li>promise对象的结果由 async 函数执行返回值决定</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// async</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">func</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//返回非promsie对象 返回的 promise 对象状态值为 resolve(&#x27;成功&#x27;)</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;成功&#x27;</span>;</span><br><span class="line">    <span class="comment">// 返回 reject</span></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;错误&#x27;</span>);</span><br><span class="line">    <span class="comment">// 返回 promise 对象 </span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="string">&#x27;yes&#x27;</span>);</span><br><span class="line">        <span class="title function_">reject</span>(<span class="string">&#x27;no&#x27;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> result = <span class="title function_">func</span>();</span><br><span class="line">result.<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value)</span><br><span class="line">&#125;, <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">warn</span>(reason)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// await 须存在于async</span></span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;数据&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">let</span> p2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(<span class="string">&#x27;错误&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">say</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="keyword">await</span> p; <span class="comment">// 返回 promise 对象的成功状态下的值</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// 输出 数据</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// promise 失败状态下的值需要 try catch 捕获</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> res = <span class="keyword">await</span> p2;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(err); <span class="comment">// 输出 错误</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="async-x2F-await-封装-ajax"><a href="#async-x2F-await-封装-ajax" class="headerlink" title="async&#x2F;await 封装 ajax"></a>async&#x2F;await 封装 ajax</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sendAjax</span>(<span class="params">url</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">        xhr.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>, url);</span><br><span class="line">        xhr.<span class="title function_">send</span>();</span><br><span class="line">        xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (xhr.<span class="property">status</span> &gt;=<span class="number">200</span> &amp;&amp; xhr.<span class="property">status</span> &lt; <span class="number">300</span>) &#123;</span><br><span class="line">                    <span class="title function_">resolve</span>(xhr.<span class="property">response</span>)</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="title function_">reject</span>(xhr.<span class="property">status</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">mainfunc</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 等待result1</span></span><br><span class="line">    <span class="keyword">let</span> result1 = <span class="keyword">await</span> <span class="title function_">sendAjax</span>(<span class="string">&#x27;https://api.apiopen.top/getJoke1&#x27;</span>);</span><br><span class="line">    <span class="comment">// 等待result2</span></span><br><span class="line">    <span class="keyword">let</span> result2 = <span class="keyword">await</span> <span class="title function_">sendAjax</span>(<span class="string">&#x27;https://api.apiopen.top/getJoke2&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Object对象方法扩展-1"><a href="#Object对象方法扩展-1" class="headerlink" title="Object对象方法扩展"></a>Object对象方法扩展</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> school = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;kong&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">12</span>,</span><br><span class="line">    <span class="attr">addrss</span>: <span class="string">&#x27;dagang&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取所有的键</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">keys</span>(school);</span><br><span class="line"><span class="comment">// 获取所有的值</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">values</span>(school);</span><br><span class="line"><span class="comment">// 返回键值对数组</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">entries</span>(school);</span><br><span class="line"><span class="comment">// 对象属性的描述对象</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptors</span>(school);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="ES9特性"><a href="#ES9特性" class="headerlink" title="ES9特性"></a>ES9特性</h2><h3 id="对象中-rest参数和扩展运算符"><a href="#对象中-rest参数和扩展运算符" class="headerlink" title="对象中 rest参数和扩展运算符"></a>对象中 rest参数和扩展运算符</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">connect</span>(<span class="params">&#123;host, post, ...user&#125;</span>) &#123;  </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(user.<span class="property">name</span> + user.<span class="property">age</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">connect</span>(&#123;</span><br><span class="line">    <span class="attr">host</span>: <span class="string">&#x27;localhost&#x27;</span>, </span><br><span class="line">    <span class="attr">post</span>: <span class="number">8000</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;kong&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">12</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象合并</span></span><br><span class="line"><span class="keyword">let</span> obj1 = &#123; <span class="attr">name</span>: <span class="string">&#x27;kong&#x27;</span> &#125;</span><br><span class="line"><span class="keyword">let</span> obj2 = &#123; <span class="attr">age</span>: <span class="number">12</span> &#125;</span><br><span class="line"><span class="keyword">let</span> union = &#123;...obj1, ...obj2&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="正则扩展"><a href="#正则扩展" class="headerlink" title="正则扩展"></a>正则扩展</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 命名捕获分组</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;&lt;a href=&quot;http://www.baidu.com&quot;&gt;百度&lt;/a&gt;&#x27;</span>;</span><br><span class="line"><span class="comment">// 提取 url 和 文本</span></span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/&lt;a href=&quot;(.*)&quot;&gt;(.*)&lt;\/a&gt;/</span>;</span><br><span class="line"><span class="keyword">let</span> res = reg.<span class="title function_">exec</span>(str);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;url: &quot;</span> + res[<span class="number">1</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;text: &quot;</span> + res[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可定义别名</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;&lt;a href=&quot;http://www.baidu.com&quot;&gt;百度&lt;/a&gt;&#x27;</span>;</span><br><span class="line"><span class="comment">// 提取 url 和 文本</span></span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/&lt;a href=&quot;(?&lt;url&gt;.*)&quot;&gt;(?&lt;text&gt;.*)&lt;\/a&gt;/</span>;</span><br><span class="line"><span class="keyword">let</span> res = reg.<span class="title function_">exec</span>(str);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;url: &quot;</span> + res.<span class="property">groups</span>.<span class="property">url</span>); <span class="comment">// 利用别名提取</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;text: &quot;</span> + res.<span class="property">groups</span>.<span class="property">text</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 正向断言</span></span><br><span class="line"><span class="comment">// 根据后面内容去匹配判断</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;JS54321你好999拉拉&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/\d+(?=拉)/</span>;</span><br><span class="line"><span class="keyword">let</span> res = reg.<span class="title function_">exec</span>(str);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res); <span class="comment">// 获取 999</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 反向断言</span></span><br><span class="line"><span class="keyword">const</span> reg = <span class="regexp">/(?&lt;=好)\d+/</span>;</span><br><span class="line"><span class="keyword">const</span> res =reg.<span class="title function_">exec</span>(str);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res); <span class="comment">// 获取 999</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// dotAll dot . 除换行的任意字符</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">`&lt;ul&gt;</span></span><br><span class="line"><span class="string">                &lt;li&gt;   </span></span><br><span class="line"><span class="string">                    &lt;a&gt;电影&lt;/a&gt;</span></span><br><span class="line"><span class="string">                    &lt;p&gt;上映时间&lt;/p&gt;</span></span><br><span class="line"><span class="string">                &lt;/li&gt;</span></span><br><span class="line"><span class="string">                &lt;li&gt;   </span></span><br><span class="line"><span class="string">                    &lt;a&gt;电影&lt;/a&gt;</span></span><br><span class="line"><span class="string">                    &lt;p&gt;上映时间&lt;/p&gt;</span></span><br><span class="line"><span class="string">                &lt;/li&gt;</span></span><br><span class="line"><span class="string">            &lt;/ul&gt;`</span></span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/&lt;li&gt;.*?&lt;a&gt;(.*?)&lt;\/a&gt;.*?&lt;p&gt;(.*?)&lt;\/p&gt;/g</span>s;</span><br><span class="line"><span class="keyword">let</span> result;</span><br><span class="line"><span class="keyword">let</span> data = [];</span><br><span class="line"><span class="keyword">while</span>(result = reg.<span class="title function_">exec</span>(str)) &#123;</span><br><span class="line">    data.<span class="title function_">push</span>(&#123;<span class="attr">title</span>: result[<span class="number">1</span>], <span class="attr">time</span>: result[<span class="number">2</span>]&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br></pre></td></tr></table></figure><h2 id="ES10特性"><a href="#ES10特性" class="headerlink" title="ES10特性"></a>ES10特性</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 二维数组转对象 与 Objec.entries()相反</span></span><br><span class="line"><span class="keyword">const</span> result = <span class="title class_">Object</span>.<span class="title function_">fromEntries</span>([</span><br><span class="line">    [<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;kong&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;xuexi&#x27;</span>, <span class="string">&#x27;jiayou&#x27;</span>]</span><br><span class="line">])</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// &#123;name: &#x27;kong&#x27;, xuexi: &#x27;jiayou&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// trim/trimStart/trimEnd 清除空白</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;  ilove  you  &#x27;</span>;</span><br><span class="line">str.<span class="title function_">trim</span>(); <span class="comment">// &#x27;iloveyou&#x27;</span></span><br><span class="line">str.<span class="title function_">trimStart</span>(); <span class="comment">// &#x27;ilove  you  &#x27;</span></span><br><span class="line">str.<span class="title function_">trimEnd</span>(); <span class="comment">// &#x27;  ilove  you&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将多维数组转低维数组</span></span><br><span class="line">arr.<span class="title function_">flat</span>(<span class="number">2</span>); <span class="comment">// 3 维 转 1 维</span></span><br><span class="line">arr.<span class="title function_">flatMap</span>(<span class="function"><span class="params">item</span> =&gt;</span> [item * <span class="number">10</span>]); <span class="comment">//Map后 顺便将二维转一维</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Symbol.prototype.description</span></span><br><span class="line"><span class="title class_">Symbol</span>(<span class="string">&#x27;kong&#x27;</span>).<span class="property">description</span>; <span class="comment">// kong</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="ES11特性"><a href="#ES11特性" class="headerlink" title="ES11特性"></a>ES11特性</h2><ul><li><p>私有属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    name; <span class="comment">// 公有</span></span><br><span class="line">    #age; <span class="comment">// 私有属性</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">        <span class="variable language_">this</span>.#age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">myAge</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.#age); <span class="comment">// 内部可以访问</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;kong&#x27;</span>, <span class="number">12</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">age</span>); <span class="comment">// 报错</span></span><br><span class="line">p.<span class="title function_">myAge</span>(); <span class="comment">// 12</span></span><br></pre></td></tr></table></figure></li><li><p>Promise.allSettled()&#x2F;Promise.all()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回成功值 和 一个对象数组 适用获取各个 promsie的状态</span></span><br><span class="line"><span class="keyword">const</span> result = <span class="title class_">Promise</span>.<span class="title function_">allSettled</span>([promise1, promise2]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 两个 promise 都成功才成功 适用各个 promse 都成功才下步执行操作</span></span><br><span class="line"><span class="keyword">const</span> res = <span class="title class_">Promise</span>.<span class="title function_">all</span>([promise1, promise2]);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>String.prototype.matchAll()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">`&lt;ul&gt;</span></span><br><span class="line"><span class="string">                &lt;li&gt;   </span></span><br><span class="line"><span class="string">                    &lt;a&gt;电影&lt;/a&gt;</span></span><br><span class="line"><span class="string">                    &lt;p&gt;上映时间&lt;/p&gt;</span></span><br><span class="line"><span class="string">                &lt;/li&gt;</span></span><br><span class="line"><span class="string">                &lt;li&gt;   </span></span><br><span class="line"><span class="string">                    &lt;a&gt;电影&lt;/a&gt;</span></span><br><span class="line"><span class="string">                    &lt;p&gt;上映时间&lt;/p&gt;</span></span><br><span class="line"><span class="string">                &lt;/li&gt;</span></span><br><span class="line"><span class="string">            &lt;/ul&gt;`</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> reg = <span class="regexp">/&lt;li&gt;.*?&lt;a&gt;(.*?)&lt;\/a&gt;.*?&lt;p&gt;(.*?)&lt;\/p&gt;/</span>sg;</span><br><span class="line"><span class="comment">// 返回可迭代对象</span></span><br><span class="line"><span class="keyword">const</span> result = str.<span class="title function_">matchAll</span>(reg);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> v <span class="keyword">of</span> result) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> arr = [...result];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>可选链操作符(?.)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params">config</span>)&#123;</span><br><span class="line">    <span class="comment">// const dbHost = config &amp;&amp; config.db &amp;&amp; config.db.host;</span></span><br><span class="line">    <span class="keyword">const</span> dbHost = config?.<span class="property">db</span>?.<span class="property">host</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(dbHost);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">main</span>(&#123;</span><br><span class="line">    <span class="attr">db</span>: &#123;</span><br><span class="line">        <span class="attr">host</span>: <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">        <span class="attr">username</span>: <span class="string">&#x27;root&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>动态import</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hello.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">hello</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;say hello&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main.js</span></span><br><span class="line">btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 返回 promise 对象</span></span><br><span class="line">    <span class="title function_">import</span>(<span class="string">&#x27;./hello.js&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">module</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">module</span>.<span class="title function_">hello</span>(); <span class="comment">// say hello</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>BigInt</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 大整形</span></span><br><span class="line"><span class="keyword">let</span> n = <span class="number">1234n</span>;</span><br><span class="line"><span class="title class_">BigInt</span>(<span class="number">123</span>); <span class="comment">// 123n</span></span><br><span class="line"><span class="comment">// 大整数运算</span></span><br><span class="line"><span class="keyword">let</span> max = <span class="title class_">Number</span>.<span class="property">MAX_SAFE_INTEGER</span>;</span><br><span class="line"><span class="title class_">BigInt</span>(max) + <span class="title class_">BigInt</span>(<span class="number">10</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><code>globalThis</code> 忽视环境始终指向全局对象</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> es6 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nodejs基础</title>
      <link href="/posts/2HE32QR.html"/>
      <url>/posts/2HE32QR.html</url>
      
        <content type="html"><![CDATA[<h1 id="Nodejs基础"><a href="#Nodejs基础" class="headerlink" title="Nodejs基础"></a>Nodejs基础</h1><h2 id="Buffer-缓冲区"><a href="#Buffer-缓冲区" class="headerlink" title="Buffer 缓冲区"></a>Buffer 缓冲区</h2><ul><li>Buffer 是专门存储二进数制数据，显示时以 16 进制的形式显示的据结构</li><li>每一个元素占用一个字节内存</li><li>Buffer 是对底层内存的直接操作，因此大小一旦确定就不能修改</li></ul><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> buf = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(<span class="string">&quot;hello&quot;</span>); <span class="comment">// buf.toString() 转换回来</span></span><br><span class="line"><span class="keyword">let</span> buf1 = <span class="title class_">Buffer</span>.<span class="title function_">alloc</span>(<span class="number">10</span>); <span class="comment">// 创建10字节大小</span></span><br><span class="line"><span class="keyword">let</span> buf2 = <span class="title class_">Buffer</span>.<span class="title function_">allocUnsafe</span>(<span class="number">10</span>); <span class="comment">// 10字节数据，并取出内存未清除敏感的数据</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="fs-文件系统模块"><a href="#fs-文件系统模块" class="headerlink" title="fs 文件系统模块"></a>fs 文件系统模块</h2><ul><li><p>同步文件系统会阻塞程序的执行</p></li><li><p>异步文件系统不会阻塞程序的执行，通过回调函数返回结果</p></li></ul><p><strong>操作模式：</strong></p><table><thead><tr><th>模式</th><th>说明</th></tr></thead><tbody><tr><td>r</td><td>读取文件，文件不存在抛异常</td></tr><tr><td>r+</td><td>读写文件，文件不存在抛异常</td></tr><tr><td>rs</td><td>同步模式下打开文件用于读取</td></tr><tr><td>rs+</td><td>同步模式下打开文件用于读写</td></tr><tr><td>w</td><td>写文件，不存在则创建，存在则覆盖原有内容</td></tr><tr><td>wx</td><td>写文件，文件存在打开失败</td></tr><tr><td>w+</td><td>读写文件，不存在创建，存在截断</td></tr><tr><td>wx+</td><td>读写，存在打开失败</td></tr><tr><td>a</td><td>追加，不存在创建</td></tr><tr><td>ax</td><td>追加，存在失败</td></tr><tr><td>a+</td><td>追加和读取，不存在创建</td></tr><tr><td>ax+</td><td>追加和读取，存在失败</td></tr></tbody></table><h3 id="简单文件读取"><a href="#简单文件读取" class="headerlink" title="简单文件读取"></a>简单文件读取</h3><ul><li><code>fs.readFile(path, options, callback)</code> 异步<ul><li><code>encoding</code>：编码格式</li><li><code>flag</code>：打开方式</li></ul></li><li><code>fs.readFileSync(path, options, callback)</code> 同步</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>)</span><br><span class="line"><span class="comment">// 返回二进制数据</span></span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&quot;hello.txt&quot;</span>, <span class="keyword">function</span> (<span class="params">err, data</span>) &#123;  </span><br><span class="line">    <span class="comment">// data 读取到的是buffer数据</span></span><br><span class="line">    <span class="keyword">if</span> (!err) <span class="variable language_">console</span>.<span class="title function_">log</span>(data.<span class="title function_">toString</span>())</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 复制文件内容</span></span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&quot;hello.mp3&quot;</span>, <span class="keyword">function</span>(<span class="params">err, data</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(!err) &#123;</span><br><span class="line"><span class="comment">// 将data写入到文件中</span></span><br><span class="line">fs.<span class="title function_">writeFile</span>(<span class="string">&quot;hello.jpg&quot;</span>, data, <span class="keyword">function</span>(<span class="params">err</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(!err)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;文件写入成功&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125; );</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="流式文件读取"><a href="#流式文件读取" class="headerlink" title="流式文件读取"></a>流式文件读取</h3><ul><li>简单文件读取的方式会一次性读取文件内容到内存中，若文件较大，会占用过多内存影响系统性能，且读取速度慢</li><li>大文件适合用流式文件读取，它会分多次将文件读取到内存中</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建可读流</span></span><br><span class="line"><span class="keyword">let</span> rs = fs.<span class="title function_">createReadStream</span>(<span class="string">&quot;an.jpg&quot;</span>);</span><br><span class="line"><span class="comment">// 创建可写流</span></span><br><span class="line"><span class="keyword">let</span> ws = fs.<span class="title function_">createWriteStream</span>(<span class="string">&quot;copy.jpg&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 必须通过绑定data事件来读取可读流中的数据</span></span><br><span class="line">rs.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">  <span class="comment">//将读取到的数据写入到可写流中</span></span><br><span class="line">  ws.<span class="title function_">write</span>(data)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可用pipe() 替换上面方法</span></span><br><span class="line"><span class="comment">// pipe() 可以将可读流中的内容，直接输出到可写流中</span></span><br><span class="line">rs.<span class="title function_">pipe</span>(ws);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="同步文件写入"><a href="#同步文件写入" class="headerlink" title="同步文件写入"></a>同步文件写入</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="comment">// 同步打开文件, r只读 , w可写</span></span><br><span class="line"><span class="keyword">let</span> fd = fs.<span class="title function_">openSync</span>(<span class="string">&quot;hello.txt&quot;</span>, <span class="string">&quot;w&quot;</span>); </span><br><span class="line"><span class="comment">// 同步写内容，起始10字节位置</span></span><br><span class="line">fs.<span class="title function_">writeSync</span>(fd, <span class="string">&quot;hello&quot;</span>, <span class="number">10</span>);</span><br><span class="line"><span class="comment">// 关闭文件</span></span><br><span class="line">fs.<span class="title function_">closeSync</span>(fd);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="异步文件写入"><a href="#异步文件写入" class="headerlink" title="异步文件写入"></a>异步文件写入</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="comment">// 异步打开文件, r只读 , w可写， （err，fd文件描述符）</span></span><br><span class="line">fs.<span class="title function_">open</span>(<span class="string">&quot;hello.txt&quot;</span>, <span class="string">&quot;w&quot;</span>, <span class="keyword">function</span> (<span class="params">err, fd</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!err) &#123;</span><br><span class="line">        <span class="comment">// 异步写内容，起始10字节位置</span></span><br><span class="line">        fs.<span class="title function_">write</span>(fd, <span class="string">&quot;hello&quot;</span>, <span class="number">10</span>, <span class="keyword">function</span> (<span class="params">err</span>) &#123;  </span><br><span class="line">            <span class="keyword">if</span> (!err) <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;写入成功&quot;</span>);</span><br><span class="line">            <span class="comment">// 异步文件</span></span><br><span class="line">            fs.<span class="title function_">close</span>(fd, <span class="keyword">function</span>(<span class="params">err</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!err) <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;关闭成功&quot;</span>)</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;); </span><br></pre></td></tr></table></figure><h3 id="简单文件异步写入"><a href="#简单文件异步写入" class="headerlink" title="简单文件异步写入"></a>简单文件异步写入</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fs.wirteFile简单文件写入</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="comment">// 异步写内容 a 追加</span></span><br><span class="line">fs.<span class="title function_">wirteFile</span>(<span class="string">&quot;hello.txt&quot;</span>, <span class="string">&quot;写入内容&quot;</span>, &#123;<span class="attr">flag</span>: <span class="string">&#x27;a&#x27;</span>&#125;, <span class="keyword">function</span> (<span class="params">err</span>) &#123;  </span><br><span class="line">    <span class="keyword">if</span> (!err) <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;写入成功&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="流式文件写入"><a href="#流式文件写入" class="headerlink" title="流式文件写入"></a>流式文件写入</h3><ul><li>大文件异步操作</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="comment">// 创建可写流</span></span><br><span class="line"><span class="keyword">let</span> ws = fs.<span class="title function_">createWriteStream</span>(<span class="string">&quot;hello.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听流的open和close事件来监听流的关闭打开 once监听一次</span></span><br><span class="line">ws.<span class="title function_">once</span>(<span class="string">&quot;open&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;  </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;打开了&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">ws.<span class="title function_">once</span>(<span class="string">&quot;close&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;  </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;关闭了&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过ws像文件种输出内容</span></span><br><span class="line">ws.<span class="title function_">write</span>(<span class="string">&quot;hello name&quot;</span>);</span><br><span class="line"><span class="comment">// 没关闭流一直可写</span></span><br><span class="line">ws.<span class="title function_">write</span>(<span class="string">&quot;通过可写流向文件写入内容&quot;</span>)</span><br><span class="line">ws.<span class="title function_">write</span>(<span class="string">&quot;通过可写流向文件写入内容&quot;</span>)</span><br><span class="line"><span class="comment">// 关闭可写流</span></span><br><span class="line">ws.<span class="title function_">end</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="其它操作"><a href="#其它操作" class="headerlink" title="其它操作"></a>其它操作</h3><p>验证路径是否存在：</p><ul><li><code>fs.exists(path, callback)</code></li><li><code>fs.existsSync(path)</code></li></ul><p>获取文件信息：</p><ul><li><code>fs.stat(path, callback)</code></li><li><code>fs.stat(path)</code></li></ul><p>删除文件：</p><ul><li><code>fs.unlink(path, callback)</code></li><li><code>fs.unlinkSync(path)</code></li></ul><p>列出文件：</p><ul><li><code>fs.readdir(path[,options], callback)</code></li><li><code>fs.readdirSync(path[, options])</code></li></ul><p>截断文件：</p><ul><li><code>fs.truncate(path, len, callback)</code></li><li><code>fs.truncateSync(path, len)</code></li></ul><p>建立目录：</p><ul><li><code>fs.mkdir(path[, mode], callback)</code></li><li><code>fs.mkdirSync(path[, mode])</code></li></ul><p>删除目录：</p><ul><li><code>fs.rmdir(path, callback)</code></li><li><code>fs.rmdirSync(path)</code></li></ul><p>重命名文件和目录：</p><ul><li><code>fs.rename(oldPath, newPath, callback)</code></li><li><code>fs.renameSync(oldPath, newPath)</code></li></ul><p>监视文件更改：</p><ul><li><code>fs.watchFile(filename[, options], listener)</code></li></ul><h2 id="path-路径模块"><a href="#path-路径模块" class="headerlink" title="path 路径模块"></a>path 路径模块</h2><ul><li><p>path 模块是 Node.js 官方提供的、用来处理路径的模块。</p></li><li><p>它提供了一系列的方法和属性，用来满足用户对路径的处理需求。</p></li></ul><h3 id="路径拼接-path-join"><a href="#路径拼接-path-join" class="headerlink" title="路径拼接 path.join()"></a>路径拼接 <code>path.join()</code></h3><ul><li><p><code>../</code> 回退路径一级</p></li><li><p><code>./</code> 会被忽略</p></li><li><p><code>__dirname</code> 返回当前路径的绝对路径</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pathStr = path.<span class="title function_">join</span>(<span class="string">&#x27;/a&#x27;</span>, <span class="string">&#x27;/b/c&#x27;</span>, <span class="string">&#x27;../../&#x27;</span>, <span class="string">&#x27;./d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pathStr) <span class="comment">// \a\d\e</span></span><br><span class="line"></span><br><span class="line">fs.<span class="title function_">readFile</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;./files/1.txt&#x27;</span>), <span class="string">&#x27;utf8&#x27;</span>, <span class="keyword">function</span> (<span class="params">err, dataStr</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">message</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(dataStr)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="获取路径中的文件名-path-basename-path-ext"><a href="#获取路径中的文件名-path-basename-path-ext" class="headerlink" title="获取路径中的文件名 path.basename(path[, ext])"></a>获取路径中的文件名 <code>path.basename(path[, ext])</code></h3><ul><li>path: 文件路径</li><li>ext: 文件扩展名</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义文件的存放路径</span></span><br><span class="line"><span class="keyword">const</span> fpath = <span class="string">&#x27;/a/b/c/index.html&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fullName = path.<span class="title function_">basename</span>(fpath)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fullName) <span class="comment">// index.html</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> nameWithoutExt = path.<span class="title function_">basename</span>(fpath, <span class="string">&#x27;.html&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nameWithoutExt) <span class="comment">// index</span></span><br></pre></td></tr></table></figure><h3 id="获取路径中文件的扩展名-path-extname"><a href="#获取路径中文件的扩展名-path-extname" class="headerlink" title="获取路径中文件的扩展名 path.extname()"></a>获取路径中文件的扩展名 <code>path.extname()</code></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> fpath = <span class="string">&#x27;/a/b/c/index.html&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fext = path.<span class="title function_">extname</span>(fpath)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fext) <span class="comment">// .html</span></span><br></pre></td></tr></table></figure><h2 id="http-模块"><a href="#http-模块" class="headerlink" title="http 模块"></a>http 模块</h2><ul><li>http 模块是 Node.js 官方提供的、用来创建 web 服务器的模块。</li></ul><h3 id="创建基本-Web-服务器"><a href="#创建基本-Web-服务器" class="headerlink" title="创建基本 Web 服务器"></a>创建基本 Web 服务器</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"><span class="comment">// 创建 Web 服务器实例</span></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为服务器实例绑定 request 事件， 监听客户端的请求</span></span><br><span class="line">server.<span class="title function_">on</span>(<span class="string">&#x27;request&#x27;</span>, <span class="title function_">fucntion</span>(<span class="params">req,res</span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> url = req.<span class="property">url</span></span><br><span class="line">  <span class="keyword">const</span> method = req.<span class="property">method</span></span><br><span class="line">  <span class="keyword">const</span> str = <span class="string">`Your request url is <span class="subst">$&#123;url&#125;</span>, and request method is <span class="subst">$&#123;method&#125;</span>`</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(str)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 设置 Content-Type 响应头，解决中文乱码的问题</span></span><br><span class="line">  res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/html; charset=utf-8&#x27;</span>)</span><br><span class="line">  <span class="comment">// 向客户端响应内容</span></span><br><span class="line">  res.<span class="title function_">end</span>(str)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听端口</span></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">8080</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;server running at http://127.0.0.1:8080&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="CommonJS-模块化"><a href="#CommonJS-模块化" class="headerlink" title="CommonJS 模块化"></a>CommonJS 模块化</h2><ul><li><code>module</code> 变量是一个对象，<code>module.exports</code> 是对外的接口</li><li>加载某个模块即加载该模块的 <code>module.exports</code> 属性</li></ul><p><strong>导出方式一</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;10wen.github.io&#x27;</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">name</span> = name</span><br><span class="line"><span class="built_in">exports</span>.<span class="property">getName</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> name; <span class="comment">// 闭包形成</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; name, getName &#125; = <span class="built_in">require</span>(<span class="string">&#x27;./module.js&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name)</span><br><span class="line"><span class="title function_">getName</span>();</span><br></pre></td></tr></table></figure><p><strong>导出方式二</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;10wen&#x27;</span></span><br><span class="line"><span class="keyword">const</span> getName = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> name</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = getName</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getName = <span class="built_in">require</span>(<span class="string">&#x27;./module.js&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> commonjs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Nodejs的Web服务端框架Express</title>
      <link href="/posts/38S1216.html"/>
      <url>/posts/38S1216.html</url>
      
        <content type="html"><![CDATA[<h1 id="Express"><a href="#Express" class="headerlink" title="Express"></a>Express</h1><p><a href="https://www.expressjs.com.cn/">官网传送门(opens new window)</a></p><blockquote><p>基于 Node.js 平台，快速、开放、极简的 Web 开发框架</p></blockquote><p>Express 是用于快速创建服务器的第三方模块。</p><h2 id="Express-初体验"><a href="#Express-初体验" class="headerlink" title="Express 初体验"></a>Express 初体验</h2><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p>创建服务器，监听客户端请求，并返回内容：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="comment">// 创建 web 服务器</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听客户端的 GET 和 POST 请求，并向客户端响应具体的内容</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/user&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span>, <span class="attr">gender</span>: <span class="string">&#x27;男&#x27;</span> &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/user&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;请求成功&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 通过 req.query 可以获取到客户端发送过来的查询参数</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">query</span>)</span><br><span class="line">  res.<span class="title function_">send</span>(req.<span class="property">query</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里的 :id 是一个动态的参数</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/user/:id/:username&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// req.params 是动态匹配到的 URL 参数，默认是一个空对象</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">params</span>)</span><br><span class="line">  res.<span class="title function_">send</span>(req.<span class="property">params</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">80</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;express server running at http://127.0.0.1&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="托管静态资源"><a href="#托管静态资源" class="headerlink" title="托管静态资源"></a>托管静态资源</h3><ul><li>通过 <code>express.static()</code> 方法可创建静态资源服务器，向外开放访问静态资源。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(<span class="string">&#x27;public&#x27;</span>))</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(<span class="string">&#x27;files&#x27;</span>))</span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/public&#x27;</span>, express.<span class="title function_">static</span>(<span class="string">&#x27;public&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">可直接访问 public, files 目录下的静态资源</span></span><br><span class="line"><span class="comment">http://localhost:3000/images/bg.jpg</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">通过带有 /public 前缀的地址访问 public 目录下的文件</span></span><br><span class="line"><span class="comment">http://localhost:8080/public/images/logo.png</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="Express-路由"><a href="#Express-路由" class="headerlink" title="Express 路由"></a>Express 路由</h2><p>创建路由模块：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// router.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="comment">// 创建路由对象</span></span><br><span class="line"><span class="keyword">const</span> router = express.<span class="title class_">Router</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 挂载具体路由</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/user/list&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;Get user list.&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/user/add&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;Add new user.&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向外导出路由对象</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router</span><br></pre></td></tr></table></figure><p>注册路由模块：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">&#x27;./router&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册路由模块，添加访问前缀</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/api&#x27;</span>, router)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">80</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;http://127.0.0.1&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Express-中间件"><a href="#Express-中间件" class="headerlink" title="Express 中间件"></a>Express 中间件</h2><ul><li>中间件是指流程的中间处理环节</li><li>服务器收到请求后，可先调用中间件进行预处理</li><li>中间件是一个函数，包含 <code>req, res, next</code> 三个参数，<code>next()</code> 参数把流转关系交给下一个中间件或路由</li></ul><p><strong>注意：</strong></p><ul><li>在注册路由之前注册中间件（错误级别中间件除外）</li><li>中间件可连续调用多个</li><li>别忘记调用 <code>next()</code> 函数</li><li><code>next()</code> 函数后别写代码</li><li>多个中间件共享 <code>req</code>、 <code>res</code>对象</li></ul><h3 id="全局中间件"><a href="#全局中间件" class="headerlink" title="全局中间件"></a>全局中间件</h3><ul><li>通过 <code>app.use()</code> 定义的中间件为全局中间件</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义第一个全局中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;调用了第1个全局中间件&#x27;</span>)</span><br><span class="line">  <span class="title function_">next</span>()</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 定义第二个全局中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;调用了第2个全局中间件&#x27;</span>)</span><br><span class="line">  <span class="title function_">next</span>()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/user&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;User page.&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">80</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;http://127.0.0.1&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="局部中间件"><a href="#局部中间件" class="headerlink" title="局部中间件"></a>局部中间件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义中间件函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">mw1</span> = (<span class="params">req, res, next</span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;调用了第一个局部生效的中间件&#x27;</span>)</span><br><span class="line">  <span class="title function_">next</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">mw2</span> = (<span class="params">req, res, next</span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;调用了第二个局部生效的中间件&#x27;</span>)</span><br><span class="line">  <span class="title function_">next</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 两种定义局部中间件的方式</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/hello&#x27;</span>, mw2, mw1, <span class="function">(<span class="params">req, res</span>) =&gt;</span> res.<span class="title function_">send</span>(<span class="string">&#x27;hello page.&#x27;</span>))</span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/about&#x27;</span>, [mw1, mw2], <span class="function">(<span class="params">req, res</span>) =&gt;</span> res.<span class="title function_">send</span>(<span class="string">&#x27;about page.&#x27;</span>))</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/user&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> res.<span class="title function_">send</span>(<span class="string">&#x27;User page.&#x27;</span>))</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">80</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Express server running at http://127.0.0.1&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="中间件分类"><a href="#中间件分类" class="headerlink" title="中间件分类"></a>中间件分类</h3><ol><li><p>应用级别的中间件</p><ul><li>通过 <code>app.use()</code> 或 <code>app.get()</code> 或 <code>app.post()</code> ，绑定到 <code>app</code> 实例上的中间件</li></ul></li><li><p>路由级别的中间件</p><ul><li>绑定到 <code>express.Router()</code> 实例上的中间件，叫做路由级别的中间件。用法和应用级别中间件没有区别。应用级别中间件是绑定到 <code>app</code> 实例上，路由级别中间件绑定到 <code>router</code> 实例上。</li></ul></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"><span class="keyword">const</span> router = express.<span class="title class_">Router</span>()</span><br><span class="line"><span class="comment">// 绑定到路由 router 实例上</span></span><br><span class="line">router.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><br><span class="line">  <span class="title function_">next</span>()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/&#x27;</span>, router)</span><br></pre></td></tr></table></figure><ol start="3"><li>错误级别的中间件<ul><li>用来捕获整个项目中发生的异常错误，从而防止项目异常崩溃的问题</li><li>错误级别中间件的处理函数中，必须有 4 个形参，形参顺序从前到后分别是 <code>(err, req, res, next)</code> </li><li>错误级别的中间件必须注册在所有路由之后</li></ul></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;服务器内部发生了错误！&#x27;</span>)</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;Home page.&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义错误级别的中间件，捕获整个项目的异常错误，从而防止程序的崩溃</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">err, req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;发生了错误！&#x27;</span> + err.<span class="property">message</span>)</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;Error：&#x27;</span> + err.<span class="property">message</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">80</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Express server running at http://127.0.0.1&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="4"><li>Express 内置中间件</li></ol><p>自 Express 4.16.0 版本开始，Express 内置了 3 个常用的中间件，极大的提高了 Express 项目的开发效率和体验：</p><ul><li><p><code>express.static</code> 快速托管静态资源的内置中间件，例如： HTML 文件、图片、CSS 样式等（无兼容性）</p></li><li><p><code>express.json</code> 解析 JSON 格式的请求体数据（有兼容性，仅在 4.16.0+ 版本中可用）</p></li><li><p><code>express.urlencoded</code> 解析 URL-encoded 格式的请求体数据（有兼容性，仅在 4.16.0+ 版本中可用）</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(__dirname, <span class="string">&#x27;./public&#x27;</span>))</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">json</span>())</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">urlencoded</span>(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;))</span><br></pre></td></tr></table></figure><ol start="5"><li>第三方中间件（cors等）</li></ol><h2 id="CORS-跨域资源共享"><a href="#CORS-跨域资源共享" class="headerlink" title="CORS 跨域资源共享"></a>CORS 跨域资源共享</h2><p>安装配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install cors</span><br><span class="line"><span class="keyword">const</span> cord = <span class="built_in">require</span>(<span class="string">&#x27;cors&#x27;</span>)</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">cors</span>()) <span class="comment">// app.js 使用中间件</span></span><br></pre></td></tr></table></figure><ul><li>CORS（Cross-Origin Resource Sharing，跨域资源共享）解决跨域，浏览器是通过 HTTP 响应头决定是否阻止客户端跨域获取资源</li><li>浏览器的同源安全策略默认会阻止网页 “跨域” 获取资源。但如果接口服务器配置了 CORS 相关的 HTTP 响应头，就可解除浏览器端的跨域访问限制</li><li>CORS 主要在服务器端进行配置。客户端浏览器无须做任何额外的配置，即可请求开启了 CORS 的接口。</li><li>CORS 在浏览器中有兼容性。只有支持 XMLHttpRequest Level2 的浏览器，才能正常访问开启了 CORS 的服务端接口（例如：IE10+、Chrome4+、FireFox3.5+）。</li></ul><h3 id="CORS-常见响应头"><a href="#CORS-常见响应头" class="headerlink" title="CORS 常见响应头"></a>CORS 常见响应头</h3><p><strong>Access-Control-Allow-Origin</strong>：制定了允许访问资源的外域源</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;http://example.com&#x27;</span>)</span><br><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>Access-Control-Allow-Headers</strong>：表示此次请求中允许哪些 header 字段</p><ul><li>默认情况下，CORS 仅支持客户端向服务器发送如下的 9 个请求头：  <ul><li><code>Accept</code>、<code>Accept-Language</code>、<code>Content-Language</code>、<code>DPR</code>、<code>Downlink</code>、<code>Save-Data</code>、<code>Viewport-Width</code>、<code>Width</code> 、<code>Content-Type</code> （Content-Type 的仅限于 <code>text/plain</code>、<code>multipart/form-data</code>、<code>application/x-www-form-urlencoded</code> 三者之一）</li></ul></li><li>如果客户端向服务器发送了额外的请求头信息，则需要在服务器端，通过 A<code>ccess-Control-Allow-Headers</code> 对额外的请求头进行声明，否则这次请求会失败！</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span>, <span class="string">&#x27;Content-Type, X-Custom-Header&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>Access-Control-Allow-Methods</strong>：表示此次请求中允许使用的请求方法</p><ul><li>默认情况下，CORS 仅支持客户端发起 GET、POST、HEAD 请求。如果客户端希望通过 PUT、DELETE 等方式请求服务器的资源，则需要在服务器端，通过 <code>Access-Control-Alow-Methods</code> 来指明实际请求所允许使用的 HTTP 方法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span>, <span class="string">&#x27;POST, GET, DELETE, HEAD&#x27;</span>)</span><br><span class="line">res.<span class="title function_">setHEader</span>(<span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span>, <span class="string">&#x27;*&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="CORS-请求分类"><a href="#CORS-请求分类" class="headerlink" title="CORS 请求分类"></a>CORS 请求分类</h3><h4 id="简单请求"><a href="#简单请求" class="headerlink" title="简单请求"></a>简单请求</h4><ul><li>请求方式：GET、POST、HEAD 三者之一</li><li>HTTP 头部信息不超过以下几种字段：无自定义头部字段、Accept、Accept-Language、Content-Language、DPR、Downlink、Save-Data、Viewport-Width、Width 、Content-Type（只有三个值 application&#x2F;x-www-formurlencoded、multipart&#x2F;form-data、text&#x2F;plain）</li></ul><h4 id="预检请求"><a href="#预检请求" class="headerlink" title="预检请求"></a>预检请求</h4><ul><li>请求方式为 GET、POST、HEAD 之外的请求 Method 类型</li><li>请求头中包含自定义头部字段</li><li>向服务器发送了 application&#x2F;json 格式的数据</li></ul><p>在浏览器与服务器正式通信之前，浏览器会先发送 OPTION 请求进行预检，以获知服务器是否允许该实际请求，所以这一次的 OPTION 请求称为“预检请求”。服务器成功响应预检请求后，才会发送真正的请求，并且携带真实数据</p><h2 id="Express-中配置-Mysql"><a href="#Express-中配置-Mysql" class="headerlink" title="Express 中配置 Mysql"></a>Express 中配置 Mysql</h2><h3 id="创建数据库连接池-db-index-js"><a href="#创建数据库连接池-db-index-js" class="headerlink" title="创建数据库连接池 db/index.js"></a>创建数据库连接池 <code>db/index.js</code></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">&#x27;mysql&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建数据库连接对象</span></span><br><span class="line"><span class="keyword">const</span> db = mysql.<span class="title function_">createPool</span>(&#123;</span><br><span class="line">  <span class="attr">host</span>: <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">  <span class="attr">user</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">  <span class="attr">password</span>: <span class="string">&#x27;123456&#x27;</span>,</span><br><span class="line">  <span class="attr">database</span>: <span class="string">&#x27;forum&#x27;</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向外共享 db 数据库连接对象</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = db</span><br></pre></td></tr></table></figure><h3 id="操作-mysql-数据库-router-handler-user-js"><a href="#操作-mysql-数据库-router-handler-user-js" class="headerlink" title="操作 mysql 数据库 router_handler/user.js"></a>操作 mysql 数据库 <code>router_handler/user.js</code></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> db = <span class="built_in">require</span>(<span class="string">&#x27;../db/index&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> selectSql = <span class="string">&#x27;select * from users&#x27;</span></span><br><span class="line">db.<span class="title function_">query</span>(selectSql, <span class="function">(<span class="params">err, results</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">message</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(results)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> user = &#123; <span class="attr">username</span>: <span class="string">&#x27;de&#x27;</span>, <span class="attr">password</span>: <span class="string">&#x27;123456&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">const</span> insertSql = <span class="string">&#x27;insert into users (username, password) values(?, ?)&#x27;</span></span><br><span class="line">db.<span class="title function_">query</span>(insertSql, [user.<span class="property">username</span>, user.<span class="property">password</span>], <span class="function">(<span class="params">err, result</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">message</span>)</span><br><span class="line">    <span class="keyword">if</span>(result.<span class="property">affectedRows</span> ===  <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;插入成功&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 快速插入数据</span></span><br><span class="line"><span class="keyword">const</span> user = &#123; <span class="attr">username</span>: <span class="string">&#x27;de&#x27;</span>, <span class="attr">password</span>: <span class="string">&#x27;123456&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">const</span> insertSql2 = <span class="string">&#x27;insert into users set ?&#x27;</span></span><br><span class="line">db.<span class="title function_">query</span>(insertSql2, user, <span class="function">(<span class="params">err, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">message</span>)</span><br><span class="line">    <span class="keyword">if</span>(res.<span class="property">affectedRows</span> === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Success&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新数据</span></span><br><span class="line"><span class="keyword">const</span> user = &#123;<span class="attr">id</span>: <span class="number">12</span>, <span class="attr">username</span>: <span class="string">&#x27;de&#x27;</span>, <span class="attr">password</span>: <span class="string">&#x27;123de&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">const</span> updateSql = <span class="string">&#x27;update users set username= ?, password= ? where id= ?&#x27;</span></span><br><span class="line">db.<span class="title function_">query</span>(updateSql, [user.<span class="property">username</span>, user.<span class="property">password</span>, user.<span class="property">id</span>], <span class="function">(<span class="params">err, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">message</span>)</span><br><span class="line">    <span class="keyword">if</span>(res.<span class="property">affectedRows</span> === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;更新成功&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新数据的快捷方式</span></span><br><span class="line"><span class="keyword">const</span> user = &#123;<span class="attr">id</span>: <span class="number">12</span>, <span class="attr">username</span>: <span class="string">&#x27;dewen&#x27;</span>, <span class="attr">password</span>: <span class="string">&#x27;123dewen&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">const</span> updateSql = <span class="string">&#x27;update users set ? where id= ?&#x27;</span></span><br><span class="line">db.<span class="title function_">query</span>(updateSql, [user, user.<span class="property">id</span>], <span class="function">(<span class="params">err, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">message</span>)</span><br><span class="line">    <span class="keyword">if</span>(res.<span class="property">affectedRows</span> === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;更新成功&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除</span></span><br><span class="line"><span class="keyword">const</span> deleteSql = <span class="string">&#x27;delete from users where id= ?&#x27;</span></span><br><span class="line">db.<span class="title function_">query</span>(deleteSql, <span class="number">12</span>, <span class="function">(<span class="params">err, res</span>)=&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">message</span>)</span><br><span class="line">    <span class="keyword">if</span>(res.<span class="property">affectedRows</span> === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;删除成功&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//标记删除</span></span><br><span class="line"><span class="keyword">const</span> deleteStr = <span class="string">&#x27;update users set status=? where id=?&#x27;</span></span><br><span class="line">db.<span class="title function_">query</span>(deleteStr, [<span class="number">1</span>, <span class="number">1</span>], <span class="function">(<span class="params">err, res</span>)=&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">message</span>)</span><br><span class="line">    <span class="keyword">if</span>(res.<span class="property">affectedRows</span> === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;执行标记删除成功&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Express-身份验证"><a href="#Express-身份验证" class="headerlink" title="Express 身份验证"></a>Express 身份验证</h2><h3 id="Session-认证机制"><a href="#Session-认证机制" class="headerlink" title="Session 认证机制"></a>Session 认证机制</h3><ul><li>服务端渲染推荐使用 Session 认证机制</li></ul><p><img src="https://brucecai55520.gitee.io/bruceblog/assets/img/Session.c66d5499.png" alt="session"></p><p>配置<code>express-session</code>中间件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">&#x27;express-session&#x27;</span>)</span><br><span class="line">app.<span class="title function_">use</span>(</span><br><span class="line">  <span class="title function_">session</span>(&#123;</span><br><span class="line">    <span class="attr">secret</span>: <span class="string">&#x27;10wen.github.io&#x27;</span>, <span class="comment">// secret 的值为任意字符串</span></span><br><span class="line">    <span class="attr">resave</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">saveUninitalized</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>向<code>session</code>存储数据：中间件配置成功后，可通过 <code>req.session</code> 访问 session 对象，存储用户信息</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/api/login&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  req.<span class="property">session</span>.<span class="property">user</span> = req.<span class="property">body</span> <span class="comment">// 向session添加用户信息</span></span><br><span class="line">  req.<span class="property">session</span>.<span class="property">isLogin</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  res.<span class="title function_">send</span>(&#123; <span class="attr">status</span>: <span class="number">0</span>, <span class="attr">msg</span>: <span class="string">&#x27;login done&#x27;</span> &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>从<code>session</code>取数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/api/username&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!req.<span class="property">session</span>.<span class="property">isLogin</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">send</span>(&#123; <span class="attr">status</span>: <span class="number">1</span>, <span class="attr">msg</span>: <span class="string">&#x27;fail&#x27;</span> &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  res.<span class="title function_">send</span>(&#123; <span class="attr">status</span>: <span class="number">0</span>, <span class="attr">msg</span>: <span class="string">&#x27;success&#x27;</span>, <span class="attr">username</span>: req.<span class="property">session</span>.<span class="property">user</span>.<span class="property">username</span> &#125;) <span class="comment">// 取出用户信息返回</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>清空 <code>session</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/api/logout&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 清空当前客户端的session信息</span></span><br><span class="line">  req.<span class="property">session</span>.<span class="title function_">destroy</span>()</span><br><span class="line">  res.<span class="title function_">send</span>(&#123; <span class="attr">status</span>: <span class="number">0</span>, <span class="attr">msg</span>: <span class="string">&#x27;logout done&#x27;</span> &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="JWT-认证机制"><a href="#JWT-认证机制" class="headerlink" title="JWT 认证机制"></a>JWT 认证机制</h3><ul><li><p>前后端分离推荐使用 JWT（JSON Web Token）认证机制，是目前最流行的跨域认证解决方案</p></li><li><p>用户的信息通过 Token 字符串的形式，保存在客户端浏览器中。服务器通过还原 Token 字符串的形式来认证用户的身份</p></li></ul><p><img src="https://brucecai55520.gitee.io/bruceblog/assets/img/JWT.6a82c41d.png" alt="JWT"></p><p><strong>1. 安装：</strong><code>jsonwebtoken</code>、<code>express-jwt</code></p><ul><li>jsonwebtoken 用于生成 JWT 字符串</li><li>express-jwt 用于将 JWT 字符串解析还原成 JSON 对象</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install jsonwebtoken express-jwt</span><br></pre></td></tr></table></figure><p><strong>2. 定义密钥：</strong><code>secret </code></p><ul><li>用户生成和解密 Token</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> jwt = <span class="built_in">require</span>(<span class="string">&#x27;jsonwebtoken&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> expressJWT = <span class="built_in">require</span>(<span class="string">&quot;express-jwt&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// TODO_02：定义 secret 密钥，建议将密钥命名为 secretKey</span></span><br><span class="line"><span class="keyword">const</span> secretKey = <span class="string">&#x27;10wen.github.io&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>3. 生成 Token</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/api/login&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> userInfo = req.<span class="property">body</span></span><br><span class="line">  <span class="comment">// TODO_03：在登录成功之后，调用 jwt.sign() 方法生成 JWT 字符串。并通过 token 属性发送给客户端</span></span><br><span class="line">  <span class="comment">// (用户信息对象， 加密密钥， 配置对象，可以配置 token 的有效期)</span></span><br><span class="line">  <span class="comment">// 不要把 密码 加密到 token 字符串中</span></span><br><span class="line">  <span class="keyword">const</span> tokenStr = jwt.<span class="title function_">sign</span>(&#123;<span class="attr">username</span>: userInfo.<span class="property">username</span>&#125;, secretKey, &#123;<span class="attr">expiresIn</span>: <span class="string">&#x27;30s&#x27;</span>&#125;)</span><br><span class="line">  res.<span class="title function_">send</span>(&#123;</span><br><span class="line">    <span class="attr">status</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;登录成功！&#x27;</span>,</span><br><span class="line">    <span class="attr">token</span>: tokenStr <span class="comment">// 要发送给客户端的 token 字符串</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>4. JWT 字符串还原为 JSON 对象</strong> (<code>app.js</code>)</p><ul><li>客户端访问有权限的接口时，需通过请求头的 <code>Authorization</code> 字段，将 Token 字符串发送到服务器进行身份认证</li><li>服务器可以通过 express-jwt 中间件将客户端发送过来的 Token 解析还原成 JSON 对象</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// unless(&#123; path: [/^\/api\//] &#125;) 指定哪些接口无需访问权限</span></span><br><span class="line"><span class="comment">// 在路由之前配置解析 Token 的中间件</span></span><br><span class="line"><span class="keyword">const</span> expressJWT = <span class="built_in">require</span>(<span class="string">&#x27;express-jwt&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">&#x27;./config&#x27;</span>)</span><br><span class="line">app.<span class="title function_">use</span>(</span><br><span class="line">  <span class="title function_">expressJWT</span>(&#123;</span><br><span class="line">    <span class="attr">secret</span>: config.<span class="property">jwtSecretKey</span>,</span><br><span class="line">    <span class="attr">algorithms</span>: [<span class="string">&quot;HS256&quot;</span>],</span><br><span class="line">    <span class="comment">// 无token请求不进行解析，并且抛出异常，给错误中间件处理</span></span><br><span class="line">    <span class="attr">credentialsRequired</span>: <span class="literal">false</span>,</span><br><span class="line">  &#125;).<span class="title function_">unless</span>(&#123;</span><br><span class="line">    <span class="attr">path</span>: [</span><br><span class="line">      <span class="string">&quot;/login&quot;</span>,</span><br><span class="line">      <span class="string">&quot;/register&quot;</span>,</span><br><span class="line">      <span class="string">&quot;/index&quot;</span>,</span><br><span class="line">      &#123; <span class="attr">url</span>: <span class="regexp">/^\/articles\/.*/</span>, <span class="attr">methods</span>: [<span class="string">&quot;GET&quot;</span>] &#125;,</span><br><span class="line">      &#123; <span class="attr">url</span>: <span class="regexp">/^\/content\/.*/</span>, <span class="attr">methods</span>: [<span class="string">&quot;GET&quot;</span>] &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// app.use(expressJWT(&#123; secret: secretKey &#125;).unless(&#123; path: [/^\/api\//] &#125;))</span></span><br></pre></td></tr></table></figure><p><strong>5. 获取用户信息</strong></p><ul><li>当 express-jwt 中间件配置成功后，中间件就可以把解析出来的用户信息，挂载到  <code>req.user</code> 属性上，使用 <code>req.user</code> 对象，来访问从 JWT 字符串中解析出来的用户信息</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/admin/getinfo&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  <span class="comment">// TODO_05：使用 req.user 获取用户信息，并使用 data 属性将用户信息发送给客户端</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">user</span>)</span><br><span class="line">  res.<span class="title function_">send</span>(&#123;</span><br><span class="line">    <span class="attr">status</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;获取用户信息成功！&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: req.<span class="property">user</span> <span class="comment">// 要发送给客户端的用户信息</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>6. 捕获解析 JWT 失败后产生的错误</strong></p><ul><li>当使用 express-jwt 解析 Token 字符串时，如果客户端发送过来的 Token 字符串过期或不合法，会产生一个解析失败的错误，影响项目的正常运行</li><li>通过 Express 的错误中间件，捕获这个错误并进行相关的处理</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">err, req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err.<span class="property">name</span> === <span class="string">&#x27;UnauthorizedError&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">send</span>(&#123; <span class="attr">status</span>: <span class="number">401</span>, <span class="attr">message</span>: <span class="string">&#x27;Invalid token&#x27;</span> &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  res.<span class="title function_">send</span>(&#123; <span class="attr">status</span>: <span class="number">500</span>, <span class="attr">message</span>: <span class="string">&#x27;Unknown error&#x27;</span> &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cors </tag>
            
            <tag> blog </tag>
            
            <tag> nodejs </tag>
            
            <tag> express </tag>
            
            <tag> mysql </tag>
            
            <tag> session </tag>
            
            <tag> jwt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker项目部署初体验</title>
      <link href="/posts/SK8RGB.html"/>
      <url>/posts/SK8RGB.html</url>
      
        <content type="html"><![CDATA[<h2 id="Docker-Springboot项目部署"><a href="#Docker-Springboot项目部署" class="headerlink" title="Docker Springboot项目部署"></a>Docker Springboot项目部署</h2><p>① jar包同级目录创建Dockerfile文件</p><p>② 编辑Dockerfile</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拉取基础镜像</span></span><br><span class="line">FROM java:8</span><br><span class="line"><span class="comment"># 设置作者信息</span></span><br><span class="line">MAINTAINER 10wen</span><br><span class="line"><span class="comment"># 把pet_rescue-0.0.1-SNAPSHOT.jar添加到容器里，并重命名为app.jar</span></span><br><span class="line"><span class="comment"># 因为pet_rescue-0.0.1-SNAPSHOT.jar和Dockerfile在同一个目录下，所以只写文件名即可</span></span><br><span class="line">ADD pet_rescue-0.0.1-SNAPSHOT.jar app.jar</span><br><span class="line"><span class="comment"># 设置端口号，此处只开放一个端口2000</span></span><br><span class="line">EXPOSE 2000</span><br><span class="line"><span class="comment"># 执行命令，此处运行app.jar</span></span><br><span class="line">RUN bash -c <span class="string">&#x27;touch /app.jar&#x27;</span></span><br><span class="line">ENTRYPOINT [<span class="string">&quot;java&quot;</span>,<span class="string">&quot;-jar&quot;</span>,<span class="string">&quot;app.jar&quot;</span>]</span><br></pre></td></tr></table></figure><p>③ 制作镜像：编辑好Dockerfile文件保存后，在当前文件夹输入命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -f Dockerfile -t pet_recue_image:v1.0 .</span><br></pre></td></tr></table></figure><p>④ 查看镜像</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><p>⑤ 创建容器，运行springboot项目制作的镜像</p><ul><li>-i 保持容器运行，-it 创建交互式容器，-id 创建守护式容器</li><li>-d 表示后台运行 </li><li>–name&#x3D;容器名称</li><li>-p 后面有两个端口，分别是：宿主机端口:容器端口 </li><li>pet_rescue_image:v1.0 使用的镜像和版本</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -<span class="built_in">id</span> --name=pet_rescue_container -p 2000:2000 pet_rescue_image:v1.0</span><br></pre></td></tr></table></figure><p>⑥ 查看容器</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker ps <span class="comment">#查看正在运行的容器</span></span><br><span class="line">docker ps -a <span class="comment">#查看所有容器</span></span><br></pre></td></tr></table></figure><h2 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h2><ul><li><p>进入容器</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec 参数 #退出容器，容器不会关闭</span><br></pre></td></tr></table></figure></li><li><p>停止容器</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop 容器名称</span><br></pre></td></tr></table></figure></li><li><p>启动容器</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start 容器名称</span><br></pre></td></tr></table></figure></li><li><p>删除容器：如果容器是运行状态则删除失败，需要停止容器参能删除</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm 容器名称</span><br></pre></td></tr></table></figure></li><li><p>查看容器信息</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect 容器名称</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>查看所有</p>  <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure></li><li><p>删除镜像</p>  <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker rmi 镜像<span class="built_in">id</span>/名称号:版本号 <span class="comment">#删除指定本地镜像</span></span><br><span class="line">docker rmi <span class="string">&#x27;docker images -q&#x27;</span> <span class="comment">#删除所有本地镜像</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git&amp;Github 工作流</title>
      <link href="/posts/DQ51JH.html"/>
      <url>/posts/DQ51JH.html</url>
      
        <content type="html"><![CDATA[<h1 id="Git-amp-Github-工作流"><a href="#Git-amp-Github-工作流" class="headerlink" title="Git&amp;Github 工作流"></a>Git&amp;Github 工作流</h1><h2 id="git-clone-git-…"><a href="#git-clone-git-…" class="headerlink" title="git clone git@…"></a>git clone git@…</h2><blockquote><p>克隆项目到本地</p></blockquote><h2 id="git-checkout-b-my-feature"><a href="#git-checkout-b-my-feature" class="headerlink" title="git checkout -b my-feature"></a>git checkout -b my-feature</h2><blockquote><p>新建本地分支my-feature</p></blockquote><h2 id="git-add"><a href="#git-add" class="headerlink" title="git add ."></a>git add .</h2><h2 id="git-commit-m’update’"><a href="#git-commit-m’update’" class="headerlink" title="git commit -m’update’"></a>git commit -m’update’</h2><blockquote><p>更新本地分支my-feature</p></blockquote><h2 id="git-push-origin-my-feature"><a href="#git-push-origin-my-feature" class="headerlink" title="git push origin my-feature"></a>git push origin my-feature</h2><blockquote><p>远端新建分支my-feature</p></blockquote><ul><li>此时若远端有了新的 commit，本地 main&#x2F;my-feature 并不是最新，而my-feature又有了更新</li></ul><h2 id="git-checkout-main"><a href="#git-checkout-main" class="headerlink" title="git checkout main"></a>git checkout main</h2><blockquote><p>切换到本地主分支main</p></blockquote><h2 id="git-pull-origin-master"><a href="#git-pull-origin-master" class="headerlink" title="git pull origin master"></a>git pull origin master</h2><blockquote><p>更新本地主分支main与远端master一致</p></blockquote><h2 id="git-checkout-my-feature"><a href="#git-checkout-my-feature" class="headerlink" title="git checkout my-feature"></a>git checkout my-feature</h2><blockquote><p>切换到本地工作分支my-feature</p></blockquote><h2 id="git-rebase-main"><a href="#git-rebase-main" class="headerlink" title="git rebase main"></a>git rebase main</h2><blockquote><p>在本地main最新的基础之上更新我的修改，有可能出现 rebase conflict，手动选择代码解决冲突</p></blockquote><h2 id="git-pull-f-origin-my-feature"><a href="#git-pull-f-origin-my-feature" class="headerlink" title="git pull -f origin my-feature"></a>git pull -f origin my-feature</h2><blockquote><p>将本地my-feature强行推到远端 my-feature</p></blockquote><h2 id="New-pull-request"><a href="#New-pull-request" class="headerlink" title="New pull request"></a>New pull request</h2><blockquote><p>远端的my-feature做pull resuest</p></blockquote><h2 id="Squash-and-merge"><a href="#Squash-and-merge" class="headerlink" title="Squash and merge"></a>Squash and merge</h2><blockquote><p>远端master做Squash and merge</p></blockquote><h2 id="delete-my-feature"><a href="#delete-my-feature" class="headerlink" title="delete my-feature"></a>delete my-feature</h2><blockquote><p>远端删除分支my-feature</p></blockquote><h2 id="git-checkout-main-1"><a href="#git-checkout-main-1" class="headerlink" title="git checkout main"></a>git checkout main</h2><blockquote><p>本地切换到主分支main</p></blockquote><h2 id="git-branch-D-my-feature"><a href="#git-branch-D-my-feature" class="headerlink" title="git branch -D my-feature"></a>git branch -D my-feature</h2><blockquote><p>删除本地工作分支my-feature</p></blockquote><h2 id="git-pull-origin-master-1"><a href="#git-pull-origin-master-1" class="headerlink" title="git pull origin master"></a>git pull origin master</h2><blockquote><p>更新本地main与远端mater保持一致</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JWT认证原理</title>
      <link href="/posts/A5MQTA.html"/>
      <url>/posts/A5MQTA.html</url>
      
        <content type="html"><![CDATA[<h1 id="JSON-Web-Token"><a href="#JSON-Web-Token" class="headerlink" title="JSON Web Token"></a>JSON Web Token</h1><h2 id="JWT-由（-）分隔的三个部分组成-Header-Payload-Signature"><a href="#JWT-由（-）分隔的三个部分组成-Header-Payload-Signature" class="headerlink" title="JWT 由（.）分隔的三个部分组成 Header.Payload.Signature"></a>JWT 由（.）分隔的三个部分组成 <code>Header.Payload.Signature</code></h2><ul><li><p>Header（头部）描述 JWT 的元数据,由Base64URL算法转成字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;alg&quot;</span>: <span class="string">&quot;HS256&quot;</span>, <span class="comment">// 签名的算法（algorithm）</span></span><br><span class="line"><span class="string">&quot;typ&quot;</span>: <span class="string">&quot;JWT&quot;</span> <span class="comment">// 令牌（token）的类型</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Payload（负载）用来存放实际需要传递的数据,由Base64URL算法转成字符串</p><ul><li>iss (issuer)：签发人</li><li>exp (expiration time)：过期时间</li><li>sub (subject)：主题</li><li>aud (audience)：受众</li><li>nbf (Not Before)：生效时间</li><li>iat (Issued At)：签发时间</li><li>jti (JWT ID)：编号</li></ul></li><li><p>Signature（签名）对前两部分的签名,防止数据篡改,使用 Header 里面指定的签名算法产生签名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">HMACSHA256(</span><br><span class="line">  base64UrlEncode(header) + <span class="string">&quot;.&quot;</span> +</span><br><span class="line">  base64UrlEncode(payload),</span><br><span class="line">  secret</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li><p>Token: <code>$&#123;Header&#125;.$&#123;Payload&#125;.$&#123;Signature&#125;</code> 三个部分拼成一个字符串，每个部分之间用”点”（.）分隔</p></li></ul><h2 id="Spring-Boot-实现-JWT"><a href="#Spring-Boot-实现-JWT" class="headerlink" title="Spring Boot 实现 JWT"></a>Spring Boot 实现 JWT</h2><h3 id="引入JWT依赖"><a href="#引入JWT依赖" class="headerlink" title="引入JWT依赖"></a>引入JWT依赖</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&lt;!---jwt--&gt;</span></span><br><span class="line"><span class="string">&lt;dependency&gt;</span></span><br><span class="line">    <span class="string">&lt;groupId&gt;com.auth0&lt;/groupId&gt;</span></span><br><span class="line">    <span class="string">&lt;artifactId&gt;java-jwt&lt;/artifactId&gt;</span></span><br><span class="line">    <span class="string">&lt;version&gt;3.4.0&lt;/version&gt;</span></span><br><span class="line"><span class="string">&lt;/dependency&gt;</span></span><br></pre></td></tr></table></figure><h3 id="创建-utils-JwtUtil-java-生成以及验证token的工具类"><a href="#创建-utils-JwtUtil-java-生成以及验证token的工具类" class="headerlink" title="创建 utils/JwtUtil.java 生成以及验证token的工具类"></a>创建 <code>utils/JwtUtil.java</code> 生成以及验证<code>token</code>的工具类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 有效期</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">long</span> <span class="variable">expireTime</span> <span class="operator">=</span> <span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">7</span>; <span class="comment">// 7天</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 签名密钥</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">secret</span> <span class="operator">=</span> <span class="string">&quot;10wen_petRescue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * token 前缀</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">tokenPrefix</span> <span class="operator">=</span> <span class="string">&quot;Bearer &quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置 token 有效时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> expireTime token 有效时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setExpireTime</span><span class="params">(<span class="type">int</span> expireTime)</span> &#123;</span><br><span class="line">        JwtUtil.expireTime = expireTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置 token 密钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> secret token 密钥</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSecret</span><span class="params">(String secret)</span> &#123;</span><br><span class="line">        JwtUtil.secret = secret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建 TOKEN</span></span><br><span class="line"><span class="comment">     * JWT 构成: header, payload, signature</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map jwt payload Map</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> token 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">createToken</span><span class="params">(Map&lt;String,String&gt; map)</span> &#123;</span><br><span class="line">        <span class="comment">// Header 选择默认</span></span><br><span class="line">        JWTCreator.<span class="type">Builder</span> <span class="variable">builder</span> <span class="operator">=</span> JWT.create();</span><br><span class="line">        <span class="comment">// Payload</span></span><br><span class="line">        map.forEach((key,value)-&gt;&#123;</span><br><span class="line">            builder.withClaim(key,value);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="type">String</span> <span class="variable">TOKEN</span> <span class="operator">=</span> builder.withExpiresAt(<span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis() + expireTime))</span><br><span class="line">                .sign(Algorithm.HMAC256(secret)); <span class="comment">// Signature</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> tokenPrefix + TOKEN;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证 token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token 验证的 token 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> DecodedJWT 解码后的 jwt令牌对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> DecodedJWT <span class="title function_">validateToken</span><span class="params">(String token)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 创建验证对象</span></span><br><span class="line">        <span class="type">JWTVerifier</span> <span class="variable">jwtVerifier</span> <span class="operator">=</span> JWT.require(Algorithm.HMAC256(secret)).build();</span><br><span class="line">        <span class="comment">// 去除 token 前缀 &quot;Bearer &quot;</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">noPrefixToken</span> <span class="operator">=</span> token.replace(tokenPrefix, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="comment">// 得到解码token对象</span></span><br><span class="line">        <span class="type">DecodedJWT</span> <span class="variable">decodedJwt</span> <span class="operator">=</span> jwtVerifier.verify(noPrefixToken);</span><br><span class="line">        <span class="keyword">return</span> decodedJwt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="创建interceptors-JWTInterceptor-java请求拦截器验证token"><a href="#创建interceptors-JWTInterceptor-java请求拦截器验证token" class="headerlink" title="创建interceptors/JWTInterceptor.java请求拦截器验证token"></a>创建<code>interceptors/JWTInterceptor.java</code>请求拦截器验证<code>token</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JWTInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 获取请求头 token</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            JwtUtil.validateToken(token); <span class="comment">// 验证令牌</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// 放行请求</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SignatureVerificationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            map.put(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;无效签名！&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (TokenExpiredException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            map.put(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;token过期！&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (AlgorithmMismatchException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            map.put(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;token算法不一致！&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            map.put(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;token无效！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        map.put(<span class="string">&quot;state&quot;</span>,<span class="literal">false</span>);</span><br><span class="line">        <span class="comment">// 将 map 转换为 json</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>().writeValueAsString(map);</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/json;charset=UTF-8&quot;</span>);</span><br><span class="line">        response.getWriter().println(json);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="配置拦截器Config-InterceptorConfig-java"><a href="#配置拦截器Config-InterceptorConfig-java" class="headerlink" title="配置拦截器Config/InterceptorConfig.java"></a>配置拦截器<code>Config/InterceptorConfig.java</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InterceptorConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">JWTInterceptor</span>())</span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/**&quot;</span>)  <span class="comment">// 拦截所有</span></span><br><span class="line">                .excludePathPatterns(<span class="string">&quot;/user/login&quot;</span>, <span class="string">&quot;/user/register&quot;</span>); <span class="comment">// 放行登录注册</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="controller-UserControl-java生成token"><a href="#controller-UserControl-java生成token" class="headerlink" title="controller/UserControl.java生成token"></a><code>controller/UserControl.java</code>生成<code>token</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/login&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title function_">login</span><span class="params">(User user)</span>&#123;</span><br><span class="line">    Map&lt;String,Obejct&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.login(user);</span><br><span class="line">        Map&lt;String,String&gt; payloadMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        payloadMap.put(<span class="string">&quot;username&quot;</span>,username);</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> JwtUtil.createToken(payloadMap);</span><br><span class="line">        <span class="comment">// 返回 Token 令牌验证信息</span></span><br><span class="line">        map.put(<span class="string">&quot;token&quot;</span>,token);</span><br><span class="line">        map.put(<span class="string">&quot;state&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">        map.put(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;认证成功&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">        map.put(<span class="string">&quot;state&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">        map.put(<span class="string">&quot;msg&quot;</span>,e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="SpringBoot加了拦截器后出现的跨域问题解析"><a href="#SpringBoot加了拦截器后出现的跨域问题解析" class="headerlink" title="SpringBoot加了拦截器后出现的跨域问题解析"></a>SpringBoot加了拦截器后出现的跨域问题解析</h3><blockquote><p>问题描述：</p><ol><li>CROS复杂请求时会首先发送一个OPTIONS请求做嗅探，来测试服务器是否支持本次请求，请求成功后才会发送真实的请求</li><li>OPTIONS请求不会携带任何数据，导致这个请求不符合我们拦截器的校验规则被拦截了</li><li>响应头中也没携带解决跨域需要的头部信息，进而出现了跨域问题</li><li>所有的拦截器的preHandle()方法的执行都在实际跨域处理handler的方法之前，拦截器返回false都会跳过后续所有处理过程，因此预检请求被拦截了</li></ol></blockquote><p><strong>方案一：</strong>JWT拦截器<code>interceptors/JWTInterceptor.java</code>把所有的<code>OPTIONS</code>请求放行</p><ul><li>适用：跨域用的是@CrosOrigin注解，或者是<code>Config/CorsConfig.java</code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CorsConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> &#123;</span><br><span class="line">        registry.addMapping(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">                .allowedOrigins(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">                .allowCredentials(<span class="literal">true</span>)</span><br><span class="line">                .allowedMethods(<span class="string">&quot;GET&quot;</span>,<span class="string">&quot;POST&quot;</span>,<span class="string">&quot;DELETE&quot;</span>,<span class="string">&quot;PUT&quot;</span>,<span class="string">&quot;PATCH&quot;</span>,<span class="string">&quot;OPTIONS&quot;</span>)</span><br><span class="line">                .maxAge(<span class="number">3600</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><strong>解决：</strong>在验证Token之前配置<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解决因为拦截器先于跨域解决方案处理函数执行，OPTIONS预检请求不携带token而被拦截器抛出错误</span></span><br><span class="line"><span class="comment">// 拦截器取到请求先进行判断，如果是OPTIONS请求，则放行</span></span><br><span class="line"><span class="keyword">if</span>(<span class="string">&quot;OPTIONS&quot;</span>.equals(request.getMethod().toUpperCase())) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Method:OPTIONS预检请求&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ...验证 Token</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p><strong>方案二：</strong>利用过滤器<code>CorsFilter</code>解决跨域问题，CorsFilter是定义在Web容器中的过滤器，其执行顺序先于SpringMVC的所有拦截器执行，配置<code>Config/CorsConfig.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//让cors高于拦截器的权限</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalCorsConfig</span> &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CorsFilter <span class="title function_">corsFilter</span><span class="params">()</span> &#123;</span><br><span class="line">   </span><br><span class="line">        <span class="type">CorsConfiguration</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CorsConfiguration</span>();</span><br><span class="line">        config.addAllowedOrigin(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        config.setAllowCredentials(<span class="literal">true</span>);</span><br><span class="line">        config.addAllowedMethod(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        config.addAllowedHeader(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        config.addExposedHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">        <span class="type">UrlBasedCorsConfigurationSource</span> <span class="variable">configSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrlBasedCorsConfigurationSource</span>();</span><br><span class="line">        configSource.registerCorsConfiguration(<span class="string">&quot;/**&quot;</span>, config);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CorsFilter</span>(configSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Nodejs-实现JWT"><a href="#Nodejs-实现JWT" class="headerlink" title="Nodejs 实现JWT"></a>Nodejs 实现JWT</h2><p><strong>1. 安装：</strong><code>jsonwebtoken</code>、<code>express-jwt</code></p><ul><li>jsonwebtoken 用于生成 JWT 字符串</li><li>express-jwt 用于将 JWT 字符串解析还原成 JSON 对象</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install jsonwebtoken express-jwt</span><br></pre></td></tr></table></figure><p><strong>2. 定义密钥：</strong><code>secret </code></p><ul><li>用户生成和解密 Token</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> jwt = <span class="built_in">require</span>(<span class="string">&#x27;jsonwebtoken&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> expressJWT = <span class="built_in">require</span>(<span class="string">&quot;express-jwt&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// TODO_02：定义 secret 密钥，建议将密钥命名为 secretKey</span></span><br><span class="line"><span class="keyword">const</span> secretKey = <span class="string">&#x27;10wen.github.io&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>3. 生成 Token</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/api/login&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> userInfo = req.<span class="property">body</span></span><br><span class="line">  <span class="comment">// TODO_03：在登录成功之后，调用 jwt.sign() 方法生成 JWT 字符串。并通过 token 属性发送给客户端</span></span><br><span class="line">  <span class="comment">// (用户信息对象， 加密密钥， 配置对象，可以配置 token 的有效期)</span></span><br><span class="line">  <span class="comment">// 不要把 密码 加密到 token 字符串中</span></span><br><span class="line">  <span class="keyword">const</span> tokenStr = jwt.<span class="title function_">sign</span>(&#123;<span class="attr">username</span>: userInfo.<span class="property">username</span>&#125;, secretKey, &#123;<span class="attr">expiresIn</span>: <span class="string">&#x27;30s&#x27;</span>&#125;)</span><br><span class="line">  res.<span class="title function_">send</span>(&#123;</span><br><span class="line">    <span class="attr">status</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;登录成功！&#x27;</span>,</span><br><span class="line">    <span class="attr">token</span>: tokenStr <span class="comment">// 要发送给客户端的 token 字符串</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>4. JWT 字符串还原为 JSON 对象</strong> (<code>app.js</code>)</p><ul><li>客户端访问有权限的接口时，需通过请求头的 <code>Authorization</code> 字段，将 Token 字符串发送到服务器进行身份认证</li><li>服务器可以通过 express-jwt 中间件将客户端发送过来的 Token 解析还原成 JSON 对象</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// unless(&#123; path: [/^\/api\//] &#125;) 指定哪些接口无需访问权限</span></span><br><span class="line"><span class="comment">// 在路由之前配置解析 Token 的中间件</span></span><br><span class="line"><span class="keyword">const</span> expressJWT = <span class="built_in">require</span>(<span class="string">&#x27;express-jwt&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">&#x27;./config&#x27;</span>) <span class="comment">// 配置文件取出 secret</span></span><br><span class="line">app.<span class="title function_">use</span>(</span><br><span class="line">  <span class="title function_">expressJWT</span>(&#123;</span><br><span class="line">    <span class="attr">secret</span>: config.<span class="property">jwtSecretKey</span>,</span><br><span class="line">    <span class="attr">algorithms</span>: [<span class="string">&quot;HS256&quot;</span>],</span><br><span class="line">    <span class="comment">// 无token请求不进行解析，并且抛出异常，给错误中间件处理</span></span><br><span class="line">    <span class="attr">credentialsRequired</span>: <span class="literal">false</span>,</span><br><span class="line">  &#125;).<span class="title function_">unless</span>(&#123;</span><br><span class="line">    <span class="attr">path</span>: [</span><br><span class="line">      <span class="string">&quot;/login&quot;</span>,</span><br><span class="line">      <span class="string">&quot;/register&quot;</span>,</span><br><span class="line">      <span class="string">&quot;/index&quot;</span>,</span><br><span class="line">      &#123; <span class="attr">url</span>: <span class="regexp">/^\/articles\/.*/</span>, <span class="attr">methods</span>: [<span class="string">&quot;GET&quot;</span>] &#125;,</span><br><span class="line">      &#123; <span class="attr">url</span>: <span class="regexp">/^\/content\/.*/</span>, <span class="attr">methods</span>: [<span class="string">&quot;GET&quot;</span>] &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// app.use(expressJWT(&#123; secret: secretKey &#125;).unless(&#123; path: [/^\/api\//] &#125;))</span></span><br></pre></td></tr></table></figure><p><strong>5. 获取用户信息</strong></p><ul><li>当 express-jwt 中间件配置成功后，即可在那些有权限的接口中，使用 <code>req.user</code> 对象，来访问从 JWT 字符串中解析出来的用户信息</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/admin/getinfo&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  <span class="comment">// TODO_05：使用 req.user 获取用户信息，并使用 data 属性将用户信息发送给客户端</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">user</span>)</span><br><span class="line">  res.<span class="title function_">send</span>(&#123;</span><br><span class="line">    <span class="attr">status</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;获取用户信息成功！&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: req.<span class="property">user</span> <span class="comment">// 要发送给客户端的用户信息</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>6. 捕获解析 JWT 失败后产生的错误</strong></p><ul><li>当使用 express-jwt 解析 Token 字符串时，如果客户端发送过来的 Token 字符串过期或不合法，会产生一个解析失败的错误，影响项目的正常运行</li><li>通过 Express 的错误中间件，捕获这个错误并进行相关的处理</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">err, req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err.<span class="property">name</span> === <span class="string">&#x27;UnauthorizedError&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">send</span>(&#123; <span class="attr">status</span>: <span class="number">401</span>, <span class="attr">message</span>: <span class="string">&#x27;Invalid token&#x27;</span> &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  res.<span class="title function_">send</span>(&#123; <span class="attr">status</span>: <span class="number">500</span>, <span class="attr">message</span>: <span class="string">&#x27;Unknown error&#x27;</span> &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> JWT </tag>
            
            <tag> token </tag>
            
            <tag> 跨域 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue组件通信方式</title>
      <link href="/posts/3892EX6.html"/>
      <url>/posts/3892EX6.html</url>
      
        <content type="html"><![CDATA[<h1 id="六种通信方式"><a href="#六种通信方式" class="headerlink" title="六种通信方式"></a>六种通信方式</h1><h2 id="一、Props"><a href="#一、Props" class="headerlink" title="一、Props"></a>一、Props</h2><ul><li>父与子组件通信<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Child</span> :name=<span class="string">&#x27;name&#x27;</span> :func=<span class="string">&#x27;func&#x27;</span> /&gt;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 三种子组件接收形式</span></span><br><span class="line"><span class="attr">props</span>: [<span class="string">&#x27;name&#x27;</span>]</span><br><span class="line"><span class="attr">props</span>:&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="title class_">String</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="attr">props</span>:&#123;</span><br><span class="line">    <span class="attr">name</span>:&#123;</span><br><span class="line">        <span class="attr">type</span>:<span class="title class_">String</span>,</span><br><span class="line">        <span class="attr">required</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="attr">default</span>:<span class="string">&#x27;name&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>路由Props<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;home&#x27;</span>,</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">    <span class="attr">componenet</span>: <span class="title class_">Home</span>,</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 三种形式</span></span><br><span class="line">    <span class="attr">props</span>:<span class="literal">true</span>,</span><br><span class="line">    <span class="attr">props</span>:&#123;<span class="attr">key</span>:<span class="string">&#x27;value&#x27;</span>&#125;,</span><br><span class="line">    <span class="attr">props</span>:<span class="function">(<span class="params">$route</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">id</span>: $route.<span class="property">query</span>.<span class="property">id</span>,</span><br><span class="line">            <span class="attr">title</span>: $route.<span class="property">query</span>.<span class="property">title</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="二、自定义事件"><a href="#二、自定义事件" class="headerlink" title="二、自定义事件"></a>二、自定义事件</h2><ul><li>适用子与父组件通信<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 两种事件绑定方式</span></span><br><span class="line">&lt;<span class="title class_">Child</span> @parentEvent=<span class="string">&#x27;eventFunc&#x27;</span> ref=<span class="string">&#x27;child&#x27;</span> /&gt;</span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">child</span>.$on(<span class="string">&#x27;parentEvent&#x27;</span>,<span class="variable language_">this</span>.<span class="property">eventFunc</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">child</span>.$once(<span class="string">&#x27;parentEvent&#x27;</span>,<span class="variable language_">this</span>.<span class="property">eventFunc</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 触发</span></span><br><span class="line"><span class="title function_">emitFunc</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.$emit(<span class="string">&#x27;parentEvent&#x27;</span>,params),</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 取消绑定</span></span><br><span class="line"><span class="title function_">unbindFunc</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.$off(<span class="string">&#x27;parentEvent&#x27;</span>)</span><br><span class="line">    <span class="variable language_">this</span>.$off([<span class="string">&#x27;parentEvent&#x27;</span>,<span class="string">&#x27;event2&#x27;</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="三、全局事件总线"><a href="#三、全局事件总线" class="headerlink" title="三、全局事件总线"></a>三、全局事件总线</h2><ul><li>任意组件间通信<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Vue原型链上绑定$bus</span></span><br><span class="line"><span class="title function_">beforeCreate</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$bus</span> = <span class="variable language_">this</span>;</span><br><span class="line">&#125;,</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 组件1事件绑定</span></span><br><span class="line"><span class="title function_">component1Func</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$bus</span>.$on(<span class="string">&#x27;event&#x27;</span>,<span class="variable language_">this</span>.<span class="property">func</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 取消绑定</span></span><br><span class="line"><span class="title function_">beforeDestroy</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$bus</span>.$off(<span class="string">&#x27;event&#x27;</span>,<span class="variable language_">this</span>.<span class="property">func</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 组件2事件触发</span></span><br><span class="line"><span class="title function_">component2Func</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$bus</span>.$emit(<span class="string">&#x27;event&#x27;</span>,params)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="四、pubsub-js"><a href="#四、pubsub-js" class="headerlink" title="四、pubsub-js"></a>四、pubsub-js</h2><ul><li>任意组件间通信<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pubsub <span class="keyword">from</span> <span class="string">&#x27;pubsub-js&#x27;</span></span><br><span class="line"><span class="comment">// 订阅与取消订阅</span></span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">pubId</span> = pubsub.<span class="title function_">subscribe</span>(<span class="string">&#x27;newsName&#x27;</span>,<span class="variable language_">this</span>.<span class="property">callbackFunc</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">beforeDestroy</span>(<span class="params"></span>)&#123;</span><br><span class="line">    pubsub.<span class="title function_">unsubscribe</span>(<span class="variable language_">this</span>.<span class="property">pubId</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 发布</span></span><br><span class="line"><span class="title function_">sendNewsFunc</span>(<span class="params"></span>)&#123;</span><br><span class="line">    pubsub.<span class="title function_">publish</span>(<span class="string">&#x27;newsName&#x27;</span>,params)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="五、Vuex"><a href="#五、Vuex" class="headerlink" title="五、Vuex"></a>五、Vuex</h2><ul><li>任意组件间通信</li></ul><p><code>store/index.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 模块化</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"><span class="keyword">import</span> user <span class="keyword">from</span> <span class="string">&#x27;./user.js&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">modules</span>: &#123;</span><br><span class="line">        user</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>store/user.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 处理业务逻辑 </span></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">    <span class="title function_">action1</span>(<span class="params">context,params</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> result = <span class="title function_">requestData</span>();</span><br><span class="line">        context.<span class="title function_">commit</span>(<span class="string">&#x27;MUTATIONS1&#x27;</span>,result.<span class="property">data</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 修改 state</span></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">    <span class="title class_">MUTATIONS1</span>(state,data)&#123;</span><br><span class="line">        state.<span class="property">data</span> = data</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 数据存储</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">    <span class="attr">data</span>:<span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// state 的计算返回</span></span><br><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line">    <span class="title function_">dataToUp</span>(<span class="params">state</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> state.<span class="property">data</span>.<span class="title function_">toUpperCase</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">namespaced</span>: <span class="literal">true</span>,</span><br><span class="line">    actions,</span><br><span class="line">    mutations,</span><br><span class="line">    state,</span><br><span class="line">    getters</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>组件中使用 <code>Home.vue</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 触发action/mutation</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispath</span>(<span class="string">&#x27;user/action1&#x27;</span>,params)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;user/MUTATIONS1&#x27;</span>,params)</span><br><span class="line">    <span class="comment">// 简化形式</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">action1</span>(params)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title class_">Mutation1</span>(params)</span><br><span class="line">&#125;</span><br><span class="line"><span class="attr">computed</span>:&#123;</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">user</span>.<span class="property">data</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">dataToUp</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">getters</span>[<span class="string">&#x27;user/dataToUp&#x27;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 简化形式 通过挂载到组件实例VC</span></span><br><span class="line">    ...<span class="title function_">mapState</span>(<span class="string">&#x27;user&#x27;</span>,[<span class="string">&#x27;data&#x27;</span>])</span><br><span class="line">    ...<span class="title function_">mapGetters</span>(<span class="string">&#x27;user&#x27;</span>,[<span class="string">&#x27;dataToUp&#x27;</span>])</span><br><span class="line">&#125;</span><br><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="comment">// 触发action/mutation 的简化形式 挂载到组件实例VC</span></span><br><span class="line">    ...<span class="title function_">mapActions</span>(<span class="string">&#x27;user&#x27;</span>,&#123;<span class="attr">action</span>:<span class="string">&#x27;action1&#x27;</span>&#125;),</span><br><span class="line">    ...<span class="title function_">mapMutations</span>(<span class="string">&#x27;user&#x27;</span>,&#123;<span class="title class_">Mutation1</span>:<span class="string">&#x27;MUTATIONS1&#x27;</span>&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="六、插槽"><a href="#六、插槽" class="headerlink" title="六、插槽"></a>六、插槽</h2><ul><li><p>父子组件通信(结构)</p></li><li><p>子组件结构不定，由父组件确定</p></li></ul><h3 id="默认插槽"><a href="#默认插槽" class="headerlink" title="默认插槽"></a>默认插槽</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// -- 子组件</span></span><br><span class="line">&#123;&#123;title&#125;&#125;</span><br><span class="line">&lt;slot&gt;定义插槽，插槽默认显示值&lt;/slot&gt;</span><br><span class="line"><span class="attr">props</span>:[<span class="string">&#x27;title&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// -- 父组件中 传数据给子组件</span></span><br><span class="line">&lt;<span class="title class_">Child</span> title=<span class="string">&#x27;美食&#x27;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;1.jpg&#x27;</span> /&gt;</span></span> <span class="comment">// 展示在slot插槽中</span></span><br><span class="line">&lt;/<span class="title class_">Child</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Child</span> <span class="attr">title</span>=<span class="string">&#x27;游戏&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(g,index) in games&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span>&#123;&#123;g&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">Child</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="具名插槽-：适用多个插槽时"><a href="#具名插槽-：适用多个插槽时" class="headerlink" title="具名插槽 ：适用多个插槽时"></a>具名插槽 ：适用多个插槽时</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// -- 子组件</span></span><br><span class="line">&#123;&#123;title&#125;&#125;</span><br><span class="line">&lt;slot name=<span class="string">&#x27;center&#x27;</span>&gt;默认值<span class="number">1</span>&lt;/slot&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&#x27;footer&#x27;</span>&gt;</span>默认值2<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 父组件</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Child</span> <span class="attr">title</span>=<span class="string">&#x27;游戏&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">slot</span>=<span class="string">&#x27;center&#x27;</span>&gt;</span> // 展示在center插槽</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(g,index) in games&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span>&#123;&#123;g&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">&#x27;footer&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">src</span>=<span class="string">&#x27;baidu.com&#x27;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">src</span>=<span class="string">&#x27;baidu.com&#x27;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    // 用template可以使用 v-slot:</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:footer</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">src</span>=<span class="string">&#x27;baidu.com&#x27;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">src</span>=<span class="string">&#x27;baidu.com&#x27;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">Child</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="作用域插槽：-子组件通过props回传数据给父组件"><a href="#作用域插槽：-子组件通过props回传数据给父组件" class="headerlink" title="作用域插槽： 子组件通过props回传数据给父组件"></a>作用域插槽： 子组件通过props回传数据给父组件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// -- 数据提供者子组件 结构由父组件确定</span></span><br><span class="line">&#123;&#123;title&#125;&#125;</span><br><span class="line">&lt;slot :games=<span class="string">&#x27;games&#x27;</span>&gt;默认内容&lt;/slot&gt;</span><br><span class="line"><span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">games</span>: [<span class="string">&#x27;game1&#x27;</span>,<span class="string">&#x27;game2&#x27;</span>,<span class="string">&#x27;game3&#x27;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// -- 使用者父组件 必须用template包裹 可以使用解构赋值 &#123;games&#125;</span></span><br><span class="line">&lt;template scope=<span class="string">&#x27;data&#x27;</span>&gt; </span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(g,index) in data.games&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span>&#123;&#123;g&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h2 id="通信其他相关"><a href="#通信其他相关" class="headerlink" title="通信其他相关"></a>通信其他相关</h2><h3 id="自定义事件与原生事件"><a href="#自定义事件与原生事件" class="headerlink" title="自定义事件与原生事件"></a>自定义事件与原生事件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// click为自定义事件</span></span><br><span class="line">&lt;<span class="title class_">Home</span> @click=<span class="string">&#x27;callback&#x27;</span> /&gt; </span><br><span class="line">    </span><br><span class="line"><span class="comment">// click为原生DOM事件，绑定在Home组件根元素</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Home</span> @<span class="attr">click.native</span>=<span class="string">&#x27;callback&#x27;</span> /&gt;</span></span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// :value结合@input实现v-model</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;text&#x27;</span> <span class="attr">:value</span>=<span class="string">&#x27;msg&#x27;</span> @<span class="attr">input</span>=<span class="string">&#x27;msg = $event.target.value&#x27;</span> /&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="父子组件数据同步"><a href="#父子组件数据同步" class="headerlink" title="父子组件数据同步"></a>父子组件数据同步</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// -- 父组件 :value为props @input为自定义事件 $event接收回调函数参数</span></span><br><span class="line">&lt;<span class="title class_">Child</span> :value=<span class="string">&#x27;msg&#x27;</span> @input=<span class="string">&#x27;msg = $event&#x27;</span> /&gt;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// -- 子组件</span></span><br><span class="line"><span class="attr">props</span>: [<span class="string">&#x27;value&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 原型DOM的value绑定props的value和原生事件</span></span><br><span class="line">&lt;input type=<span class="string">&#x27;text&#x27;</span> :value=<span class="string">&#x27;value&#x27;</span> @input=<span class="string">&#x27;$emit(&quot;input&quot;,$event.target.value)&#x27;</span> /&gt; </span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 效果同上</span></span><br><span class="line">&lt;<span class="title class_">Child</span> v-model=<span class="string">&#x27;msg&#x27;</span> /&gt;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// -- 子组件</span></span><br><span class="line"><span class="attr">props</span>: [<span class="string">&#x27;value&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 原型DOM的value绑定props的value 和原生事件</span></span><br><span class="line">&lt;input type=<span class="string">&#x27;text&#x27;</span> :value=<span class="string">&#x27;value&#x27;</span> @input=<span class="string">&#x27;$emit(&quot;input&quot;,$event.target.value)&#x27;</span> /&gt; </span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 效果同上</span></span><br><span class="line">&lt;<span class="title class_">Child</span> :money.<span class="property">sync</span>=<span class="string">&#x27;money&#x27;</span> /&gt;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 子组件</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;money&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&#x27;$emit(&quot;update:money&quot;,money-100)&#x27;</span> /&gt;</span></span></span><br><span class="line"><span class="attr">props</span>:[<span class="string">&#x27;money&#x27;</span>]</span><br></pre></td></tr></table></figure><h3 id="attrs与-listeners"><a href="#attrs与-listeners" class="headerlink" title="$attrs与$listeners"></a>$attrs与$listeners</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 组件属性在 $attrs与props互斥存在</span></span><br><span class="line"><span class="comment">// 绑定父组件传入的所有属性 $attrs打包除去props接收的属性</span></span><br><span class="line"><span class="comment">// $listeners 获取父组件给子组件传递的自定义事件</span></span><br><span class="line">&lt;<span class="title class_">Child</span> title=<span class="string">&#x27;标题&#x27;</span> type=<span class="string">&#x27;primary&#x27;</span> value=<span class="string">&#x27;value&#x27;</span> @click=<span class="string">&#x27;callbackfunc&#x27;</span> /&gt;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 子组件中v-bind=&#x27;$attrs&#x27;，将父组件传过来中除了props声明过的属性重新绑定到子组件</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">:title</span>=<span class="string">&#x27;title&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">v-bind</span>=<span class="string">&#x27;$attrs&#x27;</span> <span class="attr">v-on</span>=<span class="string">&#x27;$listeners&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line">&lt;/templte&gt;</span><br><span class="line"><span class="attr">props</span>:[<span class="string">&#x27;title&#x27;</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="children与-parent"><a href="#children与-parent" class="headerlink" title="$children与$parent"></a>$children与$parent</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取所有子组件实例</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$children</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">child</span>=&gt;</span>&#123;</span><br><span class="line">    child.<span class="property">money</span> -= <span class="number">100</span>;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取父组件实例</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$parent</span>.<span class="property">money</span> += <span class="number">100</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="混入mixin"><a href="#混入mixin" class="headerlink" title="混入mixin"></a>混入mixin</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 功能逻辑复用</span></span><br><span class="line"><span class="comment">// myMixin/index.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="comment">// 重复业务逻辑</span></span><br><span class="line">    <span class="attr">methods</span>:&#123;</span><br><span class="line">        <span class="title function_">giveMoney</span>(<span class="params">money</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">money</span> -= money</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">$parent</span>.<span class="property">money</span> += money</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// computed</span></span><br><span class="line">    <span class="comment">// mounted</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 组件中引入</span></span><br><span class="line"><span class="keyword">import</span> myMixin <span class="keyword">from</span> <span class="string">&#x27;myMixin/index.js&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;home&#x27;</span>,</span><br><span class="line">    <span class="attr">mixins</span>:[<span class="string">&#x27;myMixin&#x27;</span>],</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>)&#123;<span class="keyword">return</span>&#123;&#125;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自动化构建工具 Gulp</title>
      <link href="/posts/23Z648H.html"/>
      <url>/posts/23Z648H.html</url>
      
        <content type="html"><![CDATA[<h2 id="Gulp"><a href="#Gulp" class="headerlink" title="Gulp"></a>Gulp</h2><h3 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 安装</span></span><br><span class="line">npm i -g gulp</span><br><span class="line">npm i --save-dev gulp</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新建配置文件 package.json</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;test&quot;</span>,</span><br><span class="line">    <span class="string">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新建 gulp 任务文件 gulpfile.js</span></span><br><span class="line"><span class="keyword">const</span> gulp = <span class="built_in">require</span>(<span class="string">&#x27;gulp&#x27;</span>);</span><br><span class="line"><span class="comment">// 注册任务</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;taskName&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 配置任务</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 注册默认任务</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;default&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Gulp相关插件</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// gulp-concat (js/css) 文件合并</span></span><br><span class="line"><span class="comment">// gulp-uglify 压缩js文件</span></span><br><span class="line"><span class="comment">// gulp-rename 文件重命名</span></span><br><span class="line"><span class="comment">// gulp-less 编译 less</span></span><br><span class="line"><span class="comment">// gulp-clean-css 压缩css</span></span><br><span class="line"><span class="comment">// gulp-htmlmin 压缩html</span></span><br><span class="line"><span class="comment">// gulp-livereload 实时自动编译刷新</span></span><br><span class="line"><span class="comment">// gulp-connect  全自动项目构建</span></span><br><span class="line"><span class="comment">// open 打开指定链接</span></span><br></pre></td></tr></table></figure><h3 id="构建-JS-任务"><a href="#构建-JS-任务" class="headerlink" title="构建 JS 任务"></a>构建 JS 任务</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 安装相关插件</span></span><br><span class="line">npm i gulp-concat gulp-uglify gulp-rename --save-dev</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> concat = <span class="built_in">require</span>(<span class="string">&#x27;gulp-concat&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> uglify = <span class="built_in">require</span>(<span class="string">&#x27;gulp-uglify&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> rename = <span class="built_in">require</span>(<span class="string">&#x27;gulp-rename&#x27;</span>)</span><br><span class="line"><span class="comment">// 注册合并压缩 js 的任务</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;concatJs&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;  </span><br><span class="line">    <span class="keyword">return</span> gulp.<span class="title function_">src</span>(<span class="string">&#x27;src/js/*.js&#x27;</span>) <span class="comment">// 找到源文件读取到gulp内存 深层 src/js/**/*.js</span></span><br><span class="line">        .<span class="title function_">pipe</span>(<span class="title function_">concat</span>(<span class="string">&#x27;build.js&#x27;</span>))  <span class="comment">// 临时合并文件</span></span><br><span class="line">        .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;dist/js/&#x27;</span>)) <span class="comment">// 输出合并文件到本地</span></span><br><span class="line">        .<span class="title function_">pipe</span>(<span class="title function_">uglify</span>())  <span class="comment">// 压缩文件</span></span><br><span class="line">        .<span class="title function_">pipe</span>(<span class="title function_">rename</span>(&#123;<span class="attr">suffix</span>: <span class="string">&#x27;.min&#x27;</span>&#125;))  <span class="comment">// 重命名 可以直接传入 build.min.js 或者一个对象 &#123;suffix 后缀名&#125; </span></span><br><span class="line">        .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;dist/js/&#x27;</span>))  <span class="comment">// 输出压缩后的文件到本地</span></span><br><span class="line">        .<span class="title function_">pipe</span>(<span class="title function_">livereload</span>()) <span class="comment">// 配置热更新</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行任务命令</span></span><br><span class="line">gulp concatJs</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="构建-less-任务"><a href="#构建-less-任务" class="headerlink" title="构建 less 任务"></a>构建 less 任务</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 安装编译 压缩 less 的插件</span></span><br><span class="line">npm i gulp-less gulp-clean-css --save-dev</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> less = <span class="built_in">require</span>(<span class="string">&#x27;gulp-less&#x27;</span>)</span><br><span class="line"><span class="comment">// 注册转换less的任务</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;less&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.<span class="title function_">src</span>(<span class="string">&#x27;src/less/*.less&#x27;</span>) <span class="comment">// 获取less文件</span></span><br><span class="line">        .<span class="title function_">pipe</span>(<span class="title function_">less</span>())  <span class="comment">// 转换 less 文件</span></span><br><span class="line">        .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;src/css/&#x27;</span>)) <span class="comment">// 输出转换后的 css 文件</span></span><br><span class="line">        .<span class="title function_">pipe</span>(<span class="title function_">livereload</span>()) <span class="comment">// 配置热更新</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cssClean = <span class="built_in">require</span>(<span class="string">&#x27;gulp-clean-css&#x27;</span>)</span><br><span class="line"><span class="comment">// 注册合并压缩css文件</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;concatCss&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.<span class="title function_">src</span>(<span class="string">&#x27;src/css/*.css&#x27;</span>) <span class="comment">// 找到源文件</span></span><br><span class="line">        .<span class="title function_">pipe</span>(<span class="title function_">concat</span>(<span class="string">&#x27;build.css&#x27;</span>)) <span class="comment">// 合并 css</span></span><br><span class="line">        .<span class="title function_">pipe</span>(<span class="title function_">rename</span>(&#123;<span class="attr">suffix</span>: <span class="string">&#x27;.min&#x27;</span>&#125;)) <span class="comment">// 重命名</span></span><br><span class="line">        .<span class="title function_">pipe</span>(<span class="title function_">cssClean</span>(&#123;<span class="attr">compatibility</span>: <span class="string">&#x27;ie8&#x27;</span>&#125;)) <span class="comment">// 压缩 css 兼容ie8</span></span><br><span class="line">        .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;src/css/&#x27;</span>))  <span class="comment">// 输出</span></span><br><span class="line">        .<span class="title function_">pipe</span>(<span class="title function_">livereload</span>()) <span class="comment">// 配置热更新</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="压缩-html"><a href="#压缩-html" class="headerlink" title="压缩 html"></a>压缩 html</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 安装 引入</span></span><br><span class="line">npm i gulp-htmlmin --save-dev</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> htmlMin = <span class="built_in">require</span>(<span class="string">&#x27;gulp-htmlmin&#x27;</span>)</span><br><span class="line"><span class="comment">// 压缩 html 任务</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;html&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.<span class="title function_">src</span>(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line">        .<span class="title function_">pipe</span>(<span class="title function_">htmlMin</span>(&#123;<span class="attr">collapseWhitespace</span>: <span class="literal">true</span>&#125;))  <span class="comment">// 清除空格</span></span><br><span class="line">        .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;dist/&#x27;</span>))</span><br><span class="line">        .<span class="title function_">pipe</span>(<span class="title function_">livereload</span>()) <span class="comment">// 配置热更新</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="同步或异步构建全部任务"><a href="#同步或异步构建全部任务" class="headerlink" title="同步或异步构建全部任务"></a>同步或异步构建全部任务</h3><ul><li><code>gulp.series(&#39;a&#39;,&#39;b&#39;,&#39;c&#39;)</code>同步执行</li><li><code>gulp.parallel(&#39;d&#39;,&#39;e&#39;,&#39;f&#39;)</code>异步执行<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注册默认任务 执行全部 task</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;default&#x27;</span>, gulp.<span class="title function_">parallel</span>(gulp.<span class="title function_">series</span>(<span class="string">&#x27;concatJs&#x27;</span>, <span class="string">&#x27;less&#x27;</span>), <span class="string">&#x27;concatCss&#x27;</span>, <span class="function">(<span class="params">done</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;yes completed&quot;</span>)</span><br><span class="line">    <span class="title function_">done</span>();</span><br><span class="line">&#125;));</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h3 id="自动编译构建监听文件变化热更新"><a href="#自动编译构建监听文件变化热更新" class="headerlink" title="自动编译构建监听文件变化热更新"></a>自动编译构建监听文件变化热更新</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 安装 引入 相关插件</span></span><br><span class="line">npm i gulp-livereload --save-dev</span><br><span class="line"><span class="keyword">const</span> livereload = <span class="built_in">require</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自动编译热更新</span></span><br><span class="line"><span class="keyword">const</span> livereload = <span class="built_in">require</span>(<span class="string">&#x27;gulp-livereload&#x27;</span>)</span><br><span class="line"><span class="comment">// 注册监视任务</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;watch&#x27;</span>, gulp.<span class="title function_">series</span>(<span class="string">&#x27;default&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>)&#123;  </span><br><span class="line">    livereload.<span class="title function_">listen</span>();</span><br><span class="line">    gulp.<span class="title function_">watch</span>(<span class="string">&#x27;src/js/*.js&#x27;</span>, gulp.<span class="title function_">series</span>(<span class="string">&#x27;concatJs&#x27;</span>))</span><br><span class="line">    gulp.<span class="title function_">watch</span>(<span class="string">&#x27;src/css/*.css&#x27;</span>, gulp.<span class="title function_">series</span>(<span class="string">&#x27;concatCss&#x27;</span>));</span><br><span class="line"></span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开启监听命令</span></span><br><span class="line">gulp watch</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="全自动项目构建"><a href="#全自动项目构建" class="headerlink" title="全自动项目构建"></a>全自动项目构建</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">npm i gulp-connect --save-dev</span><br><span class="line"><span class="keyword">const</span> connect = <span class="built_in">require</span>(<span class="string">&#x27;gulp-connect&#x27;</span>);</span><br><span class="line"></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;server&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 配置服务器选项</span></span><br><span class="line">    connect.<span class="title function_">server</span>(&#123;</span><br><span class="line">        <span class="attr">root</span>: <span class="string">&#x27;dist/&#x27;</span>,</span><br><span class="line">        <span class="attr">livereload</span>: <span class="literal">true</span>, <span class="comment">// 实时刷新</span></span><br><span class="line">        <span class="attr">port</span>: <span class="number">5000</span>  <span class="comment">// 端口</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 安装open插件还可以自动打开指定链接</span></span><br><span class="line">    <span class="comment">// open(&#x27;http://localhost:5000/&#x27;)</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 需要在每个任务添加配置</span></span><br><span class="line">.<span class="title function_">pipe</span>(connect.<span class="title function_">reload</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行任务命令</span></span><br><span class="line">&gt; gulp server</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="打包加载-gulp-插件"><a href="#打包加载-gulp-插件" class="headerlink" title="打包加载 gulp 插件"></a>打包加载 gulp 插件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 安装</span></span><br><span class="line">npm i gulp-load-plugins</span><br><span class="line"><span class="keyword">const</span> $ = <span class="built_in">require</span>(<span class="string">&#x27;gulp-load-plugins&#x27;</span>)(); <span class="comment">// 返回一个对象</span></span><br><span class="line"><span class="comment">// 该对象包含所有使用的gulp插件</span></span><br><span class="line"><span class="comment">// 无需额外引入其他插件</span></span><br><span class="line"><span class="comment">// 直接使用</span></span><br><span class="line">$.<span class="title function_">concat</span>()  <span class="comment">// =&gt; gulp-concat    </span></span><br><span class="line">$.<span class="title function_">uglify</span>()  <span class="comment">// =&gt; gulp-uglify</span></span><br><span class="line">$.<span class="title function_">rename</span>()  <span class="comment">// =&gt; gulp-rename</span></span><br><span class="line">$.<span class="title function_">less</span>()  <span class="comment">// =&gt; gulp-less</span></span><br><span class="line">$.<span class="title function_">cleanCss</span>()  <span class="comment">// =&gt; gulp-clean-css</span></span><br><span class="line">$.<span class="title function_">htmlmin</span>()  <span class="comment">// =&gt; gulp-htmlmin</span></span><br><span class="line">$.<span class="title function_">livereload</span>()  <span class="comment">// =&gt; gulp-livereload</span></span><br><span class="line">$.<span class="title function_">connect</span>()  <span class="comment">// =&gt; gulp-connect  </span></span><br><span class="line">$.<span class="title function_">open</span>()  <span class="comment">// =&gt; </span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gulp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mongodb的基本使用</title>
      <link href="/posts/TE39B5.html"/>
      <url>/posts/TE39B5.html</url>
      
        <content type="html"><![CDATA[<h2 id="安装："><a href="#安装：" class="headerlink" title="安装："></a>安装：</h2><ul><li><p><a href="https://www.mongodb.com/try/download/community">官网</a></p></li><li><p>启动mongodb服务器：<code>mongod</code></p></li><li><p>修改默认端口：<code>mongod --port 新的端口号</code></p><ul><li>mongodb默认的端口：27017</li></ul></li><li><p>设置mongodb数据库的存储路径：<code>mongod --dbpath 路径  </code></p></li><li><p>:star: 连接mongodb数据库：<code>mongo</code></p></li></ul><h2 id="三大基本概念："><a href="#三大基本概念：" class="headerlink" title="三大基本概念："></a>三大基本概念：</h2><ul><li><p>数据库 database</p></li><li><p>集合(数组)  collection</p><ul><li>类似与SQL中的数据表，本质上是一个<strong>数组</strong>，里面包含看多个文档对象，[{},{},{}]</li></ul></li><li><p>文档对象 document</p><ul><li>类似与SQL中的记录，一个文档<strong>对象</strong>{}就是一条记录</li></ul></li><li><p>一个数据库由多个集合构成，一个集合包含多个文档对象。</p></li></ul><h2 id="基本使用："><a href="#基本使用：" class="headerlink" title="基本使用："></a>基本使用：</h2><ul><li>show dbs 或show databases<ul><li>查看所有的数据库</li></ul></li><li>use xxx<ul><li>切换到指定的数据库</li></ul></li><li>db<ul><li>查看当前操作的数据库</li></ul></li><li>show collections<ul><li>查看当前数据库中所有的集合</li></ul></li></ul><h2 id="数据库的CRUD操作"><a href="#数据库的CRUD操作" class="headerlink" title="数据库的CRUD操作:"></a>数据库的CRUD操作:</h2><h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><ul><li>插入一条数据<ul><li>db.collectionName.insertOne( {name:’liu’} )<ul><li>db表示的是当前操作的数据库</li><li>collectionName表示操作的集合，若没有，则会自动创建</li><li>插入的文档如果没有手动提供_id属性，则会自动创建一个</li></ul></li></ul></li><li>插入多条数据<ul><li>db.collectionName.insertMany( [ {name:’liu5’} , {name:’liu6’} ] ) <ul><li>需要用数组包起来</li></ul></li></ul></li><li>万能API：db.collectionName.insert()</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">添加两万条数据</span></span><br><span class="line">for(var i=0;i&lt;20000;i++)&#123;</span><br><span class="line">db.users.insert(&#123;username:&#x27;liu&#x27;+i&#125;) #需要执行20000次数据库的添加操作</span><br><span class="line">&#125;</span><br><span class="line">db.users.find().count()//20000</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">优化：</span></span><br><span class="line">var arr=[];</span><br><span class="line">for(var i=0;i&lt;20000;i++)&#123;</span><br><span class="line">arr.push(&#123;username:&#x27;liu&#x27;+i&#125;)</span><br><span class="line">&#125;</span><br><span class="line">db.user.insert(arr) #只需执行1次数据库的添加操作，可以节约很多时间</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h3><ul><li><p>db.collectionName.find() 或db.collectionName.find({}) </p><ul><li>查询集合所有的文档，即所有的数据。</li><li>查询到的是整个<strong>数组</strong>对象。在最外层是有一个对象包裹起来的。</li><li>db.collectionName.count()或db.collectionName.length()   统计文档个数</li></ul></li><li><p>db.collectionName.find({_id:222}) </p><ul><li>条件查询。注意：结果返回的是一个<strong>数组</strong></li></ul></li><li><p>db.collectionName.findOne() 返回的是查询到的对象数组中的第一个对象</p><ul><li>注意：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.students.find(&#123;_id:222&#125;).name  //错误</span><br><span class="line">&gt; db.students.findOne(&#123;_id:222&#125;).name //正确</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1.mongodb支持直接通过内嵌文档的属性值进行查询</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">什么是内嵌文档：hobby就属于内嵌文档</span></span><br><span class="line">&#123;</span><br><span class="line">name:&#x27;liu&#x27;,</span><br><span class="line">hobby:&#123;</span><br><span class="line">movies:[&#x27;movie1&#x27;,&#x27;movie2&#x27;],</span><br><span class="line">cities:[&#x27;zhuhai&#x27;,&#x27;chengdu&#x27;]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">db.users.find(&#123;hobby.movies:&#x27;movie1&#x27;&#125;) //错误</span><br><span class="line">db.users.find(&#123;&quot;hobby.movies&quot;:&#x27;movie1&#x27;&#125;)//此时查询的属性名必须加上引号</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">2.查询操作符的使用</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">比较操作符</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">gt 大于</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">gte 大于等于</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">lt 小于</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">lte 小于等于</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">ne 不等于</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">eq 等于的另一种写法</span></span><br><span class="line"></span><br><span class="line">db.users.find(&#123;num:&#123;$gt:200&#125;&#125;) #大于200</span><br><span class="line">db.users.find(&#123;num:&#123;$gt:200,$lt:300&#125;&#125;) #大于200小于300</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">or 或者</span></span><br><span class="line">db.users.find(</span><br><span class="line">    &#123;</span><br><span class="line">        $or:[</span><br><span class="line">            &#123;num:&#123;$gt:300&#125;&#125;,</span><br><span class="line">            &#123;num:&#123;$lt:200&#125;&#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">) #大于300或小于200</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">3.分页查询</span></span><br><span class="line">db.users.find().skip(页码-1 * 每页显示的条数).limit(每页显示的条数)</span><br><span class="line"></span><br><span class="line">db.users.find().limit(10) #前10条数据</span><br><span class="line">db.users.find().skip(50).limit(10) #跳过前50条数据，即查询的是第61-70条数据，即第6页的数据</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">4.排序</span></span><br><span class="line">db.emp.find().sort(&#123;sal:1&#125;) #1表示升序排列，-1表示降序排列</span><br><span class="line">db.emp.find().sort(&#123;sal:1,empno:-1&#125;) #先按照sal升序排列，如果遇到相同的sal，则按empno降序排列</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">注意：skip,<span class="built_in">limit</span>,<span class="built_in">sort</span>可以以任意的顺序调用，最终的结果都是先调<span class="built_in">sort</span>，再调skip，最后调<span class="built_in">limit</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">5.设置查询结果的投影，即只过滤出自己想要的字段</span></span><br><span class="line">db.emp.find(&#123;&#125;,&#123;ename:1,_id:0&#125;) #在匹配到的文档中只显示ename字段</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1.替换整个文档</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">db.collectionName.update(condiction,newDocument)</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">条件，新文档对象</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">db.students.update(&#123;_id:<span class="string">&#x27;222&#x27;</span>&#125;,&#123;name:<span class="string">&#x27;kang&#x27;</span>&#125;)</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2.修改对应的属性，需要用到修改操作符，比如<span class="variable">$set</span>,<span class="variable">$unset</span>,<span class="variable">$push</span>,<span class="variable">$addToSet</span></span></span><br><span class="line">db.collectionName.update(</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查询条件</span></span><br><span class="line">&#123;_id:222&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">修改对应的属性</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash"><span class="built_in">set</span>:&#123;</span> </span><br><span class="line">name:&#x27;kang2&#x27;,</span><br><span class="line">age:21</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">删除对应的属性</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash"><span class="built_in">unset</span>:&#123;</span></span><br><span class="line">gender:1 //这里的1可以随便改为其他的值，无影响</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3.update默认与updateOne()等效，即对于匹配到的文档只更改其中的第一个</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">updateMany()可以用来更改匹配到的所有文档</span></span><br><span class="line">db.students.updateMany(</span><br><span class="line">&#123;name:&#x27;liu&#x27;&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash"><span class="built_in">set</span>:&#123;</span></span><br><span class="line">age:21,</span><br><span class="line">gender:222</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">4.向数组中添加数据</span></span><br><span class="line">db.users.update(&#123;username:&#x27;liu&#x27;&#125;,&#123;$push:&#123;&quot;hobby.movies&quot;:&#x27;movie4&#x27;&#125;&#125;)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">如果数据已经存在，则不会添加</span></span><br><span class="line">db.users.update(&#123;username:&#x27;liu&#x27;&#125;,&#123;$addToSet:&#123;&quot;hobby.movies&quot;:&#x27;movie4&#x27;&#125;&#125;)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">5.自增自减操作符<span class="variable">$inc</span></span></span><br><span class="line">&#123;$inc:&#123;num:100&#125;&#125; #让num自增100</span><br><span class="line">&#123;$inc:&#123;num:-100&#125;&#125; #让num自减100</span><br><span class="line">db.emp.updateMany(&#123;sal:&#123;$lt:1000&#125;&#125;,&#123;$inc:&#123;sal:400&#125;&#125;) #给工资低于1000的员工增加400的工资</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1. db.collectionName.remove()</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">remove默认会删除所有匹配的文档。相当于deleteMany()</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">remove可以加第二个参数，表示只删除匹配到的第一个文档。此时相当于deleteOne()</span></span><br><span class="line">db.students.remove(&#123;name:&#x27;liu&#x27;,true&#125;)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2. db.collectionName.deleteOne()</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3. db.collectionName.deleteMany()</span></span><br><span class="line">db.students.deleteOne(&#123;name:&#x27;liu&#x27;&#125;)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">4. 删除所有数据：db.students.remove(&#123;&#125;)----性能较差，内部是在一条一条的删除文档。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可直接通过db.students.drop()删除整个集合来提高效率。</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">5.删除集合</span></span><br><span class="line">db.collection.drop()</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">6.删除数据库</span></span><br><span class="line">db.dropDatabase()</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">7.注意：删除某一个文档的属性，应该用update，remove以及delete适合删除的是整个文档</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">8.当删除的条件为内嵌的属性时：</span></span><br><span class="line">db.users.remove(&#123;&quot;hobby.movies&quot;:&#x27;movie3&#x27;&#125;)</span><br></pre></td></tr></table></figure><h2 id="文档之间的关系："><a href="#文档之间的关系：" class="headerlink" title="文档之间的关系："></a>文档之间的关系：</h2><ul><li><p>一对一</p></li><li><p>一对多</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">用户与订单：</span></span><br><span class="line">db.users.insert([</span><br><span class="line">&#123;_id:100,username:&#x27;liu1&#x27;&#125;,</span><br><span class="line">&#123;_id:101,username:&#x27;liu2&#x27;&#125;</span><br><span class="line">])</span><br><span class="line">db.orders.insert([</span><br><span class="line">&#123;list:[&#x27;apple&#x27;,&#x27;banana&#x27;],user_id:100&#125;,</span><br><span class="line">&#123;list:[&#x27;apple&#x27;,&#x27;banana2&#x27;],user_id:100&#125;,</span><br><span class="line">&#123;list:[&#x27;apple&#x27;],user_id:101&#125;</span><br><span class="line">])</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查询liu1的所有订单：</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1.首先获取liu1的<span class="built_in">id</span>:</span> </span><br><span class="line">var user_id = db.users.findOne(&#123;name:&#x27;liu1&#x27;&#125;)._id;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2.根据<span class="built_in">id</span>从订单集合中查询对应的订单：</span> </span><br><span class="line">db.orders.find(&#123;user_id:user_id&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>多对多</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">老师与学生</span></span><br><span class="line">db.teachers.insert([</span><br><span class="line">    &#123;</span><br><span class="line">        _id:100,</span><br><span class="line">        name:&#x27;liu1&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        _id:101,</span><br><span class="line">        name:&#x27;liu2&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">    _id:102,</span><br><span class="line">    name:&#x27;liu3&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">db.students.insert([</span><br><span class="line">&#123;</span><br><span class="line">_id:1000,</span><br><span class="line">name:&#x27;xiao&#x27;,</span><br><span class="line">tech_ids:[100,101]</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">_id:1001,</span><br><span class="line">name:&#x27;xiao2&#x27;,</span><br><span class="line">tech_ids:[102]</span><br><span class="line">&#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure><h2 id="mongoose"><a href="#mongoose" class="headerlink" title="mongoose:"></a>mongoose:</h2><h3 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h3><ul><li><p>1.mongoose是nodejs中的专门用于操作mongodb数据库的js库</p></li><li><p><strong>2.mongoose中的对象：</strong></p><ul><li>Schema  模式对象（用于约束文档的结构）</li><li>Model  模型对象（即mongodb中的集合）</li><li>Document  文档对象（即mongodb中的文档）</li></ul></li></ul><h3 id="安装：-1"><a href="#安装：-1" class="headerlink" title="安装："></a>安装：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -s mongoose</span><br></pre></td></tr></table></figure><h3 id="连接数据库："><a href="#连接数据库：" class="headerlink" title="连接数据库："></a>连接数据库：</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.引入mongoose</span></span><br><span class="line"><span class="keyword">const</span> mongooes = <span class="built_in">require</span>(<span class="string">&quot;mongoose&quot;</span>);</span><br><span class="line"><span class="comment">// 2.连接mongodb数据库</span></span><br><span class="line">mongooes.<span class="title function_">connect</span>(<span class="string">&quot;mongodb://localhost/users&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">useNewUrlParser</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">useUnifiedTopology</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.监听mongodb数据库的连接状态</span></span><br><span class="line"><span class="comment">// 绑定数据库连接成功事件</span></span><br><span class="line">mongooes.<span class="property">connection</span>.<span class="title function_">once</span>(<span class="string">&quot;open&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;连接成功&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 绑定数据库连接失败事件</span></span><br><span class="line">mongooes.<span class="property">connection</span>.<span class="title function_">once</span>(<span class="string">&quot;close&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;数据库连接已经断开&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.断开数据库连接(一般不用)</span></span><br><span class="line">mongooes.<span class="title function_">disconnect</span>();</span><br></pre></td></tr></table></figure><h3 id="创建模式对象和模型对象："><a href="#创建模式对象和模型对象：" class="headerlink" title="创建模式对象和模型对象："></a>创建模式对象和模型对象：</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Schema</span>=mongooes.<span class="property">schema</span>;</span><br><span class="line"><span class="comment">//创建模式对象</span></span><br><span class="line"><span class="keyword">const</span> stuSchema=<span class="keyword">new</span> <span class="title class_">Schema</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="title class_">Number</span>,</span><br><span class="line">    <span class="attr">gender</span>:&#123;</span><br><span class="line">        <span class="attr">type</span>:<span class="title class_">String</span>,</span><br><span class="line">        <span class="attr">default</span>:<span class="string">&#x27;female&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">address</span>:<span class="title class_">String</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//创建模型对象</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">StuModel</span>=stuSchema.<span class="title function_">model</span>(<span class="string">&quot;student&quot;</span>,stuSchema); <span class="comment">//第一个参数表示创建的集合的名称，第二个参数表示利用的模式对象</span></span><br></pre></td></tr></table></figure><h3 id="利用模型对象进行增删查改操作："><a href="#利用模型对象进行增删查改操作：" class="headerlink" title="利用模型对象进行增删查改操作："></a>利用模型对象进行增删查改操作：</h3><h4 id="添加操作："><a href="#添加操作：" class="headerlink" title="添加操作："></a>添加操作：</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">UserModel</span>.<span class="title function_">create</span>(&#123; <span class="attr">user_id</span>: <span class="number">100</span>, <span class="attr">name</span>: <span class="string">&quot;liu1&quot;</span> &#125;, <span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;插入成功&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> data = [</span><br><span class="line">  &#123; <span class="attr">user_id</span>: <span class="number">101</span>, <span class="attr">name</span>: <span class="string">&quot;liu2&quot;</span>, <span class="attr">age</span>: <span class="number">22</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">user_id</span>: <span class="number">102</span>, <span class="attr">name</span>: <span class="string">&quot;liu3&quot;</span> &#125;,</span><br><span class="line">];</span><br><span class="line"><span class="title class_">UserModel</span>.<span class="title function_">create</span>(data, <span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>[<span class="number">1</span>]); <span class="comment">//第二个值表示的是所添加的文档对象,是一个数组</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="查询操作："><a href="#查询操作：" class="headerlink" title="查询操作："></a>查询操作：</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">    查询:</span></span><br><span class="line"><span class="comment">    model.find(conditions,[projection],[options],callback)</span></span><br><span class="line"><span class="comment">    conditions:查询的条件 </span></span><br><span class="line"><span class="comment">    projection:投影  &#123; name: 1, gender: 1, _id: 0 &#125; 或 &#x27;name gender -_id&#x27;</span></span><br><span class="line"><span class="comment">    options:查询选项  &#123; skip: xx, limit: xx &#125;   </span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">    model.findOne(...)</span></span><br><span class="line"><span class="comment">    model.findById(...)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    model.countDocuments(conditions,callback) 查询文档的数量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">UserModel</span>.<span class="title function_">find</span>(&#123;&#125;, <span class="keyword">function</span> (<span class="params">err, data</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="title class_">UserModel</span>.<span class="title function_">find</span>(</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="regexp">/liu/i</span> &#125;,</span><br><span class="line">  <span class="string">&quot;name gender -_id&quot;</span>,</span><br><span class="line">  &#123; <span class="attr">skip</span>: <span class="number">2</span>, <span class="attr">limit</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  <span class="keyword">function</span> (<span class="params">err, data</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data); <span class="comment">//返回的是一个文档对象数组</span></span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="title class_">UserModel</span>.<span class="title function_">findById</span>(<span class="string">&quot;5f9fbfba14319e492c0f5bc4&quot;</span>, <span class="keyword">function</span> (<span class="params">err, data</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data <span class="keyword">instanceof</span> <span class="title class_">UserModel</span>); <span class="comment">//true 返回的文档对象属于模型对象（即集合）的实例对象</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title class_">UserModel</span>.<span class="title function_">countDocuments</span>(&#123;&#125;, <span class="keyword">function</span> (<span class="params">err, data</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="修改操作："><a href="#修改操作：" class="headerlink" title="修改操作："></a>修改操作：</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 修改：</span></span><br><span class="line"><span class="comment">    model.update(conditions,[doc],[options],callback)</span></span><br><span class="line"><span class="comment">        doc:修改后的文档对象</span></span><br><span class="line"><span class="comment">    model.updateMany(...)</span></span><br><span class="line"><span class="comment">    model.uodateOne(...)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="title class_">UserModel</span>.<span class="title function_">updateOne</span>(&#123; <span class="attr">name</span>: <span class="string">&quot;liu1&quot;</span> &#125;, &#123; <span class="attr">$set</span>: &#123; <span class="attr">age</span>: <span class="number">22</span> &#125; &#125;, <span class="keyword">function</span> (<span class="params"></span></span><br><span class="line"><span class="params">  err,</span></span><br><span class="line"><span class="params">  data</span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;修改成功&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title class_">UserModel</span>.<span class="title function_">find</span>(&#123; <span class="attr">name</span>: <span class="string">&quot;liu1&quot;</span> &#125;, <span class="keyword">function</span> (<span class="params">err, data</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="删除操作："><a href="#删除操作：" class="headerlink" title="删除操作："></a>删除操作：</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">删除：</span></span><br><span class="line"><span class="comment">model.remove(conditions,callback)</span></span><br><span class="line"><span class="comment">model.deleteOne(...)</span></span><br><span class="line"><span class="comment">model.deleteMany(...)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="title class_">UserModel</span>.<span class="title function_">remove</span>(</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;liu2&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">function</span> (<span class="params">err, data</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;删除成功&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"><span class="title class_">UserModel</span>.<span class="title function_">find</span>(&#123;&#125;, <span class="keyword">function</span> (<span class="params">err, data</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="模块化处理："><a href="#模块化处理：" class="headerlink" title="模块化处理："></a>模块化处理：</h3><ul><li><p>1.单独创建一个数据库连接文件dbconncet.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mongooes = <span class="built_in">require</span>(<span class="string">&quot;mongoose&quot;</span>);</span><br><span class="line">mongooes.<span class="title function_">connect</span>(<span class="string">&quot;mongodb://localhost/mongooes_test&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">useNewUrlParser</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">useUnifiedTopology</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;);</span><br><span class="line">mongooes.<span class="property">connection</span>.<span class="title function_">once</span>(<span class="string">&quot;open&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;连接成功&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>2.为每一个集合创建一个模型对象文件xxxModel.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mongooes = <span class="built_in">require</span>(<span class="string">&quot;mongoose&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Schema</span> = mongooes.<span class="property">Schema</span>;</span><br><span class="line"><span class="keyword">const</span> userSchema = <span class="keyword">new</span> <span class="title class_">Schema</span>(&#123;</span><br><span class="line">  <span class="attr">user_id</span>: <span class="title class_">String</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="title class_">String</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="title class_">Number</span>,</span><br><span class="line">  <span class="attr">gender</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">Number</span>,</span><br><span class="line">    <span class="attr">default</span>: <span class="number">0</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">UserModel</span> = mongooes.<span class="title function_">model</span>(<span class="string">&quot;user&quot;</span>, userSchema);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">UserModel</span>;</span><br></pre></td></tr></table></figure></li><li><p>3.在最终的文件index.js中引入数据库连接文件和创建模型的文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mongooes = <span class="built_in">require</span>(<span class="string">&quot;./dbconncet&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">PostModel</span> = <span class="built_in">require</span>(<span class="string">&quot;./models/postModel&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">PostModel</span>.<span class="title function_">findOne</span>(&#123;&#125;, <span class="keyword">function</span> (<span class="params">err, data</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mongodb </tag>
            
            <tag> mongoose </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS3基础</title>
      <link href="/posts/7E7FHF.html"/>
      <url>/posts/7E7FHF.html</url>
      
        <content type="html"><![CDATA[<h2 id="过渡动画转换"><a href="#过渡动画转换" class="headerlink" title="过渡动画转换"></a>过渡动画转换</h2><ul><li><p>transition: 2s ease 1s(延迟); 过渡</p><ul><li>transition-property: width, height &#x2F;all; 过渡属性</li><li>transition-duration: 2s, 1s &#x2F;2000ms; 持续时间</li><li>transition-timing-function: ease慢快慢&#x2F;linear匀速&#x2F;ease-in加速运动&#x2F;ease-out减速运动&#x2F;ease-in-out先加速后减速; 过渡时序函数</li><li>transition-timing-function: cubic-bezier(.24,.95,.82,-0.88)贝塞尔曲线; 过渡时序函数</li><li>transition-timing-function: steps(2, end&#x2F;start)分两步，时间开始或者结束时执行一步</li><li>transition-delay: 过渡效果的延迟进行，等待一段时间后在执行动画</li></ul></li><li><p>animate: test; 动画</p><ul><li>animate-duration: 2s; 网页刷新就执行持续时间2s</li><li>animate-delay</li><li>animate-timing-function</li><li>animate-iteration-count: 3&#x2F;infinite无限; 动画执行次数</li><li>animate-direction: normal&#x2F;reverse相反&#x2F;alternate设置重复执行时from-to-from交替始末位置运动; 动画执行方向</li><li>animate-play-state: running开始&#x2F;paused暂停; 动画执行状态</li><li>animate-fill-mode: none默认动画结束回到初始位置&#x2F;forwards结束回到结束位置&#x2F;backwards动画开启延时等待时元素立即处于from的状态&#x2F;both; 动画填充模式</li><li>声明动画 test:<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> test &#123;</span><br><span class="line">  <span class="comment">/* from 开始位置 */</span></span><br><span class="line">  <span class="selector-tag">from</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">0px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/* to结束位置 */</span></span><br><span class="line">  <span class="selector-tag">to</span>&#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">700px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>transform 转换</p><ul><li>translateX(100px)&#x2F;translateY()&#x2F;translateZ(); 相对自身平移，不会脱离文档流，先设置视距perspective(800px) 再设置translateX&#x2F;Y&#x2F;Z()<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box1</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">perspective</span>(<span class="number">800px</span>) <span class="built_in">translateZ</span>(<span class="number">100px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>宽高被内容撑开的元素居中效果设置：<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>:absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">50%</span>) <span class="built_in">translateY</span>(-<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li>rotateX(turn圈)&#x2F;rotateY()&#x2F;rotateZ(45deg): 沿着某个轴旋转，也是先设置perspective视距在设置旋转<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box1</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">perspective</span>(<span class="number">800px</span>) <span class="built_in">translateZ</span>(<span class="number">400px</span>) <span class="built_in">rotateY</span>(<span class="number">180deg</span>); 先靠近<span class="number">400px</span>再绕Y旋转<span class="number">180</span>度。</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>backface-visibility: hidden&#x2F;visible; 当元素沿Y旋转180deg时是否选择显示背面</li><li>transform-style: preserve-3d; 当元素想展示3d效果时开启</li><li>transform: scaleX(2)水平缩放&#x2F;scaleY()垂直缩放&#x2F;scale()双向缩放; 放大缩小效果</li><li>transform-origin: 0 0; 变形原点</li></ul></li></ul><h2 id="flex基础"><a href="#flex基础" class="headerlink" title="flex基础"></a>flex基础</h2><h3 id="弹性容器"><a href="#弹性容器" class="headerlink" title="弹性容器"></a>弹性容器</h3><ul><li>display: flex; 开启弹性容器</li><li>flex-direction: row&#x2F;row-reverse&#x2F;column&#x2F;column-reverse元素排列方式（主轴）</li><li>flex-wrap: nowrap默认不换行&#x2F;wrap&#x2F;wrap-reverse辅轴反方向换行; 弹性子元素是否换行</li><li>flex: row wrap; 排列方式和换行方式简写</li><li>justify-content: 主轴空白空间分配<ul><li>flex-start</li><li>flex-end</li><li>center</li><li>space-around空白平均分配到元素的两侧</li><li>space-evenly空白平均分配到元素单侧</li><li>space-between空白平均分配到元素中间（盒子两侧无空白）;</li></ul></li><li>align-item: 弹性子元素在辅轴上如何对齐<ul><li>stretch; 拉伸所有元素辅轴长度一致</li><li>flex-start; 元素不拉伸沿着辅轴起始边上对齐 长度被内容撑开</li><li>flex-end; 元素不拉伸沿着辅轴终边上对齐 长度被内容撑开</li><li>center; 元素在辅轴居中对齐</li><li>baseline; 沿着文字基线对齐</li></ul></li><li>align-content: 辅轴的空白空间分配（似justify-content）<ul><li>flex-start&#x2F;flex-end&#x2F;center&#x2F;space-around&#x2F;space-evenly&#x2F;space-between</li></ul></li></ul><h3 id="弹性元素"><a href="#弹性元素" class="headerlink" title="弹性元素"></a>弹性元素</h3><ul><li>flex-grow: 0; 弹性子元素的伸展系数</li><li>flex-shrink: 1; 弹性子元素收缩系数，0为收缩</li><li>flex-basis: auto默认参考width; 弹性元素的主轴上的基础长度</li><li>flex: 默认值initial(0 1 auto)&#x2F;auto（1 1 auto）&#x2F;none（0 0 auto）; 伸展 收缩 基础长度简写，</li><li>align-self: 覆盖align-item为单独一个元素设置辅轴上的对齐方式</li><li>order: 1&#x2F;2&#x2F;3…; 指定每个元素的排列顺序</li></ul><h2 id="移动端适配"><a href="#移动端适配" class="headerlink" title="移动端适配"></a>移动端适配</h2><ul><li><p>使视口和移动端设备有完美的像素比</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用vw（viewport width）视口宽度作为像素单位</p><ul><li>设计图(width&#x3D;750px) &lt;&#x3D;&gt; 视口(width&#x3D;100vw)  &#x3D;&#x3D;&#x3D;&gt;&gt; 0.13333..vw &#x3D; 1px</li><li>1125px &lt;&#x3D;&gt; 10vw  &#x3D;&#x3D;&gt;&gt; 0.08888..vw &#x3D; 1px</li><li>vw与rem结合<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">  <span class="comment">/*设计图750px */</span></span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">13.33vw</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">   <span class="comment">/* 宽度200px */</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">2rem</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="媒体查询"><a href="#媒体查询" class="headerlink" title="媒体查询"></a>媒体查询</h2><p>为不同设备设置不同样式</p><ul><li><p>类型：all 所有设备&#x2F; print 打印设备&#x2F; screen 带屏幕设备&#x2F; speech 屏幕阅读器</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@media</span> print, screen &#123;</span><br><span class="line">  <span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#bfa</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>为不同范围视口宽度设定样式</p><ul><li>min-width 视口大于min-width指定值生效</li><li>max-width 视口小于max-width指定值生效<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@media</span> screen (<span class="attribute">min-width</span>: <span class="number">500px</span>) <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">700px</span>)&#123;</span><br><span class="line">  <span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#bfa</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> css3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>less基础</title>
      <link href="/posts/18E6J05.html"/>
      <url>/posts/18E6J05.html</url>
      
        <content type="html"><![CDATA[<h2 id="less基础"><a href="#less基础" class="headerlink" title="less基础"></a>less基础</h2><h3 id="层级样式和单行注释"><a href="#层级样式和单行注释" class="headerlink" title="层级样式和单行注释"></a>层级样式和单行注释</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="comment">// 单行注释 不会解析到css</span></span><br><span class="line">    <span class="comment">/* 多行注释会解析到css */</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="selector-tag">div</span> &#123;</span><br><span class="line">        <span class="attribute">color</span>: red;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &gt;<span class="selector-class">.box1</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 外层父元素 body:hover .box2</span></span><br><span class="line">    <span class="selector-tag">&amp;</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">        <span class="attribute">color</span>: orange;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="less中定义使用变量"><a href="#less中定义使用变量" class="headerlink" title="less中定义使用变量"></a>less中定义使用变量</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义变量</span></span><br><span class="line"><span class="variable">@value:</span> <span class="number">100px</span>;</span><br><span class="line"><span class="variable">@cc:</span> box2;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用变量</span></span><br><span class="line"><span class="comment">// 作为属性 @变量名</span></span><br><span class="line"><span class="selector-class">.box1</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="variable">@value</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 作为类名 @(变量名) @&#123;变量名&#125;</span></span><br><span class="line">.@(cc) &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="variable">@a</span>;</span><br><span class="line">    <span class="attribute">background-image</span>: url(<span class="string">&quot;@&#123;cc&#125;/1.png&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引用属性</span></span><br><span class="line"><span class="selector-class">.box2</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: $width;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="继承extend"><a href="#继承extend" class="headerlink" title="继承extend"></a>继承extend</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.p1</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 继承p1的并扩展p2</span></span><br><span class="line"><span class="selector-class">.p2</span>:<span class="selector-tag">extend</span>(.p1) &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="混合mixin"><a href="#混合mixin" class="headerlink" title="混合mixin"></a>混合mixin</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.p1</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 引用 p1的属性</span></span><br><span class="line"><span class="selector-class">.p2</span> &#123;</span><br><span class="line">    <span class="selector-class">.p1</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建混合"><a href="#创建混合" class="headerlink" title="创建混合"></a>创建混合</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义 （不会被解析到css）</span></span><br><span class="line"><span class="selector-class">.p4</span>()&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 实例</span></span><br><span class="line"><span class="selector-class">.p5</span> &#123;</span><br><span class="line">    <span class="selector-class">.p4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="混合函数"><a href="#混合函数" class="headerlink" title="混合函数"></a>混合函数</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建混合函数</span></span><br><span class="line"><span class="selector-class">.test</span>(<span class="variable">@w</span>,<span class="variable">@h</span>) &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="variable">@w</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="variable">@h</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#cba</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="selector-class">.test</span>(<span class="number">200px</span>,<span class="number">100px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 参数默认值</span></span><br><span class="line"><span class="selector-class">.test</span>(<span class="variable">@w</span>:<span class="number">200px</span>, <span class="variable">@h</span>:<span class="number">200px</span>) &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="variable">@w</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="variable">@h</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#cba</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="颜色平均值"><a href="#颜色平均值" class="headerlink" title="颜色平均值"></a>颜色平均值</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">average</span>(red, yellow);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="颜色变深"><a href="#颜色变深" class="headerlink" title="颜色变深"></a>颜色变深</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">darken</span>(<span class="number">#bfa</span>, <span class="number">20%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数值运算"><a href="#数值运算" class="headerlink" title="数值运算"></a>数值运算</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span> + <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span> - <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">&quot;style2.less&quot;</span></span><br><span class="line"></span><br><span class="line">div &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">darken</span>(<span class="number">#bfa</span>, <span class="number">20%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> less </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 基础</title>
      <link href="/posts/3HFABT8.html"/>
      <url>/posts/3HFABT8.html</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript-基础"><a href="#JavaScript-基础" class="headerlink" title="JavaScript 基础"></a>JavaScript 基础</h1><h2 id="amp-amp-与-逻辑运算的运用"><a href="#amp-amp-与-逻辑运算的运用" class="headerlink" title="&amp;&amp; 与 || 逻辑运算的运用"></a>&amp;&amp; 与 || 逻辑运算的运用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// &amp;&amp; 与运算</span></span><br><span class="line"><span class="literal">true</span> &amp;&amp; <span class="title function_">alert</span>(<span class="string">&quot;会调用&quot;</span>);</span><br><span class="line"><span class="literal">false</span> &amp;&amp; <span class="title function_">alert</span>(<span class="string">&quot;不会调用&quot;</span>);</span><br><span class="line"><span class="comment">// 第一个值为 true 返回 第二个值</span></span><br><span class="line"><span class="comment">// 第一个值为false 返回第一个值</span></span><br><span class="line"><span class="keyword">let</span> result = <span class="number">11</span> &amp;&amp; <span class="number">22</span>; <span class="comment">// result =&gt; 22 </span></span><br><span class="line"><span class="keyword">let</span> result = <span class="number">0</span> &amp;&amp; <span class="number">11</span>; <span class="comment">// result =&gt; 0 </span></span><br><span class="line"><span class="keyword">let</span> result = <span class="number">11</span> &amp;&amp; <span class="number">0</span>; <span class="comment">// result =&gt; 0</span></span><br><span class="line"><span class="keyword">let</span> result = <span class="number">0</span> &amp;&amp; <span class="title class_">NaN</span>; <span class="comment">// result =&gt; 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// || 或运算 </span></span><br><span class="line"><span class="literal">true</span> || <span class="title function_">alert</span>(<span class="string">&quot;不会调用&quot;</span>);</span><br><span class="line"><span class="literal">false</span> || <span class="title function_">alert</span>(<span class="string">&quot;会调用&quot;</span>);</span><br><span class="line"><span class="comment">// 第一个值为 true 直接返回 第一个值</span></span><br><span class="line"><span class="comment">// 第一个值为 false 直接返回第二个值</span></span><br></pre></td></tr></table></figure><h2 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注意比较字符串型数字要转型</span></span><br><span class="line"><span class="string">&quot;1&quot;</span> &lt; <span class="string">&quot;5&quot;</span> <span class="comment">// true</span></span><br><span class="line"><span class="string">&quot;11&quot;</span> &lt; <span class="string">&quot;5&quot;</span> <span class="comment">// true</span></span><br><span class="line"><span class="string">&quot;1111&quot;</span> &lt; +<span class="string">&quot;5&quot;</span> <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h2 id="使用Unicode字符（十六进制）"><a href="#使用Unicode字符（十六进制）" class="headerlink" title="使用Unicode字符（十六进制）"></a>使用Unicode字符（十六进制）</h2><ul><li>js中<code>\u十六进制编码</code></li><li>html中<code>\#十进制编码</code></li></ul><h2 id="相等运算符"><a href="#相等运算符" class="headerlink" title="相等运算符"></a>相等运算符</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">null</span> == <span class="number">0</span> <span class="comment">// false</span></span><br><span class="line"><span class="literal">undefined</span> == <span class="literal">null</span> <span class="comment">// true undefined 衍生自 null</span></span><br><span class="line"><span class="title class_">NaN</span> == <span class="title class_">NaN</span> <span class="comment">// false</span></span><br><span class="line"><span class="built_in">isNaN</span>(<span class="title class_">NaN</span>) <span class="comment">// true</span></span><br><span class="line"><span class="literal">null</span> === <span class="literal">undefined</span> <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h2 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// result =&gt; 11 &amp;&amp; 优先级高  </span></span><br><span class="line"><span class="keyword">let</span> result = <span class="number">11</span> || <span class="number">22</span> &amp;&amp; <span class="number">33</span>  <span class="comment">// 加括号使之清晰 11 || (22 &amp;&amp; 33)</span></span><br></pre></td></tr></table></figure><h2 id="time-x2F-timeEnd"><a href="#time-x2F-timeEnd" class="headerlink" title="time&#x2F;timeEnd"></a>time&#x2F;timeEnd</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">time</span>(<span class="string">&#x27;name&#x27;</span>);</span><br><span class="line"><span class="comment">// coding</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">timeEnd</span>(<span class="string">&#x27;name&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="delete-x2F-in"><a href="#delete-x2F-in" class="headerlink" title="delete&#x2F;in"></a>delete&#x2F;in</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">delete obj.name; // 删除对象属性</span><br><span class="line">&quot;name&quot; in obj; // 检查对象是否含有有个属性 原型链查找</span><br></pre></td></tr></table></figure><h2 id="引用数据类型（保存的是地址）"><a href="#引用数据类型（保存的是地址）" class="headerlink" title="引用数据类型（保存的是地址）"></a>引用数据类型（保存的是地址）</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let obj2 = obj1;</span><br><span class="line">obj1.name = &quot;kong&quot;;</span><br><span class="line">obj2.name 也改变为=&gt; &quot;kong&quot;;</span><br><span class="line">obj1 = null; // 不影响obj2</span><br></pre></td></tr></table></figure><h2 id="函数默认返回-undefined"><a href="#函数默认返回-undefined" class="headerlink" title="函数默认返回 undefined"></a>函数默认返回 undefined</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 立即执行函数</span></span><br><span class="line">(<span class="keyword">function</span> (<span class="params">a,b</span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;只执行一次&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a + b)</span><br><span class="line">&#125;)(a,b);</span><br></pre></td></tr></table></figure><h2 id="枚举对象属性名-for-in"><a href="#枚举对象属性名-for-in" class="headerlink" title="枚举对象属性名 for .. in"></a>枚举对象属性名 for .. in</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for (let name in obj) &#123;</span><br><span class="line">    console.log(obj[name]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>function funName()&#123;&#125;</code> 形式创建的函数会声明提前和创建</li></ul><h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><ul><li>函数调用this指向window</li><li>方法调用this指向调用的对象</li><li>构造函数调用this指向新创建的实例</li><li>以call和apply形式调用this指向指定的对象fun.call(obj)</li></ul><h2 id="prototype-为每个函数对象含有的属性，其指向一个显示原型对象"><a href="#prototype-为每个函数对象含有的属性，其指向一个显示原型对象" class="headerlink" title="prototype 为每个函数对象含有的属性，其指向一个显示原型对象"></a>prototype 为每个函数对象含有的属性，其指向一个显示原型对象</h2><ul><li>所创建所定义的每一个函数，解析器都会向函数中添加一个属性prototype，指向显示原型对象</li><li>当函数以构造函数调用时创建实例，所创建的实例对象含有一个隐含属性__proto__，该属性指向该构造函数的显示原型对象，多个以同个构造函数实例化的实例的隐含属性__proto__指向同一个原型对象</li><li>由于函数也是Object的实例，所以函数显示原型对象也会有隐式属性__proto__，其指向构造函数Object()的显示原型对象也就是Obejct.prototype，就是所有函数的原型对象都是Object的实例，function Object()除外，</li><li>而Object.prototype也含有隐含属性__proto__指向null</li><li>原型对象访问方法：<br><code>Person.prototype === Object.getPrototypeOf(person) === person.__proto__</code></li><li>为避免污染全局作用域的命名空间，在原型对象中添加实例的公共方法<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age, gender</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">gender</span> = gender</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 每个Person实例共有的方法</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;  </span><br><span class="line">    <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">pname</span> = <span class="string">&quot;我是原型对象中的属性&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;pname&quot;</span> <span class="keyword">in</span> person); <span class="comment">// true 因为person实例对象中没有会去原型上查找</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="title function_">hasOwnProperty</span>(<span class="string">&quot;pname&quot;</span>)); <span class="comment">// false hasOwnProperty方法会查找实例对象本身有没有该属性</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><ul><li>函数原型对象也有自身的<code>__proto__</code>属性指向一个原型对象，最后的原型对象是Object的原型为null，原型间形成原型链，实例对象在原型链上都没有查找到方法和属性将返回undefined</li></ul><h2 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// 输出 1,2,3,4,5,6,7,8,9</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">value, index, arr</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arr[index] === value)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 返回元素且不影响原数组</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">slice</span>(<span class="number">0</span>,<span class="number">2</span>) == <span class="string">&quot;1,2&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">slice</span>(<span class="number">0</span>) == <span class="string">&quot;1,2,3&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">slice</span>(<span class="number">0</span>,-<span class="number">1</span>) == <span class="string">&quot;1,2&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除元素组中元素并返回，可以插入新元素</span></span><br><span class="line">arr.<span class="title function_">splice</span>(<span class="number">0</span>,<span class="number">2</span>,<span class="string">&#x27;123&#x27;</span>) <span class="comment">// 索引，数量，插入的元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 合并返回新数组</span></span><br><span class="line"><span class="keyword">let</span> result = arr1.<span class="title function_">concat</span>(arr2, arr2, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 转字符串</span></span><br><span class="line"><span class="keyword">let</span> str = arr.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改元素组反转数组</span></span><br><span class="line">arr.<span class="title function_">reverse</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改元素组排序数组 unicode</span></span><br><span class="line">arr.<span class="title function_">sort</span>();</span><br><span class="line">arr.<span class="title function_">sort</span>(<span class="function">(<span class="params">a,b</span>) =&gt;</span> a - b;) <span class="comment">// 降序 b-a</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="call-x2F-apply"><a href="#call-x2F-apply" class="headerlink" title="call&#x2F;apply"></a>call&#x2F;apply</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 指定函数this指向</span></span><br><span class="line">fun1.<span class="title function_">call</span>(obj1, a, b); <span class="comment">// this === obj1</span></span><br><span class="line">fun1.<span class="title function_">apply</span>(obj1, [a, b]);</span><br><span class="line">fun1.<span class="title function_">bind</span>(obj)()</span><br></pre></td></tr></table></figure><h2 id="arguments-类数组对象"><a href="#arguments-类数组对象" class="headerlink" title="arguments 类数组对象"></a>arguments 类数组对象</h2><ul><li>对函数的实参进行封装<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">Array</span>.<span class="title function_">isArray</span>(<span class="variable language_">arguments</span>); <span class="comment">// false</span></span><br><span class="line">    <span class="variable language_">arguments</span>.<span class="property">length</span>; </span><br><span class="line">    <span class="variable language_">arguments</span>[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">arguments</span>.<span class="property">callee</span> === fun; <span class="comment">// true 返回当前函数对象</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// document对象</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">all</span>;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">documentElement</span>; <span class="comment">// html</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;id&quot;</span>);</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;h1&quot;</span>);</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementsByName</span>(<span class="string">&quot;nameKey&quot;</span>);</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&quot;classname&quot;</span>);</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.box1 div&quot;</span>); <span class="comment">// 返回一个</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;.box1&quot;</span>); <span class="comment">// 返回数组</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;li&quot;</span>);</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(<span class="string">&quot;hahah&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 节点对象</span></span><br><span class="line">node.<span class="property">firstChild</span>;</span><br><span class="line">node.<span class="property">lastChild</span>;</span><br><span class="line">node.<span class="property">children</span>;</span><br><span class="line">node.<span class="property">childNodes</span>;</span><br><span class="line">node.<span class="property">firstElementChild</span>;</span><br><span class="line">node.<span class="property">parentNode</span>;</span><br><span class="line">node.<span class="property">previousSibling</span>;</span><br><span class="line">node.<span class="property">previousElementSibling</span>;</span><br><span class="line">node.<span class="property">nextSibling</span>;</span><br><span class="line">node.<span class="title function_">getElementsByTagName</span>();</span><br><span class="line">node.<span class="property">innerHTML</span>;</span><br><span class="line">node.<span class="property">innerText</span>;</span><br><span class="line"></span><br><span class="line">parentN.<span class="title function_">appendChild</span>(node);</span><br><span class="line">parentN.<span class="title function_">insertBefore</span>(newNode, oldNode);</span><br><span class="line">parentN.<span class="title function_">replaceChild</span>(newNode, oldNode);</span><br><span class="line">parentN.<span class="title function_">removeChild</span>(node);</span><br><span class="line">node.<span class="property">parentNode</span>.<span class="title function_">removeChild</span>(node);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 推荐写法</span></span><br><span class="line"><span class="keyword">let</span> li = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;li&quot;</span>);</span><br><span class="line">li.<span class="property">innerHTML</span> = <span class="string">&quot;hahah&quot;</span>;</span><br><span class="line">ul.<span class="title function_">appendChild</span>(li);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="获取元素样式"><a href="#获取元素样式" class="headerlink" title="获取元素样式"></a>获取元素样式</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 读取内联样式</span></span><br><span class="line">node.<span class="property">style</span>.<span class="property">width</span>;</span><br><span class="line"><span class="comment">// 读取元素当前显示的样式</span></span><br><span class="line">node.<span class="property">currentStyle</span>.<span class="property">width</span>; <span class="comment">// ie</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">getComputedStyle</span>(node, <span class="literal">null</span>).<span class="property">width</span>;</span><br></pre></td></tr></table></figure><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><h3 id="事件委派"><a href="#事件委派" class="headerlink" title="事件委派"></a>事件委派</h3><ul><li>为多个子元素的父元素添加事件监听，子元素事件冒泡到父元素<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ul.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    event = event || <span class="variable language_">window</span>.<span class="property">event</span>;</span><br><span class="line">    <span class="keyword">if</span> (event.<span class="property">target</span>.<span class="property">className</span> = <span class="string">&quot;link&quot;</span>) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="addEventListener"><a href="#addEventListener" class="headerlink" title="addEventListener"></a>addEventListener</h3><ul><li>可以绑定多个事件监听顺序调用</li><li>可以在捕获阶段触发</li><li>可以为任何其他支持事件的对象绑定<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">btn.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;,<span class="literal">false</span>)</span><br></pre></td></tr></table></figure></li></ul><h2 id="执行-new-操作"><a href="#执行-new-操作" class="headerlink" title="执行 new 操作"></a>执行 new 操作</h2><ul><li>创建一个空对象</li><li>给构造函数的this值指向该对象，给对象设置__proto__指向构造函数对象的prototype属性值this.<strong>proto</strong> &#x3D; Fun.prototype</li><li>执行构造函数体（给对象添加属性&#x2F;方法）</li></ul><h3 id="循环遍历加监听"><a href="#循环遍历加监听" class="headerlink" title="循环遍历加监听"></a>循环遍历加监听</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加属性</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>, length = btns.<span class="property">length</span>; i &lt; length; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> btn = btns[i];</span><br><span class="line">    btn.<span class="property">index</span> = i;</span><br><span class="line">    btn.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">index</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 利用闭包</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>, length = btns.<span class="property">length</span>; i &lt; length; i++) &#123;</span><br><span class="line">    (<span class="keyword">function</span> (<span class="params">i</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> btn = btns[i];</span><br><span class="line">        btn.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="title function_">alert</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="闭包-Closure"><a href="#闭包-Closure" class="headerlink" title="闭包 Closure"></a>闭包 Closure</h2><ul><li>嵌套的内部函数引用外部函数的变量或者函数，就产生了闭包，声明在一个函数中的函数，叫做闭包函数。而且内部函数总是可以访问其所在的外部函数中声明的参数和变量，即使在其外部函数被返回（寿命终结）了之后</li><li>是一个包含被引用变量（函数）的对象</li><li>特点<ul><li>让外部访问函数内部变量成为可能</li><li>局部变量会常驻在内存中，延长局部变量的声明周期</li><li>可以避免使用全局变量，防止全局变量污染</li><li>会造成内存泄漏（有一块内存空间被长期占用，而不被释放）</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.内部函数作为外部函数返回值</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun1</span> () &#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fun2</span> () &#123;</span><br><span class="line">        a++;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fun2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f = <span class="title function_">fun1</span>(); <span class="comment">// 外部函数一执行，就创建了一个闭包</span></span><br><span class="line"><span class="title function_">f</span>() <span class="comment">// 2</span></span><br><span class="line"><span class="title function_">f</span>() <span class="comment">// 3 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.将函数作为实参传递给另一个函数调用</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showDelay</span>(<span class="params">msg, time</span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;  <span class="comment">//这个function是闭包，因为是嵌套的子函数，而且引用了外部函数的变量msg</span></span><br><span class="line">        <span class="title function_">alert</span>(msg)</span><br><span class="line">    &#125;, time)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">showDelay</span>(<span class="string">&#x27;atguigu&#x27;</span>, <span class="number">2000</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>生命周期<br>产生：在嵌套内部函数定义执行完时就产生了（不是在调用时）<br>死亡：引用闭包的对象成为垃圾对象时，如上例子<code>f = null</code></p></li><li><p>面试题：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fnnn</span>(<span class="params"></span>)&#123;</span><br><span class="line">   <span class="keyword">var</span> arr = [];</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; <span class="number">5</span>;i ++)&#123;</span><br><span class="line">arr[i] = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line"> &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> list = <span class="title function_">fnnn</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>,len = list.<span class="property">length</span>;i &lt; len ; i ++)&#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(list[i]()); <span class="comment">// 全部打印 5 因为 return 的 i 的地址的值已经变成 5</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="内存溢出"><a href="#内存溢出" class="headerlink" title="内存溢出"></a>内存溢出</h2><ul><li>当程序运行所需要的内存超出了剩余的内存时，就抛出内存溢出的错误</li></ul><h2 id="内存泄漏"><a href="#内存泄漏" class="headerlink" title="内存泄漏"></a>内存泄漏</h2><ul><li>占用的内存没有及时释放</li><li>内存泄漏积累导致内存溢出</li><li>常见内存泄漏：<ul><li>意外全局变量</li><li>被遗忘的计时器或回调函数</li><li>脱离DOM的引用：引用DOM后，元素被删除，引用被保留没有回收</li><li>闭包，不合理的使用闭包</li></ul></li></ul><h2 id="创建对象的方法"><a href="#创建对象的方法" class="headerlink" title="创建对象的方法"></a>创建对象的方法</h2><h3 id="new-Object"><a href="#new-Object" class="headerlink" title="new Object()"></a>new Object()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">person.<span class="property">name</span> = name;</span><br><span class="line">person.<span class="property">age</span> = age;</span><br><span class="line">person.<span class="property">gender</span> = gender;</span><br><span class="line">person.<span class="property">sayName</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="字面量"><a href="#字面量" class="headerlink" title="字面量{}"></a>字面量{}</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;kong&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">12</span>,</span><br><span class="line">    <span class="attr">sayName</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;  </span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="工厂方法创建对象"><a href="#工厂方法创建对象" class="headerlink" title="工厂方法创建对象"></a>工厂方法创建对象</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">create</span>(<span class="params">name, age, gender</span>) &#123; </span><br><span class="line">    <span class="keyword">let</span> obj = &#123;</span><br><span class="line">        <span class="attr">name</span>: name,</span><br><span class="line">        <span class="attr">age</span>: age,</span><br><span class="line">        <span class="attr">gender</span>: gender,</span><br><span class="line">        <span class="attr">sayName</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;  </span><br><span class="line">            <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> obj; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>缺点：构造函数都是Object无法区分不同对象的具体类型（Person还是Student）</li></ul><h3 id="构造函数创建对象"><a href="#构造函数创建对象" class="headerlink" title="构造函数创建对象"></a>构造函数创建对象</h3><ul><li>解决工厂方法无法区分不同对象的类型</li><li><code>person instanceof Person</code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age, gender</span>) &#123;  </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">gender</span> = gender</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">sayName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;  </span><br><span class="line">        <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="comment">// - 立即创建新对象</span></span><br><span class="line"><span class="comment">// - 将构造函数的this指向新对象</span></span><br><span class="line"><span class="comment">// - 执行构造函数</span></span><br><span class="line"><span class="comment">// - 返回该新对象</span></span><br><span class="line"><span class="comment">// 当需要生成多个实例时，方法应抽离出去，提升性能</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sayNameFun</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">sayName</span> = sayNameFun;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>缺点：造成了不必要的函数对象的创建，因为在js中函数也是一个对象，因此如果对象属性中如果包含函数的话，那么每次都会新建一个函数对象，浪费了不必要的内存空间，因为函数是所有的实例都可以通用的。</li></ul><h3 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// let Person = function () &#123;&#125;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">name</span> = <span class="string">&quot;kong&quot;</span>;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">age</span> = <span class="number">12</span>;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">person.<span class="title function_">sayName</span>();</span><br></pre></td></tr></table></figure><ul><li>该模式的问题：一个是没有办法通过传入参数来初始化值，另一个是如果存在一个引用类型如Array 这样的值，那么所有的实例将共享一个对象，一个实例对引用类型值的改变会影响所有的实例。</li></ul><h3 id="组合使用构造函数模式和原型模式"><a href="#组合使用构造函数模式和原型模式" class="headerlink" title="组合使用构造函数模式和原型模式"></a>组合使用构造函数模式和原型模式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age</span>) &#123;  </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">person.<span class="title function_">sayName</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>缺点：因为使用了两种不同的模式，所以对于代码的封装性不够好。</li></ul><h3 id="寄生构造函数模式"><a href="#寄生构造函数模式" class="headerlink" title="寄生构造函数模式"></a>寄生构造函数模式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, sex, age</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> person = <span class="keyword">new</span> <span class="title class_">Object</span>()</span><br><span class="line">    person.<span class="property">name</span> = name</span><br><span class="line">    person.<span class="property">sex</span> = sex</span><br><span class="line">    person.<span class="property">age</span> = age</span><br><span class="line">    person.<span class="property">sayName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;  </span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> person</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;windy-boy&#x27;</span>, <span class="string">&#x27;male&#x27;</span>, <span class="string">&#x27;18&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>缺点：无法实现对象的识别。</li></ul><h2 id="JS实现继承的6种方式"><a href="#JS实现继承的6种方式" class="headerlink" title="JS实现继承的6种方式"></a>JS实现继承的6种方式</h2><blockquote><p>参考自：<a href="https://www.cnblogs.com/codermjy/p/16500734.html">codermjy</a></p></blockquote><ul><li>JavaScript想实现继承的目的：重复利用另外一个对象的属性和方法。</li></ul><h3 id="1-原型链继承"><a href="#1-原型链继承" class="headerlink" title="1. 原型链继承"></a>1. 原型链继承</h3><ul><li>让一个构造函数的原型是另一个类型的实例，那么这个构造函数new出来的实例就具有该实例的属性。</li><li>子类型的原型为父类型的一个实例对象</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">isShow</span> = <span class="literal">true</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">info</span> = &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;kong&quot;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Parent</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getInfo</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">info</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">isShow</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params"></span>) &#123;&#125;;</span><br><span class="line"><span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Parent</span>(); <span class="comment">// 重点***</span></span><br><span class="line"><span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Child</span>;</span><br><span class="line"><span class="keyword">let</span> child1 = <span class="keyword">new</span> <span class="title class_">Child</span>();</span><br><span class="line">child1.<span class="property">info</span>.<span class="property">gender</span> = <span class="string">&quot;男&quot;</span>;</span><br><span class="line">child1.<span class="title function_">getInfo</span>(); <span class="comment">// &#123;name: &#x27;kong&#x27;, age: 18, gender: &#x27;男&#x27;&#125; ture</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>优点：写法方便简洁，容易理解。</li><li>缺点：在包含有引用类型的数据时，会被所有的实例对象所共享，容易造成修改的混乱。还有就是在创建子类型的时候不能向超类型传递参数。</li></ul><h3 id="2-借用构造函数继承"><a href="#2-借用构造函数继承" class="headerlink" title="2. 借用构造函数继承"></a>2. 借用构造函数继承</h3><ul><li>在子类型构造函数的内部调用父类型构造函数；使用 apply() 或 call() 方法将父对象的构造函数绑定在子对象上。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params">gender</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">info</span> &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;kong&quot;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">        <span class="attr">gender</span>: gender</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params">gender</span>) &#123;  </span><br><span class="line">    <span class="title class_">Parent</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, gender)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> child1 = <span class="keyword">new</span> <span class="title class_">Child</span>(<span class="string">&#x27;男&#x27;</span>);</span><br><span class="line">child1.<span class="property">info</span>.<span class="property">nickname</span> = <span class="string">&#x27;xiaoma&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(child1.<span class="property">info</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>优点：解决了原型链实现继承的不能传参的问题和父类的原型共享的问题。</li><li>缺点：借用构造函数的缺点是方法都在构造函数中定义，因此无法实现函数复用。在父类型的原型中定义的方法，对子类型而言也是不可见的，结果所有类型都只能使用构造函数模式。</li></ul><h3 id="3-组合继承"><a href="#3-组合继承" class="headerlink" title="3. 组合继承"></a>3. 组合继承</h3><ul><li>将 原型链 和 利用构造函数 的组合到一块。使用原型链实现对原型属性和方法的继承，而通过借用构造函数来实现对实例属性的继承。这样，既通过在原型上定义方法实现了函数复用，又能够保证每个实例都有自己的属性<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params">gender</span>) &#123;  </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">info</span> = &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;kong&quot;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">        <span class="attr">gender</span>: gender</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Parent</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getInfo</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;  </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">info</span>.<span class="property">name</span>, <span class="variable language_">this</span>.<span class="property">info</span>.<span class="property">age</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params">gender</span>) &#123;  </span><br><span class="line">    <span class="title class_">Parent</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, gender)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Parent</span>()</span><br><span class="line"><span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Child</span>  <span class="comment">// 修正constructor</span></span><br><span class="line"><span class="keyword">let</span> child1 = <span class="keyword">new</span> <span class="title class_">Child</span>(<span class="string">&quot;男&quot;</span>)</span><br><span class="line">child1.<span class="property">info</span>.<span class="property">nickname</span> = <span class="string">&quot;xiaoming&quot;</span></span><br><span class="line">child1.<span class="title function_">getInfo</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(child1.<span class="property">info</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>优点：解决了原型链继承和借用构造函数继承造成的影响。</li><li>缺点：无论在什么情况下，都会调用两次超类型构造函数：一次是在创建子类型原型的时候，另一次是在子类型构造函数内部</li></ul><h3 id="4-原型式继承"><a href="#4-原型式继承" class="headerlink" title="4. 原型式继承"></a>4. 原型式继承</h3><ul><li>Object.create() 是把现有对象的属性，挂到新建对象的原型上，新建对象为空对象，这个方法接收两个参数：作为新对象原型的对象，以及给新对象定义额外属性的对象（第二个可选）。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;mjy&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">19</span>,</span><br><span class="line">  <span class="attr">hoby</span>: [<span class="string">&#x27;唱&#x27;</span>, <span class="string">&#x27;跳&#x27;</span>],</span><br><span class="line">  <span class="title function_">showName</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;my name is: &#x27;</span>, <span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> child1 = <span class="title class_">Object</span>.<span class="title function_">create</span>(person)</span><br><span class="line">child1.<span class="property">name</span> = <span class="string">&#x27;xxt&#x27;</span></span><br><span class="line">child1.<span class="property">hoby</span>.<span class="title function_">push</span>(<span class="string">&#x27;rap&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">hoby</span>) <span class="comment">// [&#x27;唱&#x27;, &#x27;跳&#x27;, &#x27;rap&#x27;]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>优点：不需要单独创建构造函数。</li><li>缺点：属性中包含的引用值始终会在相关对象间共享，子类实例不能向父类传参</li></ul><h3 id="5-寄生式继承"><a href="#5-寄生式继承" class="headerlink" title="5. 寄生式继承"></a>5. 寄生式继承</h3><ul><li>寄生式继承的思路与(寄生) <code>原型式继承</code> 和 <code>工厂模式</code> 似, 即创建一个仅用于封装继承过程的函数,该函数在内部以某种方式来增强对象,最后再像真的是它做了所有工作一样返回对象。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">objectCopy</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">Fun</span>(<span class="params"></span>) &#123; &#125;;</span><br><span class="line">  <span class="title class_">Fun</span>.<span class="property"><span class="keyword">prototype</span></span> = obj;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Fun</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createAnother</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> clone = <span class="title function_">objectCopy</span>(obj);</span><br><span class="line">  clone.<span class="property">showName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;my name is：&#x27;</span>, <span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> clone;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">     <span class="attr">name</span>: <span class="string">&quot;mjy&quot;</span>,</span><br><span class="line">     <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">     <span class="attr">hoby</span>: [<span class="string">&#x27;唱&#x27;</span>, <span class="string">&#x27;跳&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> child1 = <span class="title function_">createAnother</span>(person);</span><br><span class="line">child1.<span class="property">hoby</span>.<span class="title function_">push</span>(<span class="string">&quot;rap&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(child1.<span class="property">hoby</span>); <span class="comment">// [&#x27;唱&#x27;, &#x27;跳&#x27;, &#x27;rap&#x27;]</span></span><br><span class="line">child1.<span class="title function_">showName</span>(); <span class="comment">// my name is： mjy</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> child2 = <span class="title function_">createAnother</span>(person);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(child2.<span class="property">hoby</span>); <span class="comment">// [&#x27;唱&#x27;, &#x27;跳&#x27;, &#x27;rap&#x27;]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>优点：写法简单，不需要单独创建构造函数</li><li>缺点：通过寄生式继承给对象添加函数会导致函数难以重用。使用寄生式继承来为对象添加函数, 会由于不能做到函数复用而降低效率;这一点与构造函数模式类似</li></ul><h3 id="6-寄生组合式继承"><a href="#6-寄生组合式继承" class="headerlink" title="6. 寄生组合式继承"></a>6. 寄生组合式继承</h3><ul><li>通过借用构造函数来继承属性，通过原型链的混成形式来继承方法。本质上，就是使用寄生式继承来继承超类型的原型，然后再将结果指定给子类型的原型。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">objectCopy</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">Fun</span>(<span class="params"></span>) &#123; &#125;;</span><br><span class="line">  <span class="title class_">Fun</span>.<span class="property"><span class="keyword">prototype</span></span> = obj;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Fun</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">inheritPrototype</span>(<span class="params">child, parent</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> prototype = <span class="title function_">objectCopy</span>(parent.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line">  prototype.<span class="property">constructor</span> = child;</span><br><span class="line">  <span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span> = prototype;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">hoby</span> = [<span class="string">&#x27;唱&#x27;</span>, <span class="string">&#x27;跳&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Parent</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">showName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;my name is：&#x27;</span>, <span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">  <span class="title class_">Parent</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">inheritPrototype</span>(<span class="title class_">Child</span>, <span class="title class_">Parent</span>);</span><br><span class="line"><span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">showAge</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;my age is：&#x27;</span>, <span class="variable language_">this</span>.<span class="property">age</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> child1 = <span class="keyword">new</span> <span class="title class_">Child</span>(<span class="string">&quot;mjy&quot;</span>, <span class="number">18</span>);</span><br><span class="line">child1.<span class="title function_">showAge</span>(); <span class="comment">// 18</span></span><br><span class="line">child1.<span class="title function_">showName</span>(); <span class="comment">// mjy</span></span><br><span class="line">child1.<span class="property">hoby</span>.<span class="title function_">push</span>(<span class="string">&quot;rap&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(child1.<span class="property">hoby</span>); <span class="comment">// [&#x27;唱&#x27;, &#x27;跳&#x27;, &#x27;rap&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> child2 = <span class="keyword">new</span> <span class="title class_">Child</span>(<span class="string">&quot;yl&quot;</span>, <span class="number">18</span>);</span><br><span class="line">child2.<span class="title function_">showAge</span>(); <span class="comment">// 18</span></span><br><span class="line">child2.<span class="title function_">showName</span>(); <span class="comment">// yl</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(child2.<span class="property">hoby</span>); <span class="comment">// [&#x27;唱&#x27;, &#x27;跳&#x27;]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>优点是：高效率只调用一次父构造函数，并且因此避免了在子原型上面创建不必要，多余的属性。与此同时，原型链还能保持不变；</li><li>缺点是：代码复杂</li></ul><h2 id="浏览器JS引擎执行代码的基本流程"><a href="#浏览器JS引擎执行代码的基本流程" class="headerlink" title="浏览器JS引擎执行代码的基本流程"></a>浏览器JS引擎执行代码的基本流程</h2><ul><li>先执行初始化代码<ul><li>设置定时器</li><li>绑定监听</li><li>发送ajax请求</li></ul></li><li>后面在某时刻才会执行回调函数</li></ul><h2 id="Web-Workers多线程"><a href="#Web-Workers多线程" class="headerlink" title="Web Workers多线程"></a>Web Workers多线程</h2><ul><li>分线程没有window对象，不能访问DOM操作界面</li><li>不能跨域加载JS</li><li>利用分线程进行复杂计算</li><li>不是每个浏览器都支持<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// worker.js文件 分线程 ===========</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fibonacci</span>(<span class="params">n</span>) &#123;  </span><br><span class="line">    <span class="keyword">return</span> n &lt; <span class="number">2</span> ? : <span class="number">1</span> : <span class="title function_">fibonacci</span>(n-<span class="number">1</span>) + <span class="title function_">fibonacci</span>(n-<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> onmessage = <span class="keyword">function</span> (<span class="params">event</span>) &#123;  </span><br><span class="line">    <span class="keyword">var</span> number = event.<span class="property">data</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;分线程接收到主线程发送过来的数据：&quot;</span> + number);</span><br><span class="line">    <span class="comment">// 计算</span></span><br><span class="line">    <span class="keyword">var</span> result = <span class="title function_">fibonacci</span>(number)</span><br><span class="line">    <span class="title function_">postMessage</span>(result)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;分线程向主线程返回数据：&quot;</span> + result);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// =============</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 主文件主线程 ===========</span></span><br><span class="line">btn.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;  </span><br><span class="line">    <span class="keyword">var</span> number = input.<span class="property">value</span>;</span><br><span class="line">    <span class="keyword">var</span> worker = <span class="keyword">new</span> <span class="title class_">Worker</span>(<span class="string">&#x27;worker.js&#x27;</span>);</span><br><span class="line">    worker.<span class="property">onmessage</span> = <span class="keyword">function</span> (<span class="params">event</span>) &#123;  </span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;主线程接受分线程返回的数据：&quot;</span> + event.<span class="property">data</span>);</span><br><span class="line">        <span class="title function_">alert</span>(event.<span class="property">data</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    worker.<span class="title function_">postMessage</span>(number);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;主线程向分线程发送数据：&quot;</span> + number);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ===============</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h3 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h3><ul><li>防止用户操作频繁，只执行最后一次回调<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">inp = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;input&quot;</span>);</span><br><span class="line">inp.<span class="property">oninput</span> = <span class="title function_">debounce</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 业务代码</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">value</span>)</span><br><span class="line">&#125;, <span class="number">500</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">func, delay</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">            <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">        &#125;</span><br><span class="line">        timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            func.<span class="title function_">call</span>(<span class="variable language_">this</span>); <span class="comment">// 改变this指向令其指向input</span></span><br><span class="line">        &#125;, delay);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h3 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h3><ul><li>用户操作频繁，控制并减少回调执行次数<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">onscroll</span> = <span class="title function_">throttle</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;, <span class="number">500</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">func, delay=<span class="number">200</span></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (timer) <span class="keyword">return</span>;</span><br><span class="line">        timer = <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            func.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">            timer = <span class="literal">null</span>; <span class="comment">// 重置为null</span></span><br><span class="line">        &#125;, delay)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> blog </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CommonJS与ES6 Module的使用区别分析</title>
      <link href="/posts/DWSZ3B.html"/>
      <url>/posts/DWSZ3B.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文转载自脚本之家，原文地址 <a href="https://www.jb51.net/article/246177.htm">www.jb51.net</a></p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>学了 JS 并且用过 Node.js 后，对模块化应该是有所了解和使用了，那么一定见过以下两种模块导入导出的方式</p><p>第一种： ES6 Module</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// B.js</span><br><span class="line">function show() &#123;</span><br><span class="line">    console.log(&#x27;show方法被执行&#x27;)</span><br><span class="line">&#125;</span><br><span class="line">export default show</span><br><span class="line">// A.js</span><br><span class="line">import show from &#x27;./B.js&#x27;</span><br><span class="line">show()  // show方法被执行</span><br></pre></td></tr></table></figure><p>第二种： CommonJS</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// B.js</span><br><span class="line">function show() &#123;</span><br><span class="line">    console.log(&#x27;show方法被执行&#x27;)</span><br><span class="line">&#125;</span><br><span class="line">module.exports = &#123;</span><br><span class="line">    show</span><br><span class="line">&#125;</span><br><span class="line">// A.js</span><br><span class="line">const bModule = require(&#x27;./B.js&#x27;)</span><br><span class="line">bModule.show()  // show方法被执行</span><br></pre></td></tr></table></figure><p>以上两种导入导出方法涉及到了两种模块规范，分别是 ES6 Module 、CommonJS</p><p>本文就来聊聊这两者之间的具体使用与区别</p><h2 id="1-CommonJS"><a href="#1-CommonJS" class="headerlink" title="1. CommonJS"></a>1. CommonJS</h2><hr><p>CommonJS 是 2009 年由 JavaScript 社区提出的包含了模块化的一个标准，后来被 Node.js 所采用并实现，也就是说我们在 Node.js 中用到的模块导入导出都是依照 CommonJS 标准来实现的</p><h3 id="1-1-导出"><a href="#1-1-导出" class="headerlink" title="1.1 导出"></a>1.1 导出</h3><p>我们可以把一个文件看成一个模块，每个模块之间是互相独立的，即不会互相影响。当需要使用到某个模块时，只需在文件中将目标模块导入即可</p><p>要想被其它模块导入首先需要导出需要向外暴露的变量或方法，在 CommonJS 中导出的语法有以下两种方式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// B.js</span><br><span class="line">// 定义了函数show</span><br><span class="line">function show() &#123;</span><br><span class="line">    console.log(&#x27;show方法被调用&#x27;)</span><br><span class="line">&#125;</span><br><span class="line">// 定义了变量count</span><br><span class="line">let count = 3</span><br><span class="line">/*--------------  导出方法  --------------*/</span><br><span class="line">// 第一种</span><br><span class="line">module.exports = &#123;</span><br><span class="line">    show,</span><br><span class="line">    count</span><br><span class="line">&#125;</span><br><span class="line">// 第二种</span><br><span class="line">exports.show = show</span><br><span class="line">exports.count = count</span><br></pre></td></tr></table></figure><p>上述代码中，两种导出方式是等价的。</p><p>第一种导出方式是将需要导出的函数或变量存储到 <code>module.exports</code> 里面，其中 <code>module.exports</code> 原本是一个空对象</p><p>第二种导出方式中，<code>exports</code> 在内部其实是指向了 <code>module.exports</code>，所以当我们执行 exports. 变量 或 exports. 函数 时，其实就相当于把变量或函数存储到 <code>module.exports</code> 中</p><p>注意： 这里要特别强调的是，在使用第二种导出方式时，不能对 <code>exports</code> 进行重新赋值，否则就将 <code>module.exports</code> 直接全部覆盖了</p><h3 id="1-2-导入"><a href="#1-2-导入" class="headerlink" title="1.2 导入"></a>1.2 导入</h3><p>再来看一下 CommonJS 的导入语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// A.js</span><br><span class="line">const bModule = require(&#x27;./B.js&#x27;)</span><br><span class="line">console.log(bModule.count)  // 3</span><br><span class="line">bModule.show()  // show方法被调用</span><br></pre></td></tr></table></figure><p>从上述代码中可以看到，CommonJS 是通过 <code>require</code> 方法来导入模块的，其参数为模块文件路径，要特别注意的是，我们导入模块后接收到的其实是一个对象，也就是 <code>module.exports</code> 的值，我们能从该对象中获取到所需的变量或函数</p><p>另外，比较特别的是，<code>require</code> 方法还可以接收一个表达式作为参数，代码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let fileName = &#x27;B.js&#x27;</span><br><span class="line">const bModule = require(&#x27;./&#x27; + fileName)</span><br></pre></td></tr></table></figure><p>因此，我们是可以动态的改变并决定模块的加载导入路径的</p><h2 id="2-ES6-Module"><a href="#2-ES6-Module" class="headerlink" title="2. ES6 Module"></a>2. ES6 Module</h2><hr><p>如标题名写的，该模块标准是在 ES6 时才被提出的，此后 JS 才具有了模块化这一特性</p><h3 id="2-1-导出"><a href="#2-1-导出" class="headerlink" title="2.1 导出"></a>2.1 导出</h3><p>在 ES6 Module 中，导出用到了关键字 <code>export</code> ，导出的方式也大致分为两种，分别是命名导出 、默认导出</p><p>第一种： 命名导出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// B.js</span><br><span class="line">/*--------  单个变量或函数导出  ----------*/</span><br><span class="line">export function show() &#123; console.log(&#x27;show方法被调用&#x27;) &#125;</span><br><span class="line">export let count = 3</span><br><span class="line">/*--------  批量导出  ----------*/</span><br><span class="line">function show() &#123; console.log(&#x27;show方法被调用&#x27;) &#125;</span><br><span class="line">let count = 3</span><br><span class="line">export &#123;show, count&#125;</span><br></pre></td></tr></table></figure><p>上述代码分了两种情况，且这两种写法是等价的</p><p>第一种是单个的变量或函数导出，只需要直接在开头使用 <code>export</code> 关键字即可；</p><p>第二种情况是批量地把多个变量或函数导出，只需要把它们储存到一个对象中即可</p><p>第三种： 默认导出（一个模块一个默认导出）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// B.js</span><br><span class="line">function show() &#123; console.log(&#x27;show方法被调用&#x27;) &#125;</span><br><span class="line">// 命名导出变量count</span><br><span class="line">export let count = 3</span><br><span class="line">// 默认导出函数show</span><br><span class="line">export default show</span><br></pre></td></tr></table></figure><p>默认导出是在 <code>export</code> 关键词后面再跟上一个 <code>default</code> 表示导出的该变量或函数是匿名的</p><p>注意： 一个模块只能默认导出一次，否则就会报错，具体原因会在后面讲解</p><h3 id="2-2-导入"><a href="#2-2-导入" class="headerlink" title="2.2 导入"></a>2.2 导入</h3><p>ES6 Module 的导入用到的关键字是 <code>import</code> ，具体代码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// A.js</span><br><span class="line">import &#123;show, count&#125; from &#x27;./B.js&#x27;</span><br><span class="line">show()   // show方法被调用</span><br><span class="line">console.log(count)  // 3</span><br></pre></td></tr></table></figure><p>ES6 Module 的导入需要用一对 {} 大括号来接收我们需要导入的方法或函数</p><p>注意： 大括号中的变量或函数名必须与导出时的名称一模一样</p><p>那么如果我们想修改导入的变量或函数的名称，可以通过 <code>as</code> 关键词来命名，代码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// A.js</span><br><span class="line">import &#123;show as print, count as number&#125; from &#x27;./B.js&#x27;</span><br><span class="line">print()   // show方法被调用</span><br><span class="line">console.log(number)  // 3</span><br></pre></td></tr></table></figure><p>如果我们要想将所有的变量或函数都导入，可以通过 <code>*</code> 来整体导入，代码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import * as bModule from &#x27;./B.js&#x27;</span><br><span class="line">bModule.show()  // show方法被调用</span><br><span class="line">console.log(bModule.count)  // 3</span><br></pre></td></tr></table></figure><ul><li>表示全部的意思，我们将其全部导入，并赋值给 <code>bModule</code>，这样我们就可以通过 <code>bModule</code> 获取想要的变量或对象了</li></ul><p>以上所说的都是针对命名导出的变量或函数，那么如何导入一个默认导出的变量或函数呢？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 将通过 export default 导出的变量导入</span><br><span class="line">import print from &#x27;./B.js&#x27;</span><br><span class="line">print()  // show方法被调用</span><br></pre></td></tr></table></figure><p>命名导出的变量都是通过 {} 来接收的，那么去掉 {} ，接收的就是默认导出的变量了，因为导出的变量是匿名的，因此我们可以随意地起个变量名用于接收</p><p>补充： 这里特别提一下，与 CommonJS 不同，ES6 Module 的导入文件路径是不支持表达式的</p><h2 id="3-CommonJS-与-ES6-Module-的区别"><a href="#3-CommonJS-与-ES6-Module-的区别" class="headerlink" title="3. CommonJS 与 ES6 Module 的区别"></a>3. CommonJS 与 ES6 Module 的区别</h2><hr><p>这两者的主要区别主要有以下两点：</p><ol><li><p><strong>对于模块的依赖，CommonJS 是动态的，ES6 Module 是静态的</strong></p></li><li><p><strong>CommonJS 导入的是值的拷贝，ES6 Module 导入的是值的引用</strong></p></li></ol><h3 id="3-1-区别一"><a href="#3-1-区别一" class="headerlink" title="3.1 区别一"></a>3.1 区别一</h3><p>对于模块的依赖，何为动态？何为静态？</p><p>动态是指对于模块的依赖关系建立在代码执行阶段；</p><p>静态是指对于模块的依赖关系建立在代码编译阶段；</p><p>上文提到，CommonJS 导入时，<code>require</code> 的路径参数是支持表达式的，例如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// A.js</span><br><span class="line">let fileName = &#x27;example.js&#x27;</span><br><span class="line">const bModule = require(&#x27;./&#x27; + fileName)</span><br></pre></td></tr></table></figure><p>因为该路径在代码执行时是可以动态改变的，所以如果在代码编译阶段就建立各个模块的依赖关系，那么一定是不准确的，只有在代码运行了以后，才可以真正确认模块的依赖关系，因此说 <strong>CommonJS 是动态的</strong>。</p><p>那么现在你也应该也知道为什么 <strong>ES6 Module 是静态的</strong>了吧</p><h3 id="3-2-区别二"><a href="#3-2-区别二" class="headerlink" title="3.2 区别二"></a>3.2 区别二</h3><p>为了验证这一点，我准备用实例来演示一下</p><p>首先来验证 CommonJS，代码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// B.js</span><br><span class="line">let count = 3</span><br><span class="line">function change() &#123;</span><br><span class="line">    count ++    // 变量count + 1</span><br><span class="line">    console.log(&#x27;原count值为：&#x27;, count);  // 打印B.js模块中count的值</span><br><span class="line">&#125;</span><br><span class="line">module.exports = &#123;</span><br><span class="line">    count,</span><br><span class="line">    change</span><br><span class="line">&#125;</span><br><span class="line">// A.js</span><br><span class="line">let count = require(&#x27;./B.js&#x27;).count </span><br><span class="line">let change = require(&#x27;./B.js&#x27;).change</span><br><span class="line">console.log(&#x27;改变前：&#x27;, count);   </span><br><span class="line">change()     // 调用模块B.js中的change方法，将原来的count + 1</span><br><span class="line">console.log(&#x27;改变后：&#x27;, count);</span><br></pre></td></tr></table></figure><p>运行 A.js 文件的结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">改变前：3  </span><br><span class="line">原 count 值为：4  </span><br><span class="line">改变后：3</span><br></pre></td></tr></table></figure><p>在上述代码中我们可以看到，在 <code>A.js</code> 文件中导入了 <code>B.js</code> 文件中的变量 <code>count</code> 和 函数 <code>change</code>，因为导入的 <code>count</code> 只是对原有值的一个拷贝，因此尽管我们调用了函数 <code>change</code> 改变了 <code>B.js</code> 文件中变量 <code>count</code> 的值，也不会影响到 <code>A.js</code> 文件中的变量 <code>count</code></p><p>根据这个结果得出结论：<strong>CommonJS 导入的变量是对原值的拷贝</strong></p><p>接下来再来验证一下 ES6 Module，代码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// B.js</span><br><span class="line">let count = 3</span><br><span class="line">function change() &#123;</span><br><span class="line">    count ++        // 变量count + 1</span><br><span class="line">    console.log(count);   // 打印B.js模块中count的值</span><br><span class="line">&#125;</span><br><span class="line">export &#123;count, change&#125;</span><br><span class="line">// A.js</span><br><span class="line">import &#123;count, change&#125; from &#x27;./B.js&#x27;;</span><br><span class="line">console.log(&#x27;改变前：&#x27;,count);</span><br><span class="line">change()         // 调用模块B.js中的change方法，将原来的count + 1</span><br><span class="line">console.log(&#x27;改变后：&#x27;, count);</span><br></pre></td></tr></table></figure><p>运行 A.js 文件的结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">改变前：3  </span><br><span class="line">原 count 值为：4  </span><br><span class="line">改变后：4</span><br></pre></td></tr></table></figure><p>相比较于 CommonJS 的结果，ES6 Module 导入的变量 <code>count</code> 随着原值的改变而改变了</p><p>根据这个结果得出结论：<strong>ES6 Module 导入的变量是对原值的引用</strong></p><ol start="4"><li>The end</li></ol>]]></content>
      
      
      <categories>
          
          <category> 转载 </category>
          
          <category> 已发布 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 阅读笔记 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode - 链表</title>
      <link href="/posts/1PX7WYK.html"/>
      <url>/posts/1PX7WYK.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>部分图和题解来自：<a href="https://programmercarl.com/">https://programmercarl.com/</a></p></blockquote><h2 id="203-移除链表元素"><a href="#203-移除链表元素" class="headerlink" title="203. 移除链表元素"></a><a href="https://leetcode.cn/problems/remove-linked-list-elements/">203. 移除链表元素</a></h2><p>给你一个链表的头节点 head 和一个整数 val ，请你删除链表中所有满足 Node.val &#x3D;&#x3D; val 的节点，并返回 新的头节点 。</p><p>示例 1：</p><p><img src="https://assets.leetcode.com/uploads/2021/03/06/removelinked-list.jpg" alt="img"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,2,6,3,4,5,6], val = 6</span><br><span class="line">输出：[1,2,3,4,5]</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [], val = 1</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure><p>示例 3：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [7,7,7,7], val = 7</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p><img src="https://img-blog.csdnimg.cn/20210316095351161.png" alt="203_链表删除元素1"></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val, next) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.next = (next===undefined ? null : next)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">ListNode</span>&#125; <span class="variable">head</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">val</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">ListNode</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> removeElements = <span class="keyword">function</span>(<span class="params">head, val</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> retList = <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>, head);</span><br><span class="line">    <span class="keyword">let</span> current = retList;</span><br><span class="line">    <span class="keyword">while</span>(current.<span class="property">next</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (current.<span class="property">next</span>.<span class="property">val</span> === val) &#123;</span><br><span class="line">            current.<span class="property">next</span> = current.<span class="property">next</span>.<span class="property">next</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        current = current.<span class="property">next</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> retList.<span class="property">next</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="707-设计链表"><a href="#707-设计链表" class="headerlink" title="707. 设计链表"></a><a href="https://leetcode.cn/problems/design-linked-list/">707. 设计链表</a></h2><p>设计链表的实现。您可以选择使用单链表或双链表。单链表中的节点应该具有两个属性：val 和 next。val 是当前节点的值，next 是指向下一个节点的指针&#x2F;引用。如果要使用双向链表，则还需要一个属性 prev 以指示链表中的上一个节点。假设链表中的所有节点都是 0-index 的。</p><p>在链表类中实现这些功能：</p><ul><li>get(index)：获取链表中第 index 个节点的值。如果索引无效，则返回-1。</li><li>addAtHead(val)：在链表的第一个元素之前添加一个值为 val 的节点。插入后，新节点将成为链表的第一个节点。</li><li>addAtTail(val)：将值为 val 的节点追加到链表的最后一个元素。</li><li>addAtIndex(index,val)：在链表中的第 index 个节点之前添加值为 val  的节点。如果 <strong>index 等于链表的长度，则该节点将附加到链表的末尾</strong>。如果 index 大于链表长度，则不会插入节点。如果<strong>index小于0，则在头部插入节点</strong>。</li><li>deleteAtIndex(index)：如果索引 index 有效，则删除链表中的第 index 个节点。</li></ul><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">MyLinkedList linkedList = new MyLinkedList();</span><br><span class="line">linkedList.addAtHead(1);</span><br><span class="line">linkedList.addAtTail(3);</span><br><span class="line">linkedList.addAtIndex(1,2);   //链表变为1-&gt; 2-&gt; 3</span><br><span class="line">linkedList.get(1);            //返回2</span><br><span class="line">linkedList.deleteAtIndex(1);  //现在链表是1-&gt; 3</span><br><span class="line">linkedList.get(1);            //返回3</span><br></pre></td></tr></table></figure><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>添加链表节点：</p><p><img src="https://img-blog.csdnimg.cn/20200806195134331.png" alt="链表-添加节点"></p><p>删除链表节点：</p><p><img src="https://img-blog.csdnimg.cn/20200806195114541.png" alt="链表-删除节点"></p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义节点</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">val</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">val</span> = val;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">next</span> = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义链表</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">MyLinkedList</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 链表头和链表长度</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">head</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">length</span> = <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 根据索引获取元素</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">index</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">MyLinkedList</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">get</span> = <span class="keyword">function</span>(<span class="params">index</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (index &lt; -<span class="number">1</span> || index &gt;= <span class="variable language_">this</span>.<span class="property">length</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> current = <span class="variable language_">this</span>.<span class="property">head</span>;</span><br><span class="line">    <span class="keyword">let</span> position = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (position &lt; index) &#123;</span><br><span class="line">        current = current.<span class="property">next</span>;</span><br><span class="line">        position += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> current.<span class="property">val</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 头部添加元素</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">val</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">void</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">MyLinkedList</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">addAtHead</span> = <span class="keyword">function</span>(<span class="params">val</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> newNode = <span class="keyword">new</span> <span class="title class_">Node</span>(val);</span><br><span class="line">    newNode.<span class="property">next</span> = <span class="variable language_">this</span>.<span class="property">head</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">head</span> = newNode;  <span class="comment">// 更新头部为新节点</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">length</span> += <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 尾部添加元素</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">val</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">void</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">MyLinkedList</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">addAtTail</span> = <span class="keyword">function</span>(<span class="params">val</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> newNode = <span class="keyword">new</span> <span class="title class_">Node</span>(val);</span><br><span class="line">    <span class="keyword">let</span> current;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">head</span> === <span class="literal">null</span>) &#123;  <span class="comment">// 链表为空的情况</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">head</span> = newNode;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        current = <span class="variable language_">this</span>.<span class="property">head</span>;</span><br><span class="line">        <span class="keyword">while</span> (current.<span class="property">next</span>) &#123;</span><br><span class="line">            current = current.<span class="property">next</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        current.<span class="property">next</span> = newNode;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">length</span> += <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 在索引前插入新元素</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; index </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">val</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">void</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">MyLinkedList</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">addAtIndex</span> = <span class="keyword">function</span>(<span class="params">index, val</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (index &gt; <span class="variable language_">this</span>.<span class="property">length</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (index &lt;= <span class="number">0</span>) &#123;  <span class="comment">// 小于等于0的情况在头部前插入新元素</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">addAtHead</span>(val);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (index === <span class="variable language_">this</span>.<span class="property">length</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">addAtTail</span>(val);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> newNode = <span class="keyword">new</span> <span class="title class_">Node</span>(val);</span><br><span class="line">        <span class="keyword">let</span> current = <span class="variable language_">this</span>.<span class="property">head</span>;</span><br><span class="line">        <span class="keyword">let</span> position = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> preNode;</span><br><span class="line">        <span class="keyword">while</span> (position &lt; index) &#123;</span><br><span class="line">            preNode = current;</span><br><span class="line">            current = current.<span class="property">next</span>;</span><br><span class="line">            position += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        newNode.<span class="property">next</span> = current;</span><br><span class="line">        preNode.<span class="property">next</span> = newNode;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">length</span> += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 根据索引删除元素</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">index</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">void</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">MyLinkedList</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">deleteAtIndex</span> = <span class="keyword">function</span>(<span class="params">index</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= <span class="variable language_">this</span>.<span class="property">length</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">let</span> preNode;</span><br><span class="line">    <span class="keyword">let</span> position = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> current = <span class="variable language_">this</span>.<span class="property">head</span>;</span><br><span class="line">    <span class="keyword">if</span> (index === <span class="number">0</span>) &#123;  <span class="comment">// 删除头节点的情况</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">head</span> = current.<span class="property">next</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (position &lt; index) &#123;</span><br><span class="line">            preNode = current;</span><br><span class="line">            current = current.<span class="property">next</span>;</span><br><span class="line">            position += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        preNode.<span class="property">next</span> = current.<span class="property">next</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">length</span> -= <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> current.<span class="property">val</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MyLinkedList object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * var obj = new MyLinkedList()</span></span><br><span class="line"><span class="comment"> * var param_1 = obj.get(index)</span></span><br><span class="line"><span class="comment"> * obj.addAtHead(val)</span></span><br><span class="line"><span class="comment"> * obj.addAtTail(val)</span></span><br><span class="line"><span class="comment"> * obj.addAtIndex(index,val)</span></span><br><span class="line"><span class="comment"> * obj.deleteAtIndex(index)</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h2 id="206-反转链表"><a href="#206-反转链表" class="headerlink" title="206. 反转链表"></a><a href="https://leetcode.cn/problems/reverse-linked-list/">206. 反转链表</a></h2><p>给你单链表的头节点 <code>head</code> ，请你反转链表，并返回反转后的链表。</p><p>示例一：</p><p><img src="https://assets.leetcode.com/uploads/2021/02/19/rev1ex1.jpg" alt="img"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,2,3,4,5]</span><br><span class="line">输出：[5,4,3,2,1]</span><br></pre></td></tr></table></figure><p>示例二：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,2]</span><br><span class="line">输出：[2,1]</span><br></pre></td></tr></table></figure><p>示例三：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = []</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gnrf1oboupg30gy0c44qp.gif" alt="img"></p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val, next) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.next = (next===undefined ? null : next)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">ListNode</span>&#125; <span class="variable">head</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">ListNode</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//  双指针</span></span><br><span class="line"><span class="keyword">var</span> reverseList = <span class="keyword">function</span>(<span class="params">head</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!head || !head.<span class="property">next</span>) <span class="keyword">return</span> head;</span><br><span class="line">    <span class="keyword">let</span> preNode = <span class="literal">null</span>, current = head, temp = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">while</span> (current) &#123;</span><br><span class="line">        temp = current.<span class="property">next</span>;</span><br><span class="line">        current.<span class="property">next</span> = preNode;</span><br><span class="line">        preNode = current;</span><br><span class="line">        current = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> preNode;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法2 递归1：</span></span><br><span class="line"><span class="keyword">var</span> reverse = <span class="keyword">function</span>(<span class="params">pre, head</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(!head) <span class="keyword">return</span> pre;</span><br><span class="line">    <span class="keyword">const</span> temp = head.<span class="property">next</span>;</span><br><span class="line">    head.<span class="property">next</span> = pre;</span><br><span class="line">    pre = head</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">reverse</span>(pre, temp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reverseList = <span class="keyword">function</span>(<span class="params">head</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">reverse</span>(<span class="literal">null</span>, head);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法3：递归2</span></span><br><span class="line"><span class="keyword">var</span> reverse = <span class="keyword">function</span>(<span class="params">head</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(!head || !head.<span class="property">next</span>) <span class="keyword">return</span> head;</span><br><span class="line">    <span class="comment">// 从后往前翻</span></span><br><span class="line">    <span class="keyword">const</span> pre = <span class="title function_">reverse</span>(head.<span class="property">next</span>);</span><br><span class="line">    head.<span class="property">next</span> = pre.<span class="property">next</span>;</span><br><span class="line">    pre.<span class="property">next</span> = head;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reverseList = <span class="keyword">function</span>(<span class="params">head</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> cur = head;</span><br><span class="line">    <span class="keyword">while</span>(cur &amp;&amp; cur.<span class="property">next</span>) &#123;</span><br><span class="line">        cur = cur.<span class="property">next</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">reverse</span>(head);</span><br><span class="line">    <span class="keyword">return</span> cur;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="24-两两交换链表中的节点"><a href="#24-两两交换链表中的节点" class="headerlink" title="24. 两两交换链表中的节点"></a><a href="https://leetcode.cn/problems/swap-nodes-in-pairs/">24. 两两交换链表中的节点</a></h2><p>给你一个链表，两两交换其中相邻的节点，并返回交换后链表的头节点。你必须在不修改节点内部的值的情况下完成本题（即，只能进行节点交换）。</p><p>示例一：</p><p><img src="https://assets.leetcode.com/uploads/2020/10/03/swap_ex1.jpg" alt="img"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,2,3,4]</span><br><span class="line">输出：[2,1,4,3]</span><br></pre></td></tr></table></figure><p>示例二：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = []</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure><p>示例三：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1]</span><br><span class="line">输出：[1]</span><br></pre></td></tr></table></figure><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><p><img src="https://cdn.staticaly.com/gh/10wen/image-hosting@master/PicX-img/%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%BB%93%E7%82%B9.6crxtmky1es0.webp" alt="两两交换链表中结点"></p><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val, next) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.next = (next===undefined ? null : next)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">ListNode</span>&#125; <span class="variable">head</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">ListNode</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> swapPairs = <span class="keyword">function</span>(<span class="params">head</span>) &#123;</span><br><span class="line">    <span class="comment">// 创建虚拟头部指向链表头</span></span><br><span class="line">    <span class="keyword">let</span> virtualHead = <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>,head),</span><br><span class="line">        temp = virtualHead;</span><br><span class="line">    <span class="comment">// 判断链表是否还够两个节点交换</span></span><br><span class="line">    <span class="keyword">while</span> (temp.<span class="property">next</span> &amp;&amp; temp.<span class="property">next</span>.<span class="property">next</span>) &#123;</span><br><span class="line">        <span class="comment">// 更新交换的节点1作为preNode，节点2作为current</span></span><br><span class="line">        <span class="keyword">let</span> current = temp.<span class="property">next</span>.<span class="property">next</span>,</span><br><span class="line">            preNode = temp.<span class="property">next</span>;</span><br><span class="line">        preNode.<span class="property">next</span> = current.<span class="property">next</span>;  <span class="comment">// 先将节点1的next指向下一轮的节点1</span></span><br><span class="line">        current.<span class="property">next</span> = preNode;  <span class="comment">// 再将节点2的next指向节点1</span></span><br><span class="line">        temp.<span class="property">next</span> = current; <span class="comment">// 再将前一轮结点2的next指向当前轮的节点2</span></span><br><span class="line">        temp = preNode; <span class="comment">// 往前更新temp为当前轮的preNode,为更新preNode,current下一轮做准备</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> virtualHead.<span class="property">next</span>; <span class="comment">// 返回虚拟头部next指向的下一真实头部结点</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="19-删除链表的倒数第-N-个结点"><a href="#19-删除链表的倒数第-N-个结点" class="headerlink" title="19. 删除链表的倒数第 N 个结点"></a><a href="https://leetcode.cn/problems/remove-nth-node-from-end-of-list/">19. 删除链表的倒数第 N 个结点</a></h2><p>给你一个链表，删除链表的倒数第 <code>n</code> 个结点，并且返回链表的头结点。</p><p>示例一：</p><p><img src="https://assets.leetcode.com/uploads/2020/10/03/remove_ex1.jpg" alt="img"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,2,3,4,5], n = 2</span><br><span class="line">输出：[1,2,3,5]</span><br></pre></td></tr></table></figure><p>示例二：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1], n = 1</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure><p>示例三：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,2], n = 1</span><br><span class="line">输出：[1]</span><br></pre></td></tr></table></figure><h3 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h3><p>第一步：</p><p><img src="https://cdn.staticaly.com/gh/10wen/image-hosting@master/PicGo-img/%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%AC%ACn%E4%B8%AA%E7%BB%93%E7%82%B901.png" alt="删除链表第n个结点01"></p><p>第二步：</p><p><img src="https://cdn.staticaly.com/gh/10wen/image-hosting@master/PicGo-img/%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%AC%ACn%E4%B8%AA%E7%BB%93%E7%82%B902.png" alt="删除链表第n个结点02"></p><p>第三步：</p><p><img src="https://cdn.staticaly.com/gh/10wen/image-hosting@master/PicGo-img/%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%AC%ACn%E4%B8%AA%E7%BB%93%E7%82%B903.png" alt="删除链表第n个结点03"></p><p>第四步：</p><p><img src="https://cdn.staticaly.com/gh/10wen/image-hosting@master/PicX-img/%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%AC%ACn%E4%B8%AA%E7%BB%93%E7%82%B904.5mn46ak8ws00.webp" alt="删除链表第n个结点04"></p><h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a>题解</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val, next) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.next = (next===undefined ? null : next)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">ListNode</span>&#125; <span class="variable">head</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">n</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">ListNode</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 双指针法</span></span><br><span class="line"><span class="keyword">var</span> removeNthFromEnd = <span class="keyword">function</span>(<span class="params">head, n</span>) &#123;</span><br><span class="line">    <span class="comment">// 创建虚拟头节点</span></span><br><span class="line">    <span class="keyword">let</span> virtualHead = <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>, head),</span><br><span class="line">        slow = fast = virtualHead;</span><br><span class="line">    <span class="comment">// 先fast前进n结点</span></span><br><span class="line">    <span class="keyword">while</span> (n--) fast = fast.<span class="property">next</span>; </span><br><span class="line">    <span class="comment">// 再slow,fast一起前进，当fast指向尾结点时，slow指向目标结点的前一个结点</span></span><br><span class="line">    <span class="keyword">while</span> (fast.<span class="property">next</span> !== <span class="literal">null</span>) &#123;  </span><br><span class="line">        fast = fast.<span class="property">next</span>;</span><br><span class="line">        slow = slow.<span class="property">next</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    slow.<span class="property">next</span> = slow.<span class="property">next</span>.<span class="property">next</span>;</span><br><span class="line">    <span class="keyword">return</span> virtualHead.<span class="property">next</span>; <span class="comment">// 返回真实头节点</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算结点总数法</span></span><br><span class="line"><span class="keyword">var</span> removeNthFromEnd = <span class="keyword">function</span>(<span class="params">head, n</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> length = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> current = head;</span><br><span class="line">    <span class="comment">// 计算总结点</span></span><br><span class="line">    <span class="keyword">while</span>(current) &#123;</span><br><span class="line">        length += <span class="number">1</span>;</span><br><span class="line">        current = current.<span class="property">next</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (length === n) &#123;</span><br><span class="line">        head = head.<span class="property">next</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> position = <span class="number">0</span>;</span><br><span class="line">        current = head;</span><br><span class="line">        <span class="keyword">let</span> preNode;</span><br><span class="line">        <span class="comment">// 前进 length - n 个结点</span></span><br><span class="line">        <span class="keyword">while</span> (position &lt; length - n) &#123;</span><br><span class="line">            preNode = current;</span><br><span class="line">            current = current.<span class="property">next</span>;</span><br><span class="line">            position += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        preNode.<span class="property">next</span> = current.<span class="property">next</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="面试题-02-07-链表相交"><a href="#面试题-02-07-链表相交" class="headerlink" title="面试题 02.07. 链表相交"></a><a href="https://leetcode.cn/problems/intersection-of-two-linked-lists-lcci/">面试题 02.07. 链表相交</a></h2><p>给你两个单链表的头节点 headA 和 headB ，请你找出并返回两个单链表相交的起始节点。如果两个链表没有交点，返回 null 。</p><p>图示两个链表在节点 c1 开始相交：</p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_statement.png" alt="img"></p><p>题目数据 <strong>保证</strong> 整个链式结构中不存在环。</p><p><strong>注意</strong>，函数返回结果后，链表必须 <strong>保持其原始结构</strong> 。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_example_1.png" alt="img"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：intersectVal = 8, listA = [4,1,8,4,5], listB = [5,0,1,8,4,5], skipA = 2, skipB = 3</span><br><span class="line">输出：Intersected at &#x27;8&#x27;</span><br><span class="line">解释：相交节点的值为 8 （注意，如果两个链表相交则不能为 0）。从各自的表头开始算起，链表 A 为 [4,1,8,4,5]，链表 B 为 [5,0,1,8,4,5]。在 A 中，相交节点前有 2 个节点；在 B 中，相交节点前有 3 个节点。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_example_3.png" alt="img"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2</span><br><span class="line">输出：null</span><br><span class="line">解释：从各自的表头开始算起，链表 A 为 [2,6,4]，链表 B 为 [1,5]。由于这两个链表不相交，所以 intersectVal 必须为 0，而 skipA 和 skipB 可以是任意值。这两个链表不相交，因此返回 null。</span><br></pre></td></tr></table></figure><h3 id="思路-5"><a href="#思路-5" class="headerlink" title="思路"></a>思路</h3><p><strong>题目求求两个链表交点节点的指针，并不是结点值相等，而是指针相等</strong></p><ul><li>求出两个链表长度。</li><li>将长链表current指针指向和尾部对齐的另一链表的头部current指针。</li><li>比较currentA和currentB，不相等则一起向后移动，直至currentA&#x3D;&#x3D;currentB。</li></ul><p><img src="https://cdn.staticaly.com/gh/10wen/image-hosting@master/PicX-img/%E9%93%BE%E8%A1%A8%E7%9B%B8%E4%BA%A4.4xy6l35dgpc0.webp" alt="链表相交"></p><h3 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a>题解</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.next = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">ListNode</span>&#125; <span class="variable">head</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">Number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> getListlength = <span class="keyword">function</span>(<span class="params">head</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> length = <span class="number">0</span>,</span><br><span class="line">        current = head;</span><br><span class="line">    <span class="keyword">while</span>(current) &#123;</span><br><span class="line">        length ++;</span><br><span class="line">        current = current.<span class="property">next</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">ListNode</span>&#125; <span class="variable">headA</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">ListNode</span>&#125; <span class="variable">headB</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">ListNode</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> getIntersectionNode = <span class="keyword">function</span>(<span class="params">headA, headB</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> lenA = <span class="title function_">getListlength</span>(headA),</span><br><span class="line">        lenB = <span class="title function_">getListlength</span>(headB),</span><br><span class="line">        currentA = headA,</span><br><span class="line">        currentB = headB;</span><br><span class="line">    <span class="comment">// lenA小于lenB则交换链表，目的截取两个链表尾部共同长度部分</span></span><br><span class="line">    <span class="keyword">if</span> (lenA &lt; lenB) &#123;</span><br><span class="line">        [currentA, currentB] = [currentB, currentA];</span><br><span class="line">        [lenA, lenB] = [lenB, lenA];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> n = lenA - lenB;</span><br><span class="line">    <span class="keyword">while</span> (n--)&#123;</span><br><span class="line">        currentA = currentA.<span class="property">next</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (currentA &amp;&amp; currentA != currentB) &#123;</span><br><span class="line">        currentA = currentA.<span class="property">next</span>;</span><br><span class="line">        currentB = currentB.<span class="property">next</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> currentA;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="142-环形链表-II"><a href="#142-环形链表-II" class="headerlink" title="142. 环形链表 II"></a><a href="https://leetcode.cn/problems/linked-list-cycle-ii/">142. 环形链表 II</a></h2><p>给定一个链表的头节点  head ，返回链表开始入环的第一个节点。 如果链表无环，则返回 null。</p><p>如果链表中有某个节点，可以通过连续跟踪 next 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 pos 来表示链表尾连接到链表中的位置<strong>（索引从 0 开始）</strong>。如果 pos 是 -1，则在该链表中没有环。<strong>注意：pos 不作为参数进行传递</strong>，仅仅是为了标识链表的实际情况。</p><p><strong>不允许修改</strong>链表。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist.png" alt="img"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [3,2,0,-4], pos = 1</span><br><span class="line">输出：返回索引为 1 的链表节点</span><br><span class="line">解释：链表中有一个环，其尾部连接到第二个节点。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test2.png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,2], pos = 0</span><br><span class="line">输出：返回索引为 0 的链表节点</span><br><span class="line">解释：链表中有一个环，其尾部连接到第一个节点。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test3.png" alt="img"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1], pos = -1</span><br><span class="line">输出：返回 null</span><br><span class="line">解释：链表中没有环。</span><br></pre></td></tr></table></figure><h3 id="思路-6"><a href="#思路-6" class="headerlink" title="思路"></a>思路</h3><p><strong>运用快fast慢slow双指针，慢指针每次前进一个节点，快指针前进两个节点</strong></p><ul><li>判断链表是否环<ul><li>因为快指针相对慢指针以1的速度追赶慢指针，所以链表存在环则一定会环中相遇。</li></ul></li></ul><img src="https://tva1.sinaimg.cn/large/008eGmZEly1goo58gauidg30fw0bi4qr.gif" alt="142.环形链表II（求入口）" style="zoom: 90%;" /><ul><li>如果有环，如何找到这个环的入口<ul><li>当慢指针第一次进入环中，此时快指针在环中某个位置，如果慢指针走了一圈，则快指针会超过慢指针走了两圈，所以<strong>慢指针在环中的第一圈就会和快指针相遇</strong>。</li></ul></li></ul><img src="https://img-blog.csdnimg.cn/20210318162938397.png" alt="142环形链表2" style="zoom:80%;" /><p>fast指针走了n圈才遇到慢指针，快指针是慢指针2倍速度，则有<code>(x + y) * 2 = x + y + n (y + z)</code>，化简得到：<code>x = (n - 1) (y + z) + z</code>，<code>n = 1</code>时，<code>x = z</code>，<code>n != 1</code>时，n圈才相遇，<strong>x跟z的距离相等依旧成立</strong>*，所以得到从head和相遇结点以相同1个节点的速度出发的两个指针，相遇结点便是环的入口结点。 </p><h3 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.next = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">ListNode</span>&#125; <span class="variable">head</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">ListNode</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 方法一：先判断是否存在环</span></span><br><span class="line"><span class="keyword">var</span> detectCycle = <span class="keyword">function</span>(<span class="params">head</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!head || !head.<span class="property">next</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// slow指针每次走一步，fast两步</span></span><br><span class="line">    <span class="keyword">let</span> slow = head.<span class="property">next</span>, fast = head.<span class="property">next</span>.<span class="property">next</span>;</span><br><span class="line">    <span class="comment">// 如果存在环，slow，fast将指向同结点</span></span><br><span class="line">    <span class="keyword">while</span>(fast &amp;&amp; fast.<span class="property">next</span> &amp;&amp; slow != fast) &#123;</span><br><span class="line">        slow = slow.<span class="property">next</span>;</span><br><span class="line">        fast = fast.<span class="property">next</span>.<span class="property">next</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果fast指向null代表没有环</span></span><br><span class="line">    <span class="keyword">if</span> (!fast || !fast.<span class="property">next</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重置slow指向head，当slow，fast再次指向同一结点便是环的入口</span></span><br><span class="line">    slow = head; </span><br><span class="line">    <span class="keyword">while</span> (slow != fast) &#123;</span><br><span class="line">        slow = slow.<span class="property">next</span>;</span><br><span class="line">        fast = fast.<span class="property">next</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> slow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法二</span></span><br><span class="line"><span class="keyword">var</span> detectCycle = <span class="keyword">function</span>(<span class="params">head</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!head || !head.<span class="property">next</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">let</span> slow = head.<span class="property">next</span>, fast = head.<span class="property">next</span>.<span class="property">next</span>;</span><br><span class="line">    <span class="keyword">while</span> (fast &amp;&amp; fast.<span class="property">next</span>) &#123;</span><br><span class="line">        slow = slow.<span class="property">next</span>;</span><br><span class="line">        fast = fast.<span class="property">next</span>.<span class="property">next</span>;</span><br><span class="line">        <span class="keyword">if</span> (slow == fast) &#123;</span><br><span class="line">            slow = head;</span><br><span class="line">            <span class="keyword">while</span> (slow != fast) &#123;</span><br><span class="line">                slow = slow.<span class="property">next</span>;</span><br><span class="line">                fast = fast.<span class="property">next</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> slow;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> blog </tag>
            
            <tag> leetcode </tag>
            
            <tag> JavaScript链表 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS基础</title>
      <link href="/posts/1CSPW60.html"/>
      <url>/posts/1CSPW60.html</url>
      
        <content type="html"><![CDATA[<h2 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">* <span class="comment">/* 通配符 */</span></span><br><span class="line"><span class="selector-tag">p</span> <span class="comment">/* 元素选择器 */</span></span><br><span class="line"><span class="selector-id">#ele</span> <span class="comment">/* id选择器 */</span></span><br><span class="line"><span class="selector-class">.ele</span> <span class="comment">/* 类选择器 */</span></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.class1</span> <span class="comment">/* 交集选择器 */</span></span><br><span class="line"><span class="selector-class">.class1</span><span class="selector-class">.class2</span><span class="selector-class">.class3</span> <span class="comment">/* 交集选择器 */</span></span><br><span class="line"><span class="selector-id">#id1</span>, <span class="selector-tag">div</span><span class="selector-class">.clas1</span>, <span class="selector-id">#id1</span> <span class="comment">/* 并集选择器 */</span></span><br><span class="line"><span class="selector-tag">div</span> &gt; <span class="selector-tag">p</span> <span class="comment">/* 子代选择器 */</span></span><br><span class="line"><span class="selector-tag">div</span> <span class="selector-tag">p</span> <span class="comment">/* 后代选择器 */</span></span><br><span class="line"><span class="selector-tag">p</span> + <span class="selector-tag">span</span> <span class="comment">/* 下个兄弟选择器 */</span></span><br><span class="line"><span class="selector-tag">div</span> ~ <span class="selector-tag">p</span> <span class="comment">/* 选择div后面的全部p */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-attr">[title]</span> <span class="comment">/* 属性选择器 既是 p 又有title 属性*/</span></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-attr">[title=abc]</span> <span class="comment">/* 属性选择器 既是 p 又有title等于abc 属性*/</span></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-attr">[title^=abc]</span> <span class="comment">/* &lt;p title=&#x27;abcxasas&#x27;&gt;hello&lt;/p&gt; abc开头*/</span></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-attr">[title$=abc]</span> <span class="comment">/* &lt;p title=&#x27;asasfsfabc&#x27;&gt;hello&lt;/p&gt; abc结尾*/</span></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-attr">[title*=abc]</span> <span class="comment">/* &lt;p title=&#x27;asasasdfsfabcxas&#x27;&gt;hello&lt;/p&gt; 含有abc*/</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ul</span> &gt; <span class="selector-tag">li</span><span class="selector-pseudo">:first</span>-child <span class="comment">/* 伪类选择器 第一个li */</span></span><br><span class="line"><span class="selector-tag">ul</span> &gt; <span class="selector-tag">li</span><span class="selector-pseudo">:last-child</span> <span class="comment">/* 最后一个li */</span></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:only-child</span> <span class="comment">/* 属于p并且在父级元素中是唯一一个子元素 */</span></span><br><span class="line"><span class="selector-tag">ul</span> &gt; <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(n) <span class="comment">/* 全选li */</span></span><br><span class="line"><span class="selector-tag">ul</span> &gt; <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>n) <span class="comment">/* 偶数 或者写 :nth-child(even) */</span></span><br><span class="line"><span class="selector-tag">ul</span> &gt; <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>n+<span class="number">1</span>) <span class="comment">/* 奇数 或者写 :nth-child(odd) */</span></span><br><span class="line"><span class="selector-tag">ul</span> &gt; <span class="selector-tag">li</span><span class="selector-pseudo">:first</span>-of-type <span class="comment">/* 同类型元素第一个li */</span></span><br><span class="line"><span class="selector-tag">ul</span> &gt; <span class="selector-tag">li</span><span class="selector-pseudo">:last-of-type</span> <span class="comment">/* 同类型的元素最后一个li */</span></span><br><span class="line"><span class="selector-tag">ul</span> &gt; <span class="selector-tag">li</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">2</span>n+<span class="number">1</span>) <span class="comment">/* 同类型的元素 奇数li */</span></span><br><span class="line"><span class="selector-tag">ul</span> &gt; <span class="selector-tag">li</span><span class="selector-pseudo">:not</span>(<span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>)) <span class="comment">/* 选中ul下所有li,除了第二个li */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span> <span class="comment">/* 还没访问的超链接 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> <span class="comment">/* 访问过的超链接 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> <span class="comment">/* 鼠标悬停 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span> <span class="comment">/* 鼠标点击 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::first-letter</span> <span class="comment">/* 伪元素 p标签内容的第一个字母 */</span></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::first-line</span> <span class="comment">/* 伪元素 p标签内容的第一行 */</span></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::selection</span> <span class="comment">/* 伪元素 鼠标选中的内容选中 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 元素开始位置 */</span></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;[&#x27;</span>;</span><br><span class="line">    <span class="attribute">color</span>: aquamarine;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 元素结束位置 */</span></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;]&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="css基础知识点"><a href="#css基础知识点" class="headerlink" title="css基础知识点"></a>css基础知识点</h2><ul><li><p>继承特性:<br>背景相关, 布局相关 不会被继承</p></li><li><p>选择器权重<br>内联样式 &gt; id选择器 &gt; 类和伪类选择器 &gt; 元素选择器 &gt; 通配选择器 &gt; 继承样式<br>优先级相同，优先使用下面的</p></li><li><p>长度单位</p><ul><li>屏幕像素 px</li><li>相对于父级元素的 百分比 10%</li><li>em : 1 em &#x3D; 1 font-size 大小</li><li>rem: 相对于根元素 html 的 font-size 字体大小</li></ul></li><li><p>颜色单位：</p><ul><li>HSL: H 色相 0 - 360，S 饱和度 100%， L 亮度 100%</li><li>rgb: rgb(0,233,255) 0-255</li></ul></li><li><p>文档流</p><ul><li>块级元素： 默认宽度为父级全部， 高度默认是内容高度</li><li>行内元素：默认高度和宽度都是内容的宽高</li></ul></li><li><p>盒子模型：盒子大小：边框 + 内边距 + 内容</p><ul><li>border：10px red solid; 影响盒子的整体大小，边框外部就是 盒子外部<ul><li>border-width 默认3px 三个值代表上、左右、下, </li><li>border-color 默认使用 color 值，不指定的话</li><li>border-style: solid; 默认 none</li></ul></li><li>padding: 会影响盒子大小，背景颜色延申到内边距</li><li>content : width, height 指定的是 content 内容区的大小</li><li>margin</li></ul></li><li><p>水平布局 </p><ul><li>margin-left + border-left + padding-left + content + padding-right + border-right + margin-right &#x3D; 父级元素的内容 content 宽度</li><li>margin-right 会自动调整 正负数时的等式成立</li><li>width 和 margin 同时为 auto 时，width 最大，margin 为 0</li></ul></li><li><p>垂直布局</p><ul><li>溢出：overflow： hidden，visible，scroll滚动条，auto根据需要生成滚动条</li></ul></li><li><p>垂直相邻元素外边距重叠</p><ul><li>div1 margin-bottom: 100, div2 margin-top: 200px, 两个元素距离 200px 一正一负取和</li></ul></li><li><p>子元素外边距会传递到父元素</p></li><li><p>行内元素不支持宽高设置</p></li><li><p>垂直方向的padding，border，margin不影响布局，盖住其他元素，水平方向相邻元素不重叠</p></li><li><p>display: inline-block 可以设置宽高，不会独占一行</p></li><li><p>visibility: hidden; 隐藏后占据位置，display: none; 隐藏后不占据位置</p></li><li><p>去除默认样式 <code>* &#123; margin: 0;padding: 0; &#125;</code></p></li><li><p>设置字体垂直居中于父级，设置父级的 line-height 为父级高度即可</p></li><li><p>box-sizing: 设置盒子尺寸计算方式，设置width height 的作用方式</p><ul><li>box-sizing: content-box, width height 指的是内容content的宽高</li><li>box-sizing: border-box,  width, height 指的是 content + padding + border 的总宽高</li></ul></li><li><p>轮廓</p><ul><li>outline： 1px solid red 轮廓不影响布局、大小，只是添加了个轮廓</li></ul></li><li><p>阴影</p><ul><li>box-shadow: black; 默认跟元素大小一致， 处于元素正下方</li><li>box-shadow: 10px 10px red; 水平偏移量 和 垂直偏移量 不影响布局</li><li>box-shadow: 10px 10px 10px rgba(0, 0, 0, 0.5); 水平偏移量、垂直偏移量、阴影模糊半径，颜色以及透明度</li></ul></li><li><p>圆角</p><ul><li>border-radius: 10px; 圆角半径</li><li>border-radius： 10px&#x2F;20px; x轴半径，y轴半径</li><li>border-top-left-radius： 10px 20px; x轴半径，y轴半径</li><li>border-radius： 10px 20px 30px; 左上 右上和左下 右下</li><li>border-radius: 50%; 画圆</li></ul></li><li><p>float: left&#x2F;right; </p><ul><li>元素脱离文档流；<ul><li>块级元素不会独占一行，宽高被内容撑开</li><li>行内元素变成块级元素，可以设置宽高</li></ul></li><li>元素靠父级元素边界左&#x2F;右侧移动</li><li>浮动元素间不会重叠</li><li>上边y轴位置不会超过兄弟元素</li><li>浮动元素不会盖住文字</li></ul></li><li><p>解决父元素因没有设置宽高而子元素浮动带来的高度塌陷或子元素带来外边距的影响</p><ul><li>BFC(Block Formatting Context) 块级格式化环境，<ul><li>开启方法：overflow: hidden&#x2F;auto （父子关系）</li><li>元素开启BFC后会变成一个独立的布局区域</li><li>不会被兄弟浮动元素覆盖</li><li>子元素外边距不会传递到开启BFC的父元素</li><li>BFC父元素可以包含浮动子元素</li></ul></li><li>设置clear属性为left&#x2F;right&#x2F;both （兄弟关系）<ul><li>left清除左侧浮动元素带来的影响</li><li>right清除右侧浮动元素带来的影响</li><li>both清除两侧中较大高度的浮动元素带来的影响</li></ul></li><li>父元素添加一个属性设置clear:both的元素（内墙法），通过html结构解决css表现上的问题</li><li>（优）通过伪类解决：父元素<code>.box1::after&#123; content: &#39;&#39;; display: block; clear:both; &#125;</code>，也可以解决外边距重叠</li></ul></li><li><p>封装同时解决高度塌陷和外边距重叠问题的解决方案</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="attribute">display</span>: table;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>相对定位relative：位置相对于原来自身位置，提高层级，不会改变性质，块还是块，行内还是行内</p></li><li><p>绝对定位absolute：位置相对于离自己的最近开启定位的祖先元素或者根元素（html初始包含块）提高层级，会改变性质，行内变成块，不写宽高块的宽高被内容撑开</p><ul><li>left + margin-left + border-left + padding-left + content + padding-right + border-right + margin-right + right &#x3D; 父级元素的内容 content 宽度</li><li>绝对定位元素水平居中需要left和right设置为0，在使用margin:0 auto居中，因为left、right默认为auto，垂直居中同理，top和bottom设置为0</li></ul></li><li><p>固定定位fixed：位置相对于浏览器窗口，会改变性质，行内变成块，不写宽高块的宽高被内容撑开</p></li><li><p>粘滞定位sticky：top0px; 滚动窗口到顶部后就不动了，粘滞</p></li><li><p>可以auto的值：width, left, right, margin</p></li><li><p>字体</p><ul><li>color</li><li>font-family: serif衬线字体&#x2F;sans-serif非衬线字体&#x2F;monospace等宽字体</li><li>font-size</li><li>服务器提供字体 <code>@font-face&#123; font-family: &#39;name&#39;; src: url() &#125;</code></li></ul></li><li><p>文本</p><ul><li>text-align 水平对齐</li><li>vertical-align 垂直对齐</li><li>解决img元素底部出现空白缝隙，使用vertical-align解决</li><li>text-decoration 文本修饰</li><li>white-space: nowrap不换行&#x2F;pre保留空白原本输出文本格式与内容</li><li>text-overflow: ellipsis超出的文本用省略号代替，还需要容器设置宽度、文本不换行nowrap</li></ul></li><li><p>背景</p><ul><li>background-color</li><li>background-image: <ul><li>url()</li><li>linear-gradient(red,yellow,…)上到下渐变</li><li>linear-gradient(red 50px起始渐变位置,yellow)上到下渐变</li><li>linear-gradient(to right&#x2F;to top&#x2F;0deg&#x2F;45deg度&#x2F;.25turn圈,red,yellow)不同方向渐变</li><li>repeat-linear-gradient(red,yellow,…)重复渐变</li><li>radial-gradient(circle正圆,red,yellow,…)径向渐变（中心向四周）</li><li>radial-gradient(100px 100px at 0 0在哪个个位置开始大小为100x100,red,yellow,…)</li><li>radial-gradient(at top right,red,yellow,…)</li><li>radial-gradient(closest-side&#x2F;closest-corner&#x2F;farthest-side&#x2F;farthest-corner,red,yellow,…)近远边近远边远角</li></ul></li><li>background-image: repeat-x&#x2F;repeat-y&#x2F;no-repeat 容器大于图片的图片重复方式</li><li>background-position: center center 图片位置 需要两个值 或者是水平和垂直的偏移量</li><li>background-clip: padding-box背景不会出现在边框&#x2F;content-box背景只出现在内容区</li><li>background-origin: border-box&#x2F;padding-box&#x2F;content-box 背景图片偏移量的计算源点</li><li>background-size: 100%背景图片宽度撑满容器高度auto&#x2F;cover图片比例不变撑满容器&#x2F;contain图片比例不变将图片完整显示在容器</li><li>background-attachment: fixed; 背景不会跟随元素滚动</li><li>background: #bfc url() center center&#x2F;contain no-repeat</li></ul></li><li><p>table</p><ul><li>border-collapse; 合并边框</li><li>div可设置display:table-ceil; 使用vertical-align垂直居中</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript链表定义以及常见操作</title>
      <link href="/posts/395Q25S.html"/>
      <url>/posts/395Q25S.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>部分图和题解来自：<a href="https://programmercarl.com/">https://programmercarl.com/</a></p></blockquote><p>链表是一种物理存储结构上非连续，非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的。</p><h2 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h2><p>单链表是一种链式存取的数据结构，链表中的数据是以结点来表示的，每个结点由数据域和指针域构成。</p><p><img src="https://img-blog.csdnimg.cn/20200806194529815.png" alt="链表1"></p><h3 id="单链表的常见操作"><a href="#单链表的常见操作" class="headerlink" title="单链表的常见操作"></a>单链表的常见操作</h3><ol><li><p>append(value) ：向链表尾部添加新节点</p></li><li><p>removeAt(index)：根据索引移除节点，返回数据域</p></li></ol><p><img src="https://img-blog.csdnimg.cn/20200806195114541.png" alt="链表-删除节点"></p><ol start="3"><li>insert(index,value):  向链表的特定位置插入新节点，返回boolean值</li></ol><p><img src="https://img-blog.csdnimg.cn/20200806195134331.png" alt="链表-添加节点"></p><ol start="4"><li><p>get(index):  获取对应索引的节点</p></li><li><p>indexOf(value): 返回元素在链表中的索引。如果没有该元素返回 -1</p></li><li><p>update(index,value) : 修改某个位置的元素，返回boolean值</p></li><li><p>isEmpty()：链表是否为空</p></li><li><p>size()：返回链表包含的元素个数。</p></li><li><p>toString()： 由于链表使用了Node类，就需要重写继承自JavaScript对象默认的toString方法，链表转字符串</p></li></ol><h3 id="单链表的定义"><a href="#单链表的定义" class="headerlink" title="单链表的定义"></a>单链表的定义</h3><p><strong>符号说明：</strong></p><blockquote><p>current：暂存当前节点</p><p>preNode：暂存当前节点的前一节点</p><p>position：当前节点索引</p><p>value：节点数据域</p><p>next：节点下一节点指针</p><p>head：链表头指针</p><p>length：链表长度</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义节点</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">val</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">value</span> = val;  <span class="comment">// 数据域</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">next</span> = <span class="literal">null</span>;  <span class="comment">// 指针域</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义链表</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LinkedList</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">head</span> = <span class="literal">null</span>; <span class="comment">// 链表头指针</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">length</span> = <span class="number">0</span>;  <span class="comment">// 链表长度</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 向链表尾部添加新节点</span></span><br><span class="line">    <span class="title function_">append</span>(<span class="params">value</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> node = <span class="keyword">new</span> <span class="title class_">Node</span>(value);</span><br><span class="line">        <span class="keyword">let</span> current; <span class="comment">// 暂存当前节点</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">head</span> === <span class="literal">null</span>) &#123; <span class="comment">//头节点为空</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">head</span> = node;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            current = <span class="variable language_">this</span>.<span class="property">head</span>;</span><br><span class="line">            <span class="keyword">while</span> (current.<span class="property">next</span>) &#123; <span class="comment">// 遍历查询链表尾部</span></span><br><span class="line">                current = current.<span class="property">next</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            current.<span class="property">next</span> = node;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">length</span>++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 根据索引移除节点，返回数据域</span></span><br><span class="line">    <span class="title function_">removeAt</span>(<span class="params">index</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= <span class="variable language_">this</span>.<span class="property">length</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">let</span> preNode;</span><br><span class="line">        <span class="keyword">let</span> current = <span class="variable language_">this</span>.<span class="property">head</span>;</span><br><span class="line">        <span class="keyword">let</span> position = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (index === <span class="number">0</span>) &#123; <span class="comment">// 删除头节点</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">head</span> = current.<span class="property">next</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (position &lt; index) &#123;</span><br><span class="line">                preNode = current;</span><br><span class="line">                current = current.<span class="property">next</span>;</span><br><span class="line">                position++;</span><br><span class="line">            &#125;</span><br><span class="line">            preNode.<span class="property">next</span> = current.<span class="property">next</span>; <span class="comment">// 前节点指针域指向当前节点的下一个节点</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">length</span>--;</span><br><span class="line">        <span class="keyword">return</span> current.<span class="property">value</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 向链表的特定位置插入新节点，返回Boolean值</span></span><br><span class="line">    <span class="title function_">insert</span>(<span class="params">index,value</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; <span class="variable language_">this</span>.<span class="property">length</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">let</span> node = <span class="keyword">new</span> <span class="title class_">Node</span>(value);</span><br><span class="line">        <span class="keyword">let</span> current = <span class="variable language_">this</span>.<span class="property">head</span>;</span><br><span class="line">        <span class="keyword">let</span> preNode;</span><br><span class="line">        <span class="keyword">let</span> position = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (index === <span class="number">0</span>) &#123;</span><br><span class="line">            node.<span class="property">next</span> = current;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">head</span> = node;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (position &lt; index) &#123;</span><br><span class="line">                preNode = current;</span><br><span class="line">                current = current.<span class="property">next</span>;</span><br><span class="line">                position++;</span><br><span class="line">            &#125;</span><br><span class="line">            node.<span class="property">next</span> = current;  <span class="comment">// 先将新节点的指针域指向当前节点</span></span><br><span class="line">            preNode.<span class="property">next</span> = node;  <span class="comment">// 再更新前一节点的指针域指向新节点</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">length</span>++;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取对应索引的节点数据域</span></span><br><span class="line">    <span class="title function_">getAt</span>(<span class="params">index</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= <span class="variable language_">this</span>.<span class="property">length</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> position = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> current = <span class="variable language_">this</span>.<span class="property">head</span>;</span><br><span class="line">        <span class="keyword">while</span> (position &lt; index) &#123;</span><br><span class="line">            current = current.<span class="property">next</span>;</span><br><span class="line">            position++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> current.<span class="property">value</span>; <span class="comment">// 返回数据域</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 返回元素在链表中的索引。如果没有该元素返回 -1</span></span><br><span class="line">    <span class="title function_">indexOf</span>(<span class="params">value</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">length</span> === <span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">let</span> current = <span class="variable language_">this</span>.<span class="property">head</span>;</span><br><span class="line">        <span class="keyword">let</span> position = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (position &lt; <span class="variable language_">this</span>.<span class="property">length</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (current.<span class="property">value</span> == value) &#123;</span><br><span class="line">                <span class="keyword">return</span> position; <span class="comment">// 返回索引</span></span><br><span class="line">            &#125;</span><br><span class="line">            current = current.<span class="property">next</span>;</span><br><span class="line">            position++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;  <span class="comment">// 查找失败</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 修改某个位置的元素</span></span><br><span class="line">    <span class="title function_">update</span>(<span class="params">index,value</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= <span class="variable language_">this</span>.<span class="property">length</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">let</span> position = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> current = <span class="variable language_">this</span>.<span class="property">head</span>;</span><br><span class="line">        <span class="keyword">while</span> (position &lt; index) &#123;</span><br><span class="line">            current = current.<span class="property">next</span>;</span><br><span class="line">            position++;</span><br><span class="line">        &#125;</span><br><span class="line">        current.<span class="property">value</span> = value; <span class="comment">// 更新值</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 链表是否为空</span></span><br><span class="line">    <span class="title function_">isEmpty</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="variable language_">this</span>.<span class="property">length</span> === <span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 返回链表包含的元素个数</span></span><br><span class="line">    <span class="title function_">size</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">length</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 链表转换成字符串 value1,value2,value3</span></span><br><span class="line">    <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> current = <span class="variable language_">this</span>.<span class="property">head</span>;</span><br><span class="line">        <span class="keyword">let</span> str = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="keyword">while</span> (current) &#123;</span><br><span class="line">            str += current.<span class="property">value</span> + ((current.<span class="property">next</span> ? <span class="string">&#x27;,&#x27;</span>: <span class="string">&#x27;&#x27;</span>));</span><br><span class="line">            current = current.<span class="property">next</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="双链表"><a href="#双链表" class="headerlink" title="双链表"></a>双链表</h2><blockquote><p>原文链接：<a href="https://blog.csdn.net/qq_44810886/article/details/124540822">https://blog.csdn.net/qq_44810886/article/details/124540822</a></p></blockquote><p>双向链表和单向链表的区别是双向链表比单向链表每个节点多一个头指针，这个指针指向前一个节点，每个节点包含包含头指针、数据域、尾指针， 因此从这个节点可以同时访问到它前面和后面的节点。</p><p><img src="https://img-blog.csdnimg.cn/20200806194559317.png" alt="链表2"></p><h3 id="双链表的常见操作"><a href="#双链表的常见操作" class="headerlink" title="双链表的常见操作"></a>双链表的常见操作</h3><ol><li><p>append(element) ：向列表尾部添加一个新的项</p></li><li><p>insert(position,element): 向列表的特定位置插入一个新的项</p></li><li><p>get(position): 获取对应位置的元素</p></li><li><p>indexOf(element): 返回元素在列表中的索引。如果没有该元素返回-1</p></li><li><p>updata(position,element) : 修改某个位置的元素</p></li><li><p>removeAt(position)：从列表的特定位置移除某一项</p></li><li><p>remove(element)：从列表中移除一项</p></li><li><p>isEmpty()：如果链表中不包含任何元素，返回true，如果链表长度大于0则返回false</p></li><li><p>size() ：返回链表包含的元素个数。与数组的length属性类似</p></li><li><p>toString()： 由于列表使用了Node类，就需要重写继承自JavaScript对象默认的toString方法，让其只输出元素的值</p></li><li><p>forwardString()：返回正向遍历的节点字符串形式</p></li><li><p>backwardString()：返回反向遍历的节点字符串形式</p></li></ol><h3 id="双链表的函数式定义"><a href="#双链表的函数式定义" class="headerlink" title="双链表的函数式定义"></a>双链表的函数式定义</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> <span class="comment">//封装双向链表</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">DoublyLinkedList</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//内部类：节点类</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">Node</span>(<span class="params">data</span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">data</span> = data;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">prev</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">next</span> = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">head</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">tail</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">length</span> = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//常见的操作封装</span></span><br><span class="line"><span class="title class_">DoublyLinkedList</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">append</span> = <span class="keyword">function</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="comment">//1.根据data创建节点</span></span><br><span class="line">    <span class="keyword">var</span> newNode = <span class="keyword">new</span> <span class="title class_">Node</span>(data)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.判断添加的是否是第一个节点</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">length</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">head</span> = newNode</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">tail</span> = newNode</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        newNode.<span class="property">prev</span> = <span class="variable language_">this</span>.<span class="property">tail</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">tail</span>.<span class="property">next</span> = newNode;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">tail</span> = newNode;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">length</span> += <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将链表转换成字符串形式</span></span><br><span class="line"><span class="comment">//2.1 toString</span></span><br><span class="line"><span class="title class_">DoublyLinkedList</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">backwardString</span>()</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.2 forwardString方法</span></span><br><span class="line"><span class="title class_">DoublyLinkedList</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">forwardString</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//1.定义变量</span></span><br><span class="line">    <span class="keyword">var</span> current = <span class="variable language_">this</span>.<span class="property">tail</span>;</span><br><span class="line">    <span class="keyword">var</span> resultString = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="comment">//2.依次向前遍历，获取每一个节点</span></span><br><span class="line">    <span class="keyword">while</span> (current) &#123;</span><br><span class="line">        resultString += current.<span class="property">data</span> + <span class="string">&quot; &quot;</span>;</span><br><span class="line">        current = current.<span class="property">prev</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> resultString</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.3 backwardString方法</span></span><br><span class="line"><span class="title class_">DoublyLinkedList</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">backwardString</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//1. 定义变量</span></span><br><span class="line">    <span class="keyword">var</span> current = <span class="variable language_">this</span>.<span class="property">head</span>; <span class="comment">//指向了第一个</span></span><br><span class="line">    <span class="keyword">var</span> resultString = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="comment">//2.依次向后遍历，获取每一个节点</span></span><br><span class="line">    <span class="keyword">while</span> (current) &#123; <span class="comment">//只要current有值</span></span><br><span class="line">        resultString += current.<span class="property">data</span> + <span class="string">&quot; &quot;</span>;</span><br><span class="line">        current = current.<span class="property">next</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> resultString</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//insert</span></span><br><span class="line"><span class="title class_">DoublyLinkedList</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">insert</span> = <span class="keyword">function</span>(<span class="params">position, data</span>) &#123;</span><br><span class="line">    <span class="comment">//1. 越界判断</span></span><br><span class="line">    <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt; <span class="variable language_">this</span>.<span class="property">length</span>) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment">//2.根据data创建新的节点</span></span><br><span class="line">    <span class="keyword">var</span> newNode = <span class="keyword">new</span> <span class="title class_">Node</span>(data)</span><br><span class="line">    <span class="comment">//3. 判断原来的列表是否为空</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">length</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">head</span> = newNode</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">tail</span> = newNode</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (position == <span class="number">0</span>) &#123; <span class="comment">//3.1 判断position是否为0</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">head</span>.<span class="property">prev</span> = newNode; <span class="comment">//原来的第一个节点的prev指向新插入的节点</span></span><br><span class="line">            newNode.<span class="property">next</span> = <span class="variable language_">this</span>.<span class="property">head</span>; <span class="comment">//指向原来的第一个节点</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">head</span> = newNode;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (position == <span class="variable language_">this</span>.<span class="property">length</span>) &#123; <span class="comment">//插入到最后一个节点</span></span><br><span class="line">            newNode.<span class="property">prev</span> = <span class="variable language_">this</span>.<span class="property">tail</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">tail</span>.<span class="property">next</span> = newNode;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">tail</span> = newNode;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">//插入到中间节点</span></span><br><span class="line">            <span class="keyword">var</span> current = <span class="variable language_">this</span>.<span class="property">head</span>;</span><br><span class="line">            <span class="keyword">var</span> index = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (index++ &lt; position) &#123;</span><br><span class="line">                current = current.<span class="property">next</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//修改指针</span></span><br><span class="line">            newNode.<span class="property">next</span> = current;</span><br><span class="line">            newNode.<span class="property">prev</span> = current.<span class="property">prev</span>;</span><br><span class="line">            current.<span class="property">prev</span>.<span class="property">next</span> = newNode;</span><br><span class="line">            current.<span class="property">prev</span> = newNode;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">length</span> += <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//get方法</span></span><br><span class="line"><span class="title class_">DoublyLinkedList</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">get</span> = <span class="keyword">function</span>(<span class="params">position</span>) &#123;</span><br><span class="line">    <span class="comment">//1. 越界判断，注意后面有=</span></span><br><span class="line">    <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt;= <span class="variable language_">this</span>.<span class="property">length</span>) <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    <span class="comment">// 思路：this.length/2 &gt;position  从头向后遍历</span></span><br><span class="line">    <span class="comment">// this.length/2 &lt;position  从后向头遍历</span></span><br><span class="line">    <span class="comment">//2.获取元素</span></span><br><span class="line">    <span class="keyword">var</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> current = <span class="variable language_">this</span>.<span class="property">head</span>;</span><br><span class="line">    <span class="keyword">while</span> (index++ &lt; position) &#123;</span><br><span class="line">        current = current.<span class="property">next</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> current.<span class="property">data</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//indexOf</span></span><br><span class="line"><span class="title class_">DoublyLinkedList</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">indexOf</span> = <span class="keyword">function</span>(<span class="params">element</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> current = <span class="variable language_">this</span>.<span class="property">head</span>;</span><br><span class="line">    <span class="keyword">var</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (current) &#123;</span><br><span class="line">        <span class="keyword">if</span> (current.<span class="property">data</span> == element) &#123;</span><br><span class="line">            <span class="keyword">return</span> index</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            current = current.<span class="property">next</span></span><br><span class="line">            index += <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//updata方法</span></span><br><span class="line"><span class="title class_">DoublyLinkedList</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">updata</span> = <span class="keyword">function</span>(<span class="params">position, newData</span>) &#123;</span><br><span class="line">    <span class="comment">//1. 越界判断，注意后面有=</span></span><br><span class="line">    <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt;= <span class="variable language_">this</span>.<span class="property">length</span>) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">var</span> current = <span class="variable language_">this</span>.<span class="property">head</span>;</span><br><span class="line">    <span class="keyword">var</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (index++ &lt; position) &#123;</span><br><span class="line">        current = current.<span class="property">next</span></span><br><span class="line">    &#125;</span><br><span class="line">    current.<span class="property">data</span> = newData</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//removeAt</span></span><br><span class="line"><span class="title class_">DoublyLinkedList</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">removeAt</span> = <span class="keyword">function</span>(<span class="params">position</span>) &#123;</span><br><span class="line">    <span class="comment">//1. 越界判断，注意后面有=</span></span><br><span class="line">    <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt;= <span class="variable language_">this</span>.<span class="property">length</span>) <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    <span class="comment">//2.判断是否只有一个节点</span></span><br><span class="line">    <span class="keyword">var</span> current = <span class="variable language_">this</span>.<span class="property">head</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">length</span> == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">head</span> = <span class="literal">null</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">tail</span> = <span class="literal">null</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//判断是否删除的是第一个节点</span></span><br><span class="line">        <span class="keyword">if</span> (position == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">head</span>.<span class="property">next</span>.<span class="property">prev</span> = <span class="literal">null</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">head</span> = <span class="variable language_">this</span>.<span class="property">head</span>.<span class="property">next</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (position == <span class="variable language_">this</span>.<span class="property">length</span> - <span class="number">1</span>) &#123;</span><br><span class="line">            current = <span class="variable language_">this</span>.<span class="property">tail</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">tail</span>.<span class="property">prev</span>.<span class="property">next</span> = <span class="literal">null</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">tail</span> = <span class="variable language_">this</span>.<span class="property">tail</span>.<span class="property">prev</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (index++ &lt; position) &#123;</span><br><span class="line">                current = current.<span class="property">next</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            current.<span class="property">prev</span>.<span class="property">next</span> = current.<span class="property">next</span>;</span><br><span class="line">            current.<span class="property">next</span>.<span class="property">prev</span> = current.<span class="property">prev</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3. </span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">length</span> -= <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> current.<span class="property">data</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//remove方法</span></span><br><span class="line"><span class="title class_">DoublyLinkedList</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">remove</span> = <span class="keyword">function</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="comment">//1.根据data获取下标</span></span><br><span class="line">    <span class="keyword">var</span> index = <span class="variable language_">this</span>.<span class="title function_">indexOf</span>(data)</span><br><span class="line">    <span class="comment">//2. 根据index删除对应位置的节点</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">removeAt</span>(index)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="title class_">DoublyLinkedList</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">isEmpty</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">length</span> == <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">DoublyLinkedList</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">size</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">length</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">DoublyLinkedList</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getHead</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">head</span>.<span class="property">data</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">DoublyLinkedList</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getTail</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">tail</span>.<span class="property">data</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> blog </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript DOM 编程艺术|阅读笔记</title>
      <link href="/posts/3C0MK88.html"/>
      <url>/posts/3C0MK88.html</url>
      
        <content type="html"><![CDATA[<h2 id="获取元素与属性"><a href="#获取元素与属性" class="headerlink" title="获取元素与属性"></a>获取元素与属性</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;p&#x27;</span>)</span><br><span class="line"></span><br><span class="line">node.<span class="title function_">getAttribute</span>(<span class="string">&#x27;href&#x27;</span>)</span><br><span class="line"></span><br><span class="line">node.<span class="title function_">setAttribute</span>(<span class="string">&#x27;src&#x27;</span>, <span class="string">&#x27;img/img.png&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="封装windowOnload加载函数："><a href="#封装windowOnload加载函数：" class="headerlink" title="封装windowOnload加载函数："></a>封装windowOnload加载函数：</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">addLoadEvent</span>(<span class="params">func</span>)&#123;</span><br><span class="line">  <span class="keyword">let</span> oldonload = <span class="variable language_">window</span>.<span class="property">onload</span>;</span><br><span class="line">  <span class="keyword">if</span>( <span class="keyword">typeof</span> <span class="variable language_">window</span>.<span class="property">onload</span> != <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">onload</span> = func;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="title function_">oldonload</span>();</span><br><span class="line">      <span class="title function_">func</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  使用</span></span><br><span class="line"><span class="title function_">addLoadEvent</span>(firstFunc)</span><br><span class="line"><span class="title function_">addLoadEvent</span>(secondFunc)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="创建元素"><a href="#创建元素" class="headerlink" title="创建元素"></a>创建元素</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(text)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">innerHtml</span> = <span class="string">&#x27;&lt;p&gt;hello&lt;/p&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;p&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line"></span><br><span class="line">parentNode.<span class="title function_">appendChild</span>(child)</span><br><span class="line"></span><br><span class="line">parentNode.<span class="title function_">insertBefore</span>(newElement, targetElement)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="封装插入元素到目标元素后："><a href="#封装插入元素到目标元素后：" class="headerlink" title="封装插入元素到目标元素后："></a>封装插入元素到目标元素后：</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">insertAfter</span>(<span class="params">newElement, targetElement</span>)&#123;</span><br><span class="line"><span class="keyword">let</span> parent = targetElement.<span class="property">parentNode</span>;</span><br><span class="line">    <span class="keyword">if</span> (parent.<span class="property">lastChild</span> == targetElement) &#123;</span><br><span class="line">        parent.<span class="title function_">appendChild</span>(newElement);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        parent.<span class="title function_">insertBefore</span>(newElement, targetElement.<span class="property">nextSibling</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="封装动画移动-absolute-元素到指定位置："><a href="#封装动画移动-absolute-元素到指定位置：" class="headerlink" title="封装动画移动 absolute 元素到指定位置："></a>封装动画移动 absolute 元素到指定位置：</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">moveElement</span>(<span class="params">elementId, final_x, final_y, interval</span>) &#123; </span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">document</span>.<span class="property">getElementById</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(elementId)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">let</span> elem = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(elementId);</span><br><span class="line">    <span class="keyword">let</span> xpos = <span class="built_in">parseInt</span>(elem.<span class="property">style</span>.<span class="property">left</span>);</span><br><span class="line">    <span class="keyword">let</span> ypos = <span class="built_in">parseInt</span>(elem.<span class="property">style</span>.<span class="property">top</span>);</span><br><span class="line">    <span class="keyword">let</span> dist = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (elem.<span class="property">movement</span>) &#123;</span><br><span class="line">        <span class="built_in">clearTimeout</span>(elem.<span class="property">movement</span>)</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">if</span> (!elem.<span class="property">style</span>.<span class="property">left</span>) elem.<span class="property">style</span>.<span class="property">left</span> = <span class="string">&quot;0px&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (!elem.<span class="property">style</span>.<span class="property">top</span>) elem.<span class="property">style</span>.<span class="property">top</span> = <span class="string">&quot;0px&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (xpos == final_x &amp;&amp; ypos == final_y) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (xpos &lt; final_x) &#123;</span><br><span class="line">        dist = <span class="title class_">Math</span>.<span class="title function_">ceil</span>((final_x - xpos) / <span class="number">10</span>);</span><br><span class="line">        xpos += dist;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">if</span> (xpos &gt; final_x) &#123;</span><br><span class="line">        dist = <span class="title class_">Math</span>.<span class="title function_">ceil</span>((xpos - final_x) / <span class="number">10</span>);</span><br><span class="line">        xpos -= dist;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ypos &lt; final_y) &#123;</span><br><span class="line">        dist = <span class="title class_">Math</span>.<span class="title function_">ceil</span>((final_y - ypos) / <span class="number">10</span>);</span><br><span class="line">        ypos += dist;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ypos &gt; final_y) &#123;</span><br><span class="line">        dist = <span class="title class_">Math</span>.<span class="title function_">ceil</span>((ypos - final_y) / <span class="number">10</span>);</span><br><span class="line">        ypos -= dist;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    elem.<span class="property">style</span>.<span class="property">left</span> = xpos + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">    elem.<span class="property">style</span>.<span class="property">top</span> = ypos + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> repeat = <span class="string">`moveElement(&#x27;<span class="subst">$&#123;elementId&#125;</span>&#x27;, <span class="subst">$&#123;final_x&#125;</span>, <span class="subst">$&#123;final_y&#125;</span>, <span class="subst">$&#123;interval&#125;</span>)`</span>;</span><br><span class="line">    elem.<span class="property">movement</span> = <span class="built_in">setTimeout</span>(repeat, interval);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="获取XMLHttpRequest对象"><a href="#获取XMLHttpRequest对象" class="headerlink" title="获取XMLHttpRequest对象"></a>获取XMLHttpRequest对象</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getHttpObject</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="title class_">XMLHttpRequest</span> == <span class="string">&quot;undefined&quot;</span>) &#123;</span><br><span class="line">        <span class="title class_">XMLHttpRequest</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ActiveXObject</span>(<span class="string">&quot;Msxml2.XMLHTTP.6.0&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (e) &#123;&#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ActiveXObject</span>(<span class="string">&quot;Msxml2.XMLHTTP.3.0&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (e) &#123;&#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ActiveXObject</span>(<span class="string">&quot;Msxml2.XMLHTTP&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (e) &#123;&#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getNewContent</span>(<span class="params"></span>) &#123;  </span><br><span class="line">    <span class="keyword">let</span> request = <span class="title function_">getHttpObject</span>();</span><br><span class="line">    <span class="keyword">if</span> (request) &#123;</span><br><span class="line">        request.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;example.txt&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">        request.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (request.<span class="property">readyState</span> = <span class="number">4</span>) &#123;</span><br><span class="line">                <span class="keyword">let</span> para = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;p&quot;</span>);</span><br><span class="line">                <span class="keyword">let</span> txt = <span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(request.<span class="property">responseText</span>);</span><br><span class="line">                para.<span class="title function_">appendChild</span>(txt);</span><br><span class="line">                <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;new&quot;</span>).<span class="title function_">appendChild</span>(para);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        request.<span class="title function_">setRequestHeader</span>(<span class="string">&quot;Content-type&quot;</span>, <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>);</span><br><span class="line">        request.<span class="title function_">send</span>(<span class="literal">null</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&quot;Sorry, your browser doesn\&#x27;t support XMLHTTPRequest&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript DOM </tag>
            
            <tag> JavaScript </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-数组</title>
      <link href="/posts/2VG5F47.html"/>
      <url>/posts/2VG5F47.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>部分图和题解来自：<a href="https://programmercarl.com/">https://programmercarl.com/</a></p></blockquote><h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2><p>给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target  ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。</p><p>示例 1:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: nums = [-1,0,3,5,9,12], target = 9</span><br><span class="line">输出: 4</span><br><span class="line">解释: 9 出现在 nums 中并且下标为 4</span><br></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: nums = [-1,0,3,5,9,12], target = 2</span><br><span class="line">输出: -1</span><br><span class="line">解释: 2 不存在 nums 中因此返回 -1</span><br></pre></td></tr></table></figure><h3 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">target</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 左右闭区间</span></span><br><span class="line"><span class="keyword">var</span> search = <span class="keyword">function</span>(<span class="params">nums, target</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> index = -<span class="number">1</span>,</span><br><span class="line">        left = <span class="number">0</span>,</span><br><span class="line">        right = nums.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(left &lt;= right) &#123;</span><br><span class="line">        <span class="keyword">const</span> mid = left + <span class="title class_">Math</span>.<span class="title function_">floor</span>((right - left) / <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; target) &#123;</span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            index = mid;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> index;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 左闭右开区间</span></span><br><span class="line"><span class="keyword">var</span> search = <span class="keyword">function</span>(<span class="params">nums, target</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> index = -<span class="number">1</span>,</span><br><span class="line">        left = <span class="number">0</span>,</span><br><span class="line">        right = nums.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">while</span>(left &lt; right) &#123;</span><br><span class="line">        <span class="keyword">const</span> mid = left + <span class="title class_">Math</span>.<span class="title function_">floor</span>((right - left) / <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; target) &#123;</span><br><span class="line">            right = mid;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            index = mid;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> index;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="移除元素"><a href="#移除元素" class="headerlink" title="移除元素"></a>移除元素</h2><p>给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。</p><p>不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。</p><p>元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</p><p>说明:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">为什么返回数值是整数，但输出的答案是数组呢?</span><br><span class="line"></span><br><span class="line">请注意，输入数组是以「引用」方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。</span><br><span class="line"></span><br><span class="line">你可以想象内部操作如下:</span><br><span class="line"></span><br><span class="line">// nums 是以“引用”方式传递的。也就是说，不对实参作任何拷贝</span><br><span class="line">int len = removeElement(nums, val);</span><br><span class="line"></span><br><span class="line">// 在函数里修改输入数组对于调用者是可见的。</span><br><span class="line">// 根据你的函数返回的长度, 它会打印出数组中 该长度范围内 的所有元素。</span><br><span class="line">for (int i = 0; i &lt; len; i++) &#123;</span><br><span class="line">    print(nums[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例 1：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [3,2,2,3], val = 3</span><br><span class="line">输出：2, nums = [2,2]</span><br><span class="line">解释：函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。你不需要考虑数组中超出新长度后面的元素。例如，函数返回的新长度为 2 ，而 nums = [2,2,3,3] 或 nums = [2,2,0,0]，也会被视作正确答案。</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [0,1,2,2,3,0,4,2], val = 2</span><br><span class="line">输出：5, nums = [0,1,4,0,3]</span><br><span class="line">解释：函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。注意这五个元素可为任意顺序。你不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure><h3 id="题解：-1"><a href="#题解：-1" class="headerlink" title="题解："></a>题解：</h3><p><strong>提示：</strong>数组的元素在内存地址中是连续的，不能单独删除数组中的某个元素，只能覆盖。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">val</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> removeElement = <span class="keyword">function</span>(<span class="params">nums, val</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> newLength = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[i] != val) &#123;</span><br><span class="line">            nums[newLength ++] = nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newLength;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="有序数组的平方"><a href="#有序数组的平方" class="headerlink" title="有序数组的平方"></a>有序数组的平方</h2><p>给你一个按 非递减顺序 排序的整数数组 nums，返回 每个数字的平方 组成的新数组，要求也按 非递减顺序 排序。</p><p>示例 1：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [-4,-1,0,3,10]</span><br><span class="line">输出：[0,1,9,16,100]</span><br><span class="line">解释：平方后，数组变为 [16,1,0,9,100]</span><br><span class="line">排序后，数组变为 [0,1,9,16,100]</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [-7,-3,2,3,11]</span><br><span class="line">输出：[4,9,9,49,121]</span><br></pre></td></tr></table></figure><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p><img src="https://code-thinking.cdn.bcebos.com/gifs/977.%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E5%B9%B3%E6%96%B9.gif"></p><h3 id="题解：-2"><a href="#题解：-2" class="headerlink" title="题解："></a>题解：</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 方法一</span></span><br><span class="line"><span class="keyword">var</span> sortedSquares = <span class="keyword">function</span>(<span class="params">nums</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;nums.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        nums[i] = nums[i] ** <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nums.<span class="title function_">sort</span>(<span class="function">(<span class="params">a,b</span>) =&gt;</span> a - b);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法二：双指针法（时间优）</span></span><br><span class="line"><span class="keyword">var</span> sortedSquares = <span class="keyword">function</span>(<span class="params">nums</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> len = nums.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">let</span> newArray = <span class="keyword">new</span> <span class="title class_">Array</span>(len);</span><br><span class="line">    <span class="keyword">let</span> left = <span class="number">0</span>,</span><br><span class="line">        right = len - <span class="number">1</span>,</span><br><span class="line">        n = len - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">        <span class="keyword">let</span> leftN = nums[left] ** <span class="number">2</span>,</span><br><span class="line">            rightN = nums[right] ** <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (leftN &lt; rightN) &#123;</span><br><span class="line">            newArray[n--] = rightN;</span><br><span class="line">            right --;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            newArray[n--] = leftN;</span><br><span class="line">            left ++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newArray;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="长度最小的连续子数组"><a href="#长度最小的连续子数组" class="headerlink" title="长度最小的连续子数组"></a>长度最小的连续子数组</h2><p>给定一个含有 n 个正整数的数组和一个正整数 target 。</p><p>找出该数组中满足其和 ≥ target 的长度最小的 连续子数组 [numsl, numsl+1, …, numsr-1, numsr] ，并返回其长度。如果不存在符合条件的子数组，返回 0 。</p><p>示例 1：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：target = 7, nums = [2,3,1,2,4,3]</span><br><span class="line">输出：2</span><br><span class="line">解释：子数组 [4,3] 是该条件下的长度最小的子数组。</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：target = 4, nums = [1,4,4]</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure><p>示例 3：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：target = 11, nums = [1,1,1,1,1,1,1,1]</span><br><span class="line">输出：0</span><br></pre></td></tr></table></figure><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p><img src="https://code-thinking.cdn.bcebos.com/gifs/209.%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84.gif"></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 超时做法</span></span><br><span class="line"><span class="keyword">var</span> minSubArrayLen = <span class="keyword">function</span>(<span class="params">target, nums</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> len = nums.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> minL = len + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> subL = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;len; i++) &#123;</span><br><span class="line">        sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j=i; j&lt;len; j++) &#123;</span><br><span class="line">            sum += nums[j];</span><br><span class="line">            <span class="keyword">if</span> (sum &gt;= target) &#123;</span><br><span class="line">                subL = (j-i) + <span class="number">1</span>;</span><br><span class="line">                minL = minL &lt; subL ? <span class="attr">minL</span>: subL; </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> minL &gt; len ? <span class="number">0</span> : minL;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确做法（时间优）</span></span><br><span class="line"><span class="keyword">var</span> minSubArrayLen = <span class="keyword">function</span>(<span class="params">target, nums</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> len = nums.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">let</span> left = right = sum = <span class="number">0</span>; <span class="comment">// left,right分别为滑动窗口的起始和终点</span></span><br><span class="line">    <span class="keyword">let</span> minL = len + <span class="number">1</span>;   <span class="comment">// 子数组最长数组都不应大于自身长度</span></span><br><span class="line">    <span class="keyword">while</span> (right &lt; len) &#123;</span><br><span class="line">        sum += nums[right];</span><br><span class="line">        <span class="comment">// 滑动窗口</span></span><br><span class="line">        <span class="keyword">while</span> (sum &gt;= target) &#123;</span><br><span class="line">            <span class="keyword">let</span> subL = right - left + <span class="number">1</span>;</span><br><span class="line">            minL = minL &lt; subL ? minL : subL;  <span class="comment">//始终保持最小长度</span></span><br><span class="line">            sum -= nums[left ++]  <span class="comment">// 试着减去起始数</span></span><br><span class="line">        &#125;</span><br><span class="line">        right ++; <span class="comment">// 整体右移动</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> minL &gt; len ? <span class="number">0</span> : minL;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="螺旋矩阵II"><a href="#螺旋矩阵II" class="headerlink" title="螺旋矩阵II"></a>螺旋矩阵II</h2><p>给你一个正整数 n ，生成一个包含 1 到 n2 所有元素，且元素按顺时针顺序螺旋排列的 n x n 正方形矩阵 matrix 。</p><p> <img src="https://assets.leetcode.com/uploads/2020/11/13/spiraln.jpg"></p><p>示例 1：</p><p>输入：n &#x3D; 3<br>输出：[[1,2,3],[8,9,4],[7,6,5]]<br>示例 2：</p><p>输入：n &#x3D; 1<br>输出：[[1]]</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p><img src="https://img-blog.csdnimg.cn/2020121623550681.png"></p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">n</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[][]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> generateMatrix = <span class="keyword">function</span>(<span class="params"> n </span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> startX = startY = <span class="number">0</span>;  <span class="comment">// 每一圈的起始位置</span></span><br><span class="line">    <span class="keyword">let</span> loop = <span class="title class_">Math</span>.<span class="title function_">floor</span>( n/<span class="number">2</span> );  <span class="comment">// 旋转的圈数</span></span><br><span class="line">    <span class="keyword">let</span> mid = <span class="title class_">Math</span>.<span class="title function_">floor</span>( n/<span class="number">2</span> );</span><br><span class="line">    <span class="keyword">let</span> countSet = <span class="number">0</span>;  <span class="comment">// 每一层已经填充的数量</span></span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">1</span>; <span class="comment">// 更新待填充的数字</span></span><br><span class="line">    <span class="keyword">let</span> result = <span class="keyword">new</span> <span class="title class_">Array</span>(n).<span class="title function_">fill</span>(<span class="number">0</span>).<span class="title function_">map</span>(<span class="function">()=&gt;</span> <span class="keyword">new</span> <span class="title class_">Array</span>(n).<span class="title function_">fill</span>(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>( loop-- ) &#123;</span><br><span class="line">        <span class="keyword">let</span> row = startX, col = startY;</span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 上行从左到右 （左闭右开）+startX 是加上col值所损失的迭代次数</span></span><br><span class="line">        <span class="keyword">for</span> ( ; col &lt; (n - countSet - <span class="number">1</span>) + startX; col++ ) &#123;</span><br><span class="line">            result[row][col] = count++;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// 右列从上到下（左闭右开）</span></span><br><span class="line">        <span class="keyword">for</span> ( ; row &lt; (n - countSet - <span class="number">1</span>) + startY; row++ ) &#123;</span><br><span class="line">            result[row][col] = count++;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// 下行从右到左（左闭右开）</span></span><br><span class="line">        <span class="keyword">for</span> ( ; col &gt; startX; col-- ) &#123;</span><br><span class="line">            result[row][col] = count++;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// 左列做下到上（左闭右开）</span></span><br><span class="line">        <span class="keyword">for</span> ( ; row &gt; startY; row-- ) &#123;</span><br><span class="line">            result[row][col] = count++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 更新起始位置</span></span><br><span class="line">        startX ++; </span><br><span class="line">        startY ++;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 更新每一层已经填充的数量</span></span><br><span class="line">        countSet += <span class="number">2</span>; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 填充奇数层情况的中心点</span></span><br><span class="line">    <span class="keyword">if</span> ( n%<span class="number">2</span> != <span class="number">0</span> ) &#123;</span><br><span class="line">        result[mid][mid] = count;</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> blog </tag>
            
            <tag> 二分查找 </tag>
            
            <tag> leetcode </tag>
            
            <tag> JavaScript数组 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github+PicGo/PicX 搭建免费图床</title>
      <link href="/posts/26RXQJW.html"/>
      <url>/posts/26RXQJW.html</url>
      
        <content type="html"><![CDATA[<p>使用 Github 搭配图片上传工具PicGo或者PicX搭建免费图床，配置Markdown编辑器Typora自动上传图片，并配置CDN加速访问</p><h2 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h2><blockquote><p>公开Github仓库，下文以<code>10wen/image-hosting</code>为例；</p><p>工具：<a href="https://molunerfinn.com/PicGo/">下载PicGo工具</a>，<a href="https://picx.xpoet.cn/">PicX官网</a></p></blockquote><h2 id="生成-token"><a href="#生成-token" class="headerlink" title="生成 token"></a>生成 token</h2><p><strong>地址：</strong><a href="https://github.com/settings/tokens">Generate new token</a></p><p><strong>注意：</strong>生成token后保存下来，避免刷新页面token被隐藏</p><p><img src="https://s2.loli.net/2022/08/03/lMVySokNsZzLFW2.png" alt="image-20220803145438167"></p><h2 id="Github搭配PicGo-Typora"><a href="#Github搭配PicGo-Typora" class="headerlink" title="Github搭配PicGo+Typora"></a>Github搭配PicGo+Typora</h2><p>打开PicGo上传区选择Github</p><h3 id="PicGo配置Github"><a href="#PicGo配置Github" class="headerlink" title="PicGo配置Github"></a>PicGo配置Github</h3><p><img src="https://s2.loli.net/2022/08/03/MjY8wASzWRiQ63b.png" alt="image-20220803150209881"></p><p>为了达到加速访问，配置CDN外链<strong>设定自定义域名：</strong><code>https://cdn.staticaly.com/gh/用户名/仓库名@分支名</code>，例如：<code>https://cdn.staticaly.com/gh/10wen/image-hosting@master</code></p><h3 id="PicGo设置"><a href="#PicGo设置" class="headerlink" title="PicGo设置"></a>PicGo设置</h3><p>开启PicGo-Serve保持默认地址<code>127.0.0.1</code>以及端口<code>36677</code>，打开上传重命名，</p><p><img src="https://s2.loli.net/2022/08/03/ZpQ9ChqVK8k16Ud.png" alt="image-20220803151417376"></p><h3 id="Typora偏好设置-图像"><a href="#Typora偏好设置-图像" class="headerlink" title="Typora偏好设置-图像"></a>Typora偏好设置-图像</h3><p><img src="https://s2.loli.net/2022/08/03/fUBAv8LjlembzcJ.png" alt="image-20220803152347684"></p><h3 id="验证图片上传"><a href="#验证图片上传" class="headerlink" title="验证图片上传"></a>验证图片上传</h3><p>向typora插入图片出现如下效果：</p><p><img src="https://s2.loli.net/2022/08/03/Vsq8BLuTAw3Hl1W.png" alt="image-20220803152824851"></p><p>重命名上传图片后发现图片地址改为外链地址则为配置成功，愉快的写文章</p><h2 id="Github搭配PicX"><a href="#Github搭配PicX" class="headerlink" title="Github搭配PicX"></a>Github搭配PicX</h2><h3 id="打开PicX官网-图床配置"><a href="#打开PicX官网-图床配置" class="headerlink" title="打开PicX官网-图床配置"></a>打开PicX官网-图床配置</h3><p><img src="https://s2.loli.net/2022/08/03/VIcQy76jlWd9MvS.png" alt="image-20220803153451134"></p><p>完成配置即可</p><h2 id="关于图片外链地址"><a href="#关于图片外链地址" class="headerlink" title="关于图片外链地址"></a>关于图片外链地址</h2><h3 id="没有配置CDN："><a href="#没有配置CDN：" class="headerlink" title="没有配置CDN："></a>没有配置CDN：</h3><p>原生github静态资源地址</p><p><code>https://raw.githubusercontent.com/&#123;user&#125;/&#123;repo&#125;/&#123;branch&#125;/&#123;folderpath&#125;/&#123;filename&#125;</code></p><p>例如：<code>https://raw.githubusercontent.com/10wen/image-hosting/master/PicGo-img/example.png</code></p><h3 id="配置CDN外链："><a href="#配置CDN外链：" class="headerlink" title="配置CDN外链："></a>配置CDN外链：</h3><h4 id="jsdelivr"><a href="#jsdelivr" class="headerlink" title="jsdelivr"></a>jsdelivr</h4><p>自定义域名：<code>https://cdn.jsdelivr.net/gh/&#123;user&#125;/&#123;repo&#125;</code></p><p>图片地址：<code>https://cdn.jsdelivr.net/gh/&#123;user&#125;/&#123;repo&#125;/&#123;folderpath&#125;/&#123;filename&#125;</code></p><p>例如：<code>https://cdn.jsdelivr.net/gh/10wen/image-hosting/PicGo-img/example.png</code></p><h4 id="staticaly"><a href="#staticaly" class="headerlink" title="staticaly"></a>staticaly</h4><p>自定义域名：<code>https://cdn.staticaly.com/gh/&#123;user&#125;/&#123;repo&#125;@&#123;branch&#125;</code></p><p>图片地址：<code>https://cdn.staticaly.com/gh/&#123;user&#125;/&#123;repo&#125;@&#123;branch&#125;/&#123;folderpath&#125;/&#123;filename&#125;</code></p><p>例如：<code>https://cdn.staticaly.com/gh/10wen/image-hosting@master/PicGo-img/20220803155716.png</code></p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
            <tag> blog </tag>
            
            <tag> 图床 </tag>
            
            <tag> CDN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用 Github Actions 自动部署 Hexo 博客 - Sanonz</title>
      <link href="/posts/S0FZ3J.html"/>
      <url>/posts/S0FZ3J.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址 <a href="https://sanonz.github.io/2020/deploy-a-hexo-blog-from-github-actions/">sanonz.github.io</a></p></blockquote><blockquote><p>介绍 Github Actions 可以很方便实现 CI&#x2F;CD 工作流，类似 Travis 的用法，来帮我们完成一些工作，比如实现自动化测试、打包、部署等操作。</p></blockquote><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a><a href="#%E4%BB%8B%E7%BB%8D" title="介绍"></a>介绍</h2><p>Github Actions 可以很方便实现 CI&#x2F;CD 工作流，类似 Travis 的用法，来帮我们完成一些工作，比如实现自动化测试、打包、部署等操作。当我们运行 Jobs 时，它会创建一个容器 (runner)，容器支持：Ubuntu、Windows 和 MacOS 等系统，在容器中我们可以安装软件，利用安装的软件帮我们处理一些数据，然后把处理好的数据推送到某个地方。</p><p>本文将介绍利用 Github Actions 实现自动部署 hexo 到 Github Pages，在之前我们需要写完文章执行 <code>hexo generate --deploy</code> 来部署，当你文章比较多的时候，可能还需要等待很久，而且还可能会遇到本地安装的 Node.js 版本与 Hexo 不兼容的问题，目前我就是因为电脑的 Node.js 版本升到 v14 版本导致与 Hexo 不兼容部署不了，才来捣腾 Github Actions 功能的。利用 Github Actions 你将会没有这些烦恼。</p><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a><a href="#%E5%89%8D%E6%8F%90" title="前提"></a>前提</h2><h3 id="创建所需仓库"><a href="#创建所需仓库" class="headerlink" title="创建所需仓库"></a><a href="#%E5%88%9B%E5%BB%BA%E6%89%80%E9%9C%80%E4%BB%93%E5%BA%93" title="创建所需仓库"></a>创建所需仓库</h3><ol><li>创建 <code>blog</code> 仓库用来存放 Hexo 项目</li><li>创建 <code>your.github.io</code> 仓库用来存放静态博客页面</li></ol><h3 id="生成部署密钥"><a href="#生成部署密钥" class="headerlink" title="生成部署密钥"></a><a href="#%E7%94%9F%E6%88%90%E9%83%A8%E7%BD%B2%E5%AF%86%E9%92%A5" title="生成部署密钥"></a>生成部署密钥</h3><p>一路按回车直到生成成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -f github-deploy-key</span><br></pre></td></tr></table></figure><p>当前目录下会有 <code>github-deploy-key</code> 和 <code>github-deploy-key.pub</code> 两个文件。</p><h3 id="配置部署密钥"><a href="#配置部署密钥" class="headerlink" title="配置部署密钥"></a><a href="#%E9%85%8D%E7%BD%AE%E9%83%A8%E7%BD%B2%E5%AF%86%E9%92%A5" title="配置部署密钥"></a>配置部署密钥</h3><p>复制 <code>github-deploy-key</code> 文件内容，在 <code>blog</code> 仓库 <code>Settings -&gt; Secrets -&gt; Add a new secret</code> 页面上添加。</p><ol><li>在 <code>Name</code> 输入框填写 <code>HEXO_DEPLOY_PRI</code>。</li><li>在 <code>Value</code> 输入框填写 <code>github-deploy-key</code> 文件内容。</li></ol><p><img src="https://sanonz.github.io/2020/deploy-a-hexo-blog-from-github-actions/add-secret@2x.png"></p><p>复制 <code>github-deploy-key.pub</code> 文件内容，在 <code>your.github.io</code> 仓库 <code>Settings -&gt; Deploy keys -&gt; Add deploy key</code> 页面上添加。</p><ol><li>在 <code>Title</code> 输入框填写 <code>HEXO_DEPLOY_PUB</code>。</li><li>在 <code>Key</code> 输入框填写 <code>github-deploy-key.pub</code> 文件内容。</li><li>勾选 <code>Allow write access</code> 选项。</li></ol><p><img src="https://sanonz.github.io/2020/deploy-a-hexo-blog-from-github-actions/add-key@2x.png"></p><h2 id="编写-Github-Actions"><a href="#编写-Github-Actions" class="headerlink" title="编写 Github Actions"></a><a href="#%E7%BC%96%E5%86%99-Github-Actions" title="编写 Github Actions"></a>编写 Github Actions</h2><h3 id="Workflow-模版"><a href="#Workflow-模版" class="headerlink" title="Workflow 模版"></a><a href="#Workflow-%E6%A8%A1%E7%89%88" title="Workflow 模版"></a>Workflow 模版</h3><p>在 <code>blog</code> 仓库根目录下创建 <code>.github/workflows/deploy.yml</code> 文件，目录结构如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">blog (repository)</span><br><span class="line">└── .github</span><br><span class="line">    └── workflows</span><br><span class="line">        └── deploy.yml</span><br></pre></td></tr></table></figure><p>在 <code>deploy.yml</code> 文件中粘贴以下内容。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">name: CI</span><br><span class="line"></span><br><span class="line">on:</span><br><span class="line">  push:</span><br><span class="line">    branches:</span><br><span class="line">      - master</span><br><span class="line"></span><br><span class="line">env:</span><br><span class="line">  GIT_USER: Sanonz</span><br><span class="line">  GIT_EMAIL: sanonz@126.com</span><br><span class="line">  THEME_REPO: sanonz/hexo-theme-concise</span><br><span class="line">  THEME_BRANCH: master</span><br><span class="line">  DEPLOY_REPO: sanonz/sanonz.github.io</span><br><span class="line">  DEPLOY_BRANCH: master</span><br><span class="line"></span><br><span class="line">jobs:</span><br><span class="line">  build:</span><br><span class="line">    name: Build on node $&#123;&#123; matrix.node_version &#125;&#125; and $&#123;&#123; matrix.os &#125;&#125;</span><br><span class="line">    runs-on: ubuntu-latest</span><br><span class="line">    strategy:</span><br><span class="line">      matrix:</span><br><span class="line">        os: [ubuntu-latest]</span><br><span class="line">        node_version: [12.x]</span><br><span class="line"></span><br><span class="line">    steps:</span><br><span class="line">      - name: Checkout</span><br><span class="line">        uses: actions/checkout@v2</span><br><span class="line"></span><br><span class="line">      - name: Checkout theme repo</span><br><span class="line">        uses: actions/checkout@v2</span><br><span class="line">        with:</span><br><span class="line">          repository: $&#123;&#123; env.THEME_REPO &#125;&#125;</span><br><span class="line">          ref: $&#123;&#123; env.THEME_BRANCH &#125;&#125;</span><br><span class="line">          path: themes/concise</span><br><span class="line"></span><br><span class="line">      - name: Checkout deploy repo</span><br><span class="line">        uses: actions/checkout@v2</span><br><span class="line">        with:</span><br><span class="line">          repository: $&#123;&#123; env.DEPLOY_REPO &#125;&#125;</span><br><span class="line">          ref: $&#123;&#123; env.DEPLOY_BRANCH &#125;&#125;</span><br><span class="line">          path: .deploy_git</span><br><span class="line"></span><br><span class="line">      - name: Use Node.js $&#123;&#123; matrix.node_version &#125;&#125;</span><br><span class="line">        uses: actions/setup-node@v1</span><br><span class="line">        with:</span><br><span class="line">          node-version: $&#123;&#123; matrix.node_version &#125;&#125;</span><br><span class="line"></span><br><span class="line">      - name: Configuration environment</span><br><span class="line">        env:</span><br><span class="line">          HEXO_DEPLOY_PRI: $&#123;&#123;secrets.HEXO_DEPLOY_PRI&#125;&#125;</span><br><span class="line">        run: |</span><br><span class="line">          sudo timedatectl set-timezone &quot;Asia/Shanghai&quot;</span><br><span class="line">          mkdir -p ~/.ssh/</span><br><span class="line">          echo &quot;$HEXO_DEPLOY_PRI&quot; &gt; ~/.ssh/id_rsa</span><br><span class="line">          chmod 600 ~/.ssh/id_rsa</span><br><span class="line">          ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts</span><br><span class="line">          git config --global user.name $GIT_USER</span><br><span class="line">          git config --global user.email $GIT_EMAIL</span><br><span class="line">          cp _config.theme.yml themes/concise/_config.yml</span><br><span class="line"></span><br><span class="line">      - name: Install dependencies</span><br><span class="line">        run: |</span><br><span class="line">          npm install hexo-cli -g</span><br><span class="line">          npm install</span><br><span class="line"></span><br><span class="line">      - name: Deploy hexo</span><br><span class="line">        run: |</span><br><span class="line">          hexo clean</span><br><span class="line">          hexo generate</span><br><span class="line">          hexo deploy</span><br></pre></td></tr></table></figure><h3 id="模版参数说明"><a href="#模版参数说明" class="headerlink" title="模版参数说明"></a><a href="#%E6%A8%A1%E7%89%88%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E" title="模版参数说明"></a>模版参数说明</h3><ul><li><em>name</em> 为此 Action 的名字</li><li><em>on</em> 触发条件，当满足条件时会触发此任务，这里的 <code>on.push.branches.$.master</code> 是指当 <code>master</code> 分支收到 <code>push</code> 后执行任务。</li><li><em>env</em> 为环境变量对象<ul><li><em>env.GIT_USER</em> 为 Hexo 编译后使用此 git 用户部署到仓库。</li><li><em>env.GIT_EMAIL</em> 为 Hexo 编译后使用此 git 邮箱部署到仓库。</li><li><em>env.THEME_REPO</em> 为您的 Hexo 所使用的主题的仓库，这里为 <code>sanonz/hexo-theme-concise</code>。</li><li><em>env.THEME_BRANCH</em> 为您的 Hexo 所使用的主题仓库的版本，可以是：branch、tag 或者 SHA。</li><li><em>env.DEPLOY_REPO</em> 为 Hexo 编译后要部署的仓库，例如：<code>sanonz/sanonz.github.io</code>。</li><li><em>env.DEPLOY_BRANCH</em> 为 Hexo 编译后要部署到的分支，例如：master。</li></ul></li><li><em>jobs</em> 为此 Action 下的任务列表<ul><li><em>jobs.{job}.name</em> 任务名称</li><li><em>jobs.{job}.runs-on</em> 任务所需容器，可选值：<code>ubuntu-latest</code>、<code>windows-latest</code>、<code>macos-latest</code>。</li><li><em>jobs.{job}.strategy</em> 策略下可以写 <code>array</code> 格式，此 job 会遍历此数组执行。</li><li><em>jobs.{job}.steps</em> 一个步骤数组，可以把所要干的事分步骤放到这里。<ul><li><em>jobs.{job}.steps.$.name</em> 步骤名，编译时会会以 LOG 形式输出。</li><li><em>jobs.{job}.steps.$.uses</em> 所要调用的 Action，可以到 <a href="https://github.com/actions">https://github.com/actions</a> 查看更多。</li><li><em>jobs.{job}.steps.$.with</em> 一个对象，调用 Action 传的参数，具体可以查看所使用 Action 的说明。</li></ul></li></ul></li></ul><h3 id="第三方-Actions"><a href="#第三方-Actions" class="headerlink" title="第三方 Actions"></a><a href="#%E7%AC%AC%E4%B8%89%E6%96%B9-Actions" title="第三方 Actions"></a>第三方 Actions</h3><p>使用第三方 Actions 语法 <code>&#123;owner&#125;/&#123;repo&#125;@&#123;ref&#125;</code> 或者 <code>&#123;owner&#125;/&#123;repo&#125;/&#123;path&#125;@&#123;ref&#125;</code> 例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">jobs:</span><br><span class="line">  build:</span><br><span class="line">    runs-on: ubuntu-latest</span><br><span class="line">    steps:</span><br><span class="line">      - uses: actions/checkout@v2</span><br></pre></td></tr></table></figure><p>一、调用 <code>actions/checkout@v2</code> 可以实现 Checkout 一个 git 仓库到容器。</p><p>例如 Checkout 当前仓库到本地，<code>with.repo</code> 不填写默认为当前仓库。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">jobs:</span><br><span class="line">  build:</span><br><span class="line">    runs-on: ubuntu-latest</span><br><span class="line">    steps:</span><br><span class="line">      - uses: actions/checkout@v2</span><br></pre></td></tr></table></figure><p>例如 Checkout 第三方仓库 <code>git@github.com:sanonz/hexo-theme-concise.git</code> 的 <code>master</code> 分支到容器 <code>themes/concise</code> 目录。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">jobs:</span><br><span class="line">  build:</span><br><span class="line">    runs-on: ubuntu-latest</span><br><span class="line">    steps:</span><br><span class="line">      - uses: actions/checkout@v2</span><br><span class="line">      - with:</span><br><span class="line">          repository: sanonz/hexo-theme-concise</span><br><span class="line">          ref: master</span><br><span class="line">          path: themes/concise</span><br></pre></td></tr></table></figure><p>二、调用 <code>actions/setup-node@v1</code> 可以配置容器 Node.js 环境。</p><p>例如安装 Node.js 版本 v12 到容器中，<code>with.node-version</code> 可以指定 Node.js 版本。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">jobs:</span><br><span class="line">  build:</span><br><span class="line">    runs-on: ubuntu-latest</span><br><span class="line">    steps:</span><br><span class="line">      - uses: actions/setup-node@v1</span><br><span class="line">      - with:</span><br><span class="line">          node-version: v12</span><br></pre></td></tr></table></figure><p>可以在这里查找更多 Actions 以及使用方式 <a href="https://github.com/marketplace?type=actions&query=checkout">官方 Actions 市场</a>。</p><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a><a href="#%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6" title="配置文件"></a>配置文件</h3><p>复制一份 <a href="https://github.com/sanonz/hexo-theme-concise/blob/master/_config.example.yml">https://github.com/sanonz/hexo-theme-concise/blob/master/_config.example.yml</a>，放到 <code>blog</code> 根目录下，名为 <code>_config.theme.yml</code>，如果您已经配置过此文件，只需要把您的复制过来就行。</p><p>最终目录结构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">blog (repository)</span><br><span class="line">├── _config.theme.yml</span><br><span class="line">└── .github</span><br><span class="line">    └── workflows</span><br><span class="line">        └── deploy.yml</span><br></pre></td></tr></table></figure><p>把 <code>_config.theme.yml</code> 与 <code>deploy.yml</code> 文件推送到 <code>blog</code> 仓库，在此仓库 <code>Actions</code> 页面可以看到一个名字为 <code>CI</code> 的 Action。</p><h3 id="执行任务"><a href="#执行任务" class="headerlink" title="执行任务"></a><a href="#%E6%89%A7%E8%A1%8C%E4%BB%BB%E5%8A%A1" title="执行任务"></a>执行任务</h3><p>写一篇文章，<code>push</code> 到 <code>blog</code> 仓库的 <code>master</code> 分支，在此仓库 <code>Actions</code> 页面查看当前 task。</p><p><img src="https://sanonz.github.io/2020/deploy-a-hexo-blog-from-github-actions/run@2x.png"></p><p>当任务完成后查看您的博客 <code>https://your.github.io</code>，如果不出意外的话已经可以看到新添加的文章了。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a><a href="#%E5%B0%8F%E7%BB%93" title="小结"></a>小结</h2><p>偷懒是人类发展的动力，人都有偷懒的想法，目的就是为了让自己能够活得更好，经过几千年的不断发展，现在人偷懒的方式无疑更加的先进。</p><p>至此结束，感谢阅读。</p>]]></content>
      
      
      <categories>
          
          <category> 转载 </category>
          
          <category> 已发布 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo-Github个人博客搭建</title>
      <link href="/posts/79fe89cf.html"/>
      <url>/posts/79fe89cf.html</url>
      
        <content type="html"><![CDATA[<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><blockquote><p>需要准备好以下软件：</p><p>Node.js环境和Git</p></blockquote><h2 id="全局安装hexo博客框架"><a href="#全局安装hexo博客框架" class="headerlink" title="全局安装hexo博客框架"></a>全局安装hexo博客框架</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure><h2 id="hexo博客搭建"><a href="#hexo博客搭建" class="headerlink" title="hexo博客搭建"></a>hexo博客搭建</h2><h3 id="初始化博客目录"><a href="#初始化博客目录" class="headerlink" title="初始化博客目录"></a>初始化博客目录</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init blog</span><br><span class="line">cd blog</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><h3 id="启动博客"><a href="#启动博客" class="headerlink" title="启动博客"></a>启动博客</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo serve</span><br><span class="line">或者</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><h3 id="新建博客文章"><a href="#新建博客文章" class="headerlink" title="新建博客文章"></a>新建博客文章</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;我的第一篇文章&quot;</span><br><span class="line">或者</span><br><span class="line">hexo n &quot;我的第一篇文章&quot;</span><br></pre></td></tr></table></figure><h3 id="编辑文章后重新启动"><a href="#编辑文章后重新启动" class="headerlink" title="编辑文章后重新启动"></a>编辑文章后重新启动</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br><span class="line">或者</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><h3 id="部署到github上"><a href="#部署到github上" class="headerlink" title="部署到github上"></a>部署到github上</h3><h4 id="新建名为用户名-github-io的仓库"><a href="#新建名为用户名-github-io的仓库" class="headerlink" title="新建名为用户名.github.io的仓库"></a>新建名为<code>用户名.github.io</code>的仓库</h4><h4 id="安装部署插件"><a href="#安装部署插件" class="headerlink" title="安装部署插件"></a>安装部署插件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure><h4 id="配置-config-yml文件"><a href="#配置-config-yml文件" class="headerlink" title="配置_config.yml文件"></a>配置<code>_config.yml</code>文件</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//配置文件最底部</span></span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: <span class="comment">//github仓库地址</span></span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><h4 id="部署步骤"><a href="#部署步骤" class="headerlink" title="部署步骤"></a>部署步骤</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br><span class="line">或者</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><h2 id="切换主题（以butterfly为例）"><a href="#切换主题（以butterfly为例）" class="headerlink" title="切换主题（以butterfly为例）"></a>切换主题（以butterfly为例）</h2><h3 id="下载安装主题"><a href="#下载安装主题" class="headerlink" title="下载安装主题"></a>下载安装主题</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// blog根目录</span><br><span class="line">git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure><h4 id="配置根目录下的-config-yml，把主题改为butterfly"><a href="#配置根目录下的-config-yml，把主题改为butterfly" class="headerlink" title="配置根目录下的 _config.yml，把主题改为butterfly"></a>配置根目录下的<code> _config.yml</code>，把主题改为butterfly</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: butterfly</span><br></pre></td></tr></table></figure><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo serve</span><br></pre></td></tr></table></figure><h3 id="常见命令"><a href="#常见命令" class="headerlink" title="常见命令"></a>常见命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;文章名称&quot; #hexo n &quot;文章名称&quot;</span><br><span class="line">hexo new page &quot;pageName&quot; #新建页面</span><br><span class="line">hexo generate #生成静态页面至public目录</span><br><span class="line">hexo server #开启预览访问端口（默认端口4000，&#x27;ctrl + c&#x27;关闭server）</span><br><span class="line">hexo deploy #将.deploy目录部署到GitHub</span><br><span class="line">hexo help  # 查看帮助</span><br><span class="line">hexo version  #查看Hexo的版本</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> hexo </tag>
            
            <tag> github </tag>
            
            <tag> Java </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown基础语法</title>
      <link href="/posts/5c98fe12.html"/>
      <url>/posts/5c98fe12.html</url>
      
        <content type="html"><![CDATA[<h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><ul><li>三个反引号&#96;&#96;&#96;接着语言名称</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.print(<span class="string">&quot;hello&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="行内代码"><a href="#行内代码" class="headerlink" title="行内代码"></a>行内代码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`printf(&quot;hello&quot;)</span><br></pre></td></tr></table></figure><p><code>printf()</code></p><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><ul><li>井号#</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">...</span><br><span class="line">###### 六级标题</span><br></pre></td></tr></table></figure><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">*斜体*</span><br><span class="line">**加粗显示**</span><br><span class="line">***加粗斜体***</span><br><span class="line">~~删除线效果~~</span><br></pre></td></tr></table></figure><p><em>斜体</em><br><strong>加粗显示</strong><br><em><strong>加粗斜体</strong></em><br><del>删除线效果</del></p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><ul><li>尖括号 &gt;</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;一级</span><br><span class="line">&gt;&gt;二级</span><br></pre></td></tr></table></figure><blockquote><p>一级</p><blockquote><p>二级</p></blockquote></blockquote><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//第一种</span><br><span class="line">---</span><br><span class="line">//第二种</span><br><span class="line">&lt;hr&gt;</span><br></pre></td></tr></table></figure><hr><hr><h2 id="图片插入"><a href="#图片插入" class="headerlink" title="图片插入"></a>图片插入</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//在线图片和本地图片都可以</span><br><span class="line">![图片描述](图片地址)</span><br></pre></td></tr></table></figure><img src="https://tse4-mm.cn.bing.net/th/id/OIP-C.CRlYRvJDk5HhQFYrxUn3WgHaFP?w=286&h=202&c=7&r=0&o=5&dpr=1.3&pid=1.7" alt="图片地址" title="提示" style="zoom: 150%;" /><h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[我的github](https://github.com/10wen)</span><br></pre></td></tr></table></figure><p><a href="https://github.com/10wen">我的github</a></p><p><a href="baidu.com" title="标题">百度</a></p><p><a href="http://www.baibu.com/" title="标题">百度</a></p><p>锚点<a href="#%E5%88%86%E5%89%B2%E7%BA%BF">跳到分割线</a></p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 无序列表</span><br><span class="line">- 列表项</span><br><span class="line">// 有序列表</span><br><span class="line">1. 列表项</span><br></pre></td></tr></table></figure><ul><li>列表项</li></ul><ol><li>列表项</li></ol><h2 id="列表-1"><a href="#列表-1" class="headerlink" title="列表"></a>列表</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//Ctrl+T或右击插入表格</span><br><span class="line">| 表头1     |     表头2 |   表头3   |</span><br><span class="line">| :-------- | --------: | :-------: |</span><br><span class="line">| 左对齐内容 | 右对齐内容 | 居中内容 |</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">表头1</th><th align="right">表头2</th><th align="center">表头3</th></tr></thead><tbody><tr><td align="left">左对齐内容</td><td align="right">右对齐内容</td><td align="center">居中内容</td></tr></tbody></table><h2 id="单选"><a href="#单选" class="headerlink" title="单选"></a>单选</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- [ ] 码字</span><br><span class="line">- [X] 已码字</span><br></pre></td></tr></table></figure><ul><li><input disabled="" type="checkbox"> 码字</li><li><input checked="" disabled="" type="checkbox"> 已码字</li></ul><h2 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">后边有脚注[^这里是脚注]</span><br><span class="line">文章尾部定义脚注</span><br><span class="line">[^这里是脚注]:脚注解释</span><br></pre></td></tr></table></figure><p>后边有脚注<a href="%E8%84%9A%E6%B3%A8%E8%A7%A3%E9%87%8A">^这里是脚注</a></p><h2 id="支持html"><a href="#支持html" class="headerlink" title="支持html"></a>支持html</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//下划线</span><br><span class="line">&lt;u&gt;下划线&lt;/u&gt;</span><br><span class="line">//分割线</span><br><span class="line">&lt;hr&gt;</span><br></pre></td></tr></table></figure><p><u>下划线</u></p><hr><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="表情符号"><a href="#表情符号" class="headerlink" title="表情符号"></a>表情符号</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:名称;</span><br></pre></td></tr></table></figure><p>:small_airplane:</p><p>:smile:</p><h3 id="嵌入视频"><a href="#嵌入视频" class="headerlink" title="嵌入视频"></a>嵌入视频</h3><iframe height=450 width=100% src="//player.bilibili.com/player.html?aid=327623069&bvid=BV1JA411h7Gw&cid=171385214&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><hr>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
